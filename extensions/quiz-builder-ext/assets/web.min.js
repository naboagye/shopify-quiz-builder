(() => {
  var KT = Object.create;
  var Sa = Object.defineProperty,
    $T = Object.defineProperties,
    BT = Object.getOwnPropertyDescriptor,
    zT = Object.getOwnPropertyDescriptors,
    WT = Object.getOwnPropertyNames,
    Ay = Object.getOwnPropertySymbols,
    YT = Object.getPrototypeOf,
    Ey = Object.prototype.hasOwnProperty,
    HT = Object.prototype.propertyIsEnumerable;
  var Ny = (e, t, r) =>
      t in e
        ? Sa(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r })
        : (e[t] = r),
    O = (e, t) => {
      for (var r in t || (t = {})) Ey.call(t, r) && Ny(e, r, t[r]);
      if (Ay) for (var r of Ay(t)) HT.call(t, r) && Ny(e, r, t[r]);
      return e;
    },
    N = (e, t) => $T(e, zT(t)),
    JT = (e) => Sa(e, "__esModule", { value: !0 });
  var f = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);
  var XT = (e, t, r) => {
      if ((t && typeof t == "object") || typeof t == "function")
        for (let n of WT(t))
          !Ey.call(e, n) &&
            n !== "default" &&
            Sa(e, n, {
              get: () => t[n],
              enumerable: !(r = BT(t, n)) || r.enumerable,
            });
      return e;
    },
    st = (e) =>
      XT(
        JT(
          Sa(
            e != null ? KT(YT(e)) : {},
            "default",
            e && e.__esModule && "default" in e
              ? { get: () => e.default, enumerable: !0 }
              : { value: e, enumerable: !0 }
          )
        ),
        e
      );
  var y = (e, t, r) =>
    new Promise((n, i) => {
      var s = (u) => {
          try {
            o(r.next(u));
          } catch (l) {
            i(l);
          }
        },
        a = (u) => {
          try {
            o(r.throw(u));
          } catch (l) {
            i(l);
          }
        },
        o = (u) => (u.done ? n(u.value) : Promise.resolve(u.value).then(s, a));
      o((r = r.apply(e, t)).next());
    });
  var jy = f((Iy) => {
    "use strict";
    Object.defineProperty(Iy, "__esModule", { value: !0 });
  });
  var Ju = f((zi) => {
    "use strict";
    Object.defineProperty(zi, "__esModule", { value: !0 });
    zi.BrowserSessionStorageType = void 0;
    var ZT;
    (function (e) {
      (e.Durable = "Durable"),
        (e.Session = "session"),
        (e.Temporary = "temporary");
    })(
      (ZT = zi.BrowserSessionStorageType || (zi.BrowserSessionStorageType = {}))
    );
  });
  var Xu = f((hn) => {
    "use strict";
    Object.defineProperty(hn, "__esModule", { value: !0 });
    hn.DataHydrator = hn.Hydrators = void 0;
    hn.Hydrators = {
      DateTime(e) {
        return new Date(e);
      },
    };
    var Py = class {
      constructor(t) {
        Object.defineProperty(this, "plan", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: t,
        });
      }
      apply(t) {
        return Array.isArray(t)
          ? t.map((r) => this.hydrateObject(r))
          : this.hydrateObject(t);
      }
      hydrateObject(t) {
        let r = O({}, t);
        for (let [n, i] of Object.entries(this.plan)) {
          let s = r[n];
          s != null && (r[n] = hn.Hydrators[i](s));
        }
        return r;
      }
    };
    hn.DataHydrator = Py;
  });
  var wy = f((Wi) => {
    "use strict";
    Object.defineProperty(Wi, "__esModule", { value: !0 });
    Wi.fieldSelectionToGQLBuilderFields = void 0;
    var e_ = (e, t = !1) => {
      let r = [];
      t && r.push("__typename");
      for (let [n, i] of Object.entries(e))
        typeof i == "object" && i !== null
          ? r.push({ [n]: (0, Wi.fieldSelectionToGQLBuilderFields)(i) })
          : i && r.push(n);
      return [...new Set(r)];
    };
    Wi.fieldSelectionToGQLBuilderFields = e_;
  });
  var Dy = f((Hn) => {
    "use strict";
    Object.defineProperty(Hn, "__esModule", { value: !0 });
    Hn.versionInfo = Hn.version = void 0;
    var t_ = "16.5.0";
    Hn.version = t_;
    var r_ = Object.freeze({
      major: 16,
      minor: 5,
      patch: 0,
      preReleaseTag: null,
    });
    Hn.versionInfo = r_;
  });
  var Tt = f((Zu) => {
    "use strict";
    Object.defineProperty(Zu, "__esModule", { value: !0 });
    Zu.devAssert = n_;
    function n_(e, t) {
      if (!Boolean(e)) throw new Error(t);
    }
  });
  var Ta = f((el) => {
    "use strict";
    Object.defineProperty(el, "__esModule", { value: !0 });
    el.isPromise = i_;
    function i_(e) {
      return typeof (e == null ? void 0 : e.then) == "function";
    }
  });
  var gr = f((tl) => {
    "use strict";
    Object.defineProperty(tl, "__esModule", { value: !0 });
    tl.isObjectLike = s_;
    function s_(e) {
      return typeof e == "object" && e !== null;
    }
  });
  var ct = f((rl) => {
    "use strict";
    Object.defineProperty(rl, "__esModule", { value: !0 });
    rl.invariant = a_;
    function a_(e, t) {
      if (!Boolean(e))
        throw new Error(t != null ? t : "Unexpected invariant triggered.");
    }
  });
  var _a = f((nl) => {
    "use strict";
    Object.defineProperty(nl, "__esModule", { value: !0 });
    nl.getLocation = l_;
    var o_ = ct(),
      u_ = /\r\n|[\n\r]/g;
    function l_(e, t) {
      let r = 0,
        n = 1;
      for (let i of e.body.matchAll(u_)) {
        if ((typeof i.index == "number" || (0, o_.invariant)(!1), i.index >= t))
          break;
        (r = i.index + i[0].length), (n += 1);
      }
      return { line: n, column: t + 1 - r };
    }
  });
  var il = f((Aa) => {
    "use strict";
    Object.defineProperty(Aa, "__esModule", { value: !0 });
    Aa.printLocation = p_;
    Aa.printSourceLocation = Ry;
    var c_ = _a();
    function p_(e) {
      return Ry(e.source, (0, c_.getLocation)(e.source, e.start));
    }
    function Ry(e, t) {
      let r = e.locationOffset.column - 1,
        n = "".padStart(r) + e.body,
        i = t.line - 1,
        s = e.locationOffset.line - 1,
        a = t.line + s,
        o = t.line === 1 ? r : 0,
        u = t.column + o,
        l = `${e.name}:${a}:${u}
`,
        c = n.split(/\r\n|[\n\r]/g),
        d = c[i];
      if (d.length > 120) {
        let p = Math.floor(u / 80),
          m = u % 80,
          v = [];
        for (let E = 0; E < d.length; E += 80) v.push(d.slice(E, E + 80));
        return (
          l +
          Ly([
            [`${a} |`, v[0]],
            ...v.slice(1, p + 1).map((E) => ["|", E]),
            ["|", "^".padStart(m)],
            ["|", v[p + 1]],
          ])
        );
      }
      return (
        l +
        Ly([
          [`${a - 1} |`, c[i - 1]],
          [`${a} |`, d],
          ["|", "^".padStart(u)],
          [`${a + 1} |`, c[i + 1]],
        ])
      );
    }
    function Ly(e) {
      let t = e.filter(([n, i]) => i !== void 0),
        r = Math.max(...t.map(([n]) => n.length));
      return t.map(([n, i]) => n.padStart(r) + (i ? " " + i : "")).join(`
`);
    }
  });
  var W = f((Jn) => {
    "use strict";
    Object.defineProperty(Jn, "__esModule", { value: !0 });
    Jn.GraphQLError = void 0;
    Jn.formatError = h_;
    Jn.printError = y_;
    var d_ = gr(),
      Fy = _a(),
      qy = il();
    function f_(e) {
      let t = e[0];
      return t == null || "kind" in t || "length" in t
        ? {
            nodes: t,
            source: e[1],
            positions: e[2],
            path: e[3],
            originalError: e[4],
            extensions: e[5],
          }
        : t;
    }
    var Ea = class extends Error {
      constructor(t, ...r) {
        var n, i, s;
        let {
          nodes: a,
          source: o,
          positions: u,
          path: l,
          originalError: c,
          extensions: d,
        } = f_(r);
        super(t);
        (this.name = "GraphQLError"),
          (this.path = l != null ? l : void 0),
          (this.originalError = c != null ? c : void 0),
          (this.nodes = My(Array.isArray(a) ? a : a ? [a] : void 0));
        let p = My(
          (n = this.nodes) === null || n === void 0
            ? void 0
            : n.map((v) => v.loc).filter((v) => v != null)
        );
        (this.source =
          o != null
            ? o
            : p == null || (i = p[0]) === null || i === void 0
            ? void 0
            : i.source),
          (this.positions =
            u != null ? u : p == null ? void 0 : p.map((v) => v.start)),
          (this.locations =
            u && o
              ? u.map((v) => (0, Fy.getLocation)(o, v))
              : p == null
              ? void 0
              : p.map((v) => (0, Fy.getLocation)(v.source, v.start)));
        let m = (0, d_.isObjectLike)(c == null ? void 0 : c.extensions)
          ? c == null
            ? void 0
            : c.extensions
          : void 0;
        (this.extensions =
          (s = d != null ? d : m) !== null && s !== void 0
            ? s
            : Object.create(null)),
          Object.defineProperties(this, {
            message: { writable: !0, enumerable: !0 },
            name: { enumerable: !1 },
            nodes: { enumerable: !1 },
            source: { enumerable: !1 },
            positions: { enumerable: !1 },
            originalError: { enumerable: !1 },
          }),
          c != null && c.stack
            ? Object.defineProperty(this, "stack", {
                value: c.stack,
                writable: !0,
                configurable: !0,
              })
            : Error.captureStackTrace
            ? Error.captureStackTrace(this, Ea)
            : Object.defineProperty(this, "stack", {
                value: Error().stack,
                writable: !0,
                configurable: !0,
              });
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
      toString() {
        let t = this.message;
        if (this.nodes)
          for (let r of this.nodes)
            r.loc &&
              (t +=
                `

` + (0, qy.printLocation)(r.loc));
        else if (this.source && this.locations)
          for (let r of this.locations)
            t +=
              `

` + (0, qy.printSourceLocation)(this.source, r);
        return t;
      }
      toJSON() {
        let t = { message: this.message };
        return (
          this.locations != null && (t.locations = this.locations),
          this.path != null && (t.path = this.path),
          this.extensions != null &&
            Object.keys(this.extensions).length > 0 &&
            (t.extensions = this.extensions),
          t
        );
      }
    };
    Jn.GraphQLError = Ea;
    function My(e) {
      return e === void 0 || e.length === 0 ? void 0 : e;
    }
    function y_(e) {
      return e.toString();
    }
    function h_(e) {
      return e.toJSON();
    }
  });
  var Na = f((sl) => {
    "use strict";
    Object.defineProperty(sl, "__esModule", { value: !0 });
    sl.syntaxError = g_;
    var m_ = W();
    function g_(e, t, r) {
      return new m_.GraphQLError(`Syntax Error: ${r}`, {
        source: e,
        positions: [t],
      });
    }
  });
  var vr = f((Kt) => {
    "use strict";
    Object.defineProperty(Kt, "__esModule", { value: !0 });
    Kt.Token =
      Kt.QueryDocumentKeys =
      Kt.OperationTypeNode =
      Kt.Location =
        void 0;
    Kt.isNode = b_;
    var xy = class {
      constructor(t, r, n) {
        (this.start = t.start),
          (this.end = r.end),
          (this.startToken = t),
          (this.endToken = r),
          (this.source = n);
      }
      get [Symbol.toStringTag]() {
        return "Location";
      }
      toJSON() {
        return { start: this.start, end: this.end };
      }
    };
    Kt.Location = xy;
    var Cy = class {
      constructor(t, r, n, i, s, a) {
        (this.kind = t),
          (this.start = r),
          (this.end = n),
          (this.line = i),
          (this.column = s),
          (this.value = a),
          (this.prev = null),
          (this.next = null);
      }
      get [Symbol.toStringTag]() {
        return "Token";
      }
      toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column,
        };
      }
    };
    Kt.Token = Cy;
    var ky = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet",
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet",
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields",
      ],
      FieldDefinition: [
        "description",
        "name",
        "arguments",
        "type",
        "directives",
      ],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives",
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields",
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: [
        "description",
        "name",
        "directives",
        "fields",
      ],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"],
    };
    Kt.QueryDocumentKeys = ky;
    var v_ = new Set(Object.keys(ky));
    function b_(e) {
      let t = e == null ? void 0 : e.kind;
      return typeof t == "string" && v_.has(t);
    }
    var al;
    Kt.OperationTypeNode = al;
    (function (e) {
      (e.QUERY = "query"),
        (e.MUTATION = "mutation"),
        (e.SUBSCRIPTION = "subscription");
    })(al || (Kt.OperationTypeNode = al = {}));
  });
  var Xn = f((Yi) => {
    "use strict";
    Object.defineProperty(Yi, "__esModule", { value: !0 });
    Yi.DirectiveLocation = void 0;
    var ol;
    Yi.DirectiveLocation = ol;
    (function (e) {
      (e.QUERY = "QUERY"),
        (e.MUTATION = "MUTATION"),
        (e.SUBSCRIPTION = "SUBSCRIPTION"),
        (e.FIELD = "FIELD"),
        (e.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION"),
        (e.FRAGMENT_SPREAD = "FRAGMENT_SPREAD"),
        (e.INLINE_FRAGMENT = "INLINE_FRAGMENT"),
        (e.VARIABLE_DEFINITION = "VARIABLE_DEFINITION"),
        (e.SCHEMA = "SCHEMA"),
        (e.SCALAR = "SCALAR"),
        (e.OBJECT = "OBJECT"),
        (e.FIELD_DEFINITION = "FIELD_DEFINITION"),
        (e.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION"),
        (e.INTERFACE = "INTERFACE"),
        (e.UNION = "UNION"),
        (e.ENUM = "ENUM"),
        (e.ENUM_VALUE = "ENUM_VALUE"),
        (e.INPUT_OBJECT = "INPUT_OBJECT"),
        (e.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION");
    })(ol || (Yi.DirectiveLocation = ol = {}));
  });
  var ue = f((Hi) => {
    "use strict";
    Object.defineProperty(Hi, "__esModule", { value: !0 });
    Hi.Kind = void 0;
    var ul;
    Hi.Kind = ul;
    (function (e) {
      (e.NAME = "Name"),
        (e.DOCUMENT = "Document"),
        (e.OPERATION_DEFINITION = "OperationDefinition"),
        (e.VARIABLE_DEFINITION = "VariableDefinition"),
        (e.SELECTION_SET = "SelectionSet"),
        (e.FIELD = "Field"),
        (e.ARGUMENT = "Argument"),
        (e.FRAGMENT_SPREAD = "FragmentSpread"),
        (e.INLINE_FRAGMENT = "InlineFragment"),
        (e.FRAGMENT_DEFINITION = "FragmentDefinition"),
        (e.VARIABLE = "Variable"),
        (e.INT = "IntValue"),
        (e.FLOAT = "FloatValue"),
        (e.STRING = "StringValue"),
        (e.BOOLEAN = "BooleanValue"),
        (e.NULL = "NullValue"),
        (e.ENUM = "EnumValue"),
        (e.LIST = "ListValue"),
        (e.OBJECT = "ObjectValue"),
        (e.OBJECT_FIELD = "ObjectField"),
        (e.DIRECTIVE = "Directive"),
        (e.NAMED_TYPE = "NamedType"),
        (e.LIST_TYPE = "ListType"),
        (e.NON_NULL_TYPE = "NonNullType"),
        (e.SCHEMA_DEFINITION = "SchemaDefinition"),
        (e.OPERATION_TYPE_DEFINITION = "OperationTypeDefinition"),
        (e.SCALAR_TYPE_DEFINITION = "ScalarTypeDefinition"),
        (e.OBJECT_TYPE_DEFINITION = "ObjectTypeDefinition"),
        (e.FIELD_DEFINITION = "FieldDefinition"),
        (e.INPUT_VALUE_DEFINITION = "InputValueDefinition"),
        (e.INTERFACE_TYPE_DEFINITION = "InterfaceTypeDefinition"),
        (e.UNION_TYPE_DEFINITION = "UnionTypeDefinition"),
        (e.ENUM_TYPE_DEFINITION = "EnumTypeDefinition"),
        (e.ENUM_VALUE_DEFINITION = "EnumValueDefinition"),
        (e.INPUT_OBJECT_TYPE_DEFINITION = "InputObjectTypeDefinition"),
        (e.DIRECTIVE_DEFINITION = "DirectiveDefinition"),
        (e.SCHEMA_EXTENSION = "SchemaExtension"),
        (e.SCALAR_TYPE_EXTENSION = "ScalarTypeExtension"),
        (e.OBJECT_TYPE_EXTENSION = "ObjectTypeExtension"),
        (e.INTERFACE_TYPE_EXTENSION = "InterfaceTypeExtension"),
        (e.UNION_TYPE_EXTENSION = "UnionTypeExtension"),
        (e.ENUM_TYPE_EXTENSION = "EnumTypeExtension"),
        (e.INPUT_OBJECT_TYPE_EXTENSION = "InputObjectTypeExtension");
    })(ul || (Hi.Kind = ul = {}));
  });
  var Ia = f((mn) => {
    "use strict";
    Object.defineProperty(mn, "__esModule", { value: !0 });
    mn.isDigit = Gy;
    mn.isLetter = ll;
    mn.isNameContinue = T_;
    mn.isNameStart = S_;
    mn.isWhiteSpace = O_;
    function O_(e) {
      return e === 9 || e === 32;
    }
    function Gy(e) {
      return e >= 48 && e <= 57;
    }
    function ll(e) {
      return (e >= 97 && e <= 122) || (e >= 65 && e <= 90);
    }
    function S_(e) {
      return ll(e) || e === 95;
    }
    function T_(e) {
      return ll(e) || Gy(e) || e === 95;
    }
  });
  var Xi = f((Ji) => {
    "use strict";
    Object.defineProperty(Ji, "__esModule", { value: !0 });
    Ji.dedentBlockStringLines = __;
    Ji.isPrintableAsBlockString = E_;
    Ji.printBlockString = N_;
    var cl = Ia();
    function __(e) {
      var t;
      let r = Number.MAX_SAFE_INTEGER,
        n = null,
        i = -1;
      for (let a = 0; a < e.length; ++a) {
        var s;
        let o = e[a],
          u = A_(o);
        u !== o.length &&
          ((n = (s = n) !== null && s !== void 0 ? s : a),
          (i = a),
          a !== 0 && u < r && (r = u));
      }
      return e
        .map((a, o) => (o === 0 ? a : a.slice(r)))
        .slice((t = n) !== null && t !== void 0 ? t : 0, i + 1);
    }
    function A_(e) {
      let t = 0;
      for (; t < e.length && (0, cl.isWhiteSpace)(e.charCodeAt(t)); ) ++t;
      return t;
    }
    function E_(e) {
      if (e === "") return !0;
      let t = !0,
        r = !1,
        n = !0,
        i = !1;
      for (let s = 0; s < e.length; ++s)
        switch (e.codePointAt(s)) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 11:
          case 12:
          case 14:
          case 15:
            return !1;
          case 13:
            return !1;
          case 10:
            if (t && !i) return !1;
            (i = !0), (t = !0), (r = !1);
            break;
          case 9:
          case 32:
            r || (r = t);
            break;
          default:
            n && (n = r), (t = !1);
        }
      return !(t || (n && i));
    }
    function N_(e, t) {
      let r = e.replace(/"""/g, '\\"""'),
        n = r.split(/\r\n|[\n\r]/g),
        i = n.length === 1,
        s =
          n.length > 1 &&
          n
            .slice(1)
            .every(
              (m) => m.length === 0 || (0, cl.isWhiteSpace)(m.charCodeAt(0))
            ),
        a = r.endsWith('\\"""'),
        o = e.endsWith('"') && !a,
        u = e.endsWith("\\"),
        l = o || u,
        c = !(t != null && t.minimize) && (!i || e.length > 70 || l || s || a),
        d = "",
        p = i && (0, cl.isWhiteSpace)(e.charCodeAt(0));
      return (
        ((c && !p) || s) &&
          (d += `
`),
        (d += r),
        (c || l) &&
          (d += `
`),
        '"""' + d + '"""'
      );
    }
  });
  var es = f((Zi) => {
    "use strict";
    Object.defineProperty(Zi, "__esModule", { value: !0 });
    Zi.TokenKind = void 0;
    var pl;
    Zi.TokenKind = pl;
    (function (e) {
      (e.SOF = "<SOF>"),
        (e.EOF = "<EOF>"),
        (e.BANG = "!"),
        (e.DOLLAR = "$"),
        (e.AMP = "&"),
        (e.PAREN_L = "("),
        (e.PAREN_R = ")"),
        (e.SPREAD = "..."),
        (e.COLON = ":"),
        (e.EQUALS = "="),
        (e.AT = "@"),
        (e.BRACKET_L = "["),
        (e.BRACKET_R = "]"),
        (e.BRACE_L = "{"),
        (e.PIPE = "|"),
        (e.BRACE_R = "}"),
        (e.NAME = "Name"),
        (e.INT = "Int"),
        (e.FLOAT = "Float"),
        (e.STRING = "String"),
        (e.BLOCK_STRING = "BlockString"),
        (e.COMMENT = "Comment");
    })(pl || (Zi.TokenKind = pl = {}));
  });
  var Pa = f((rs) => {
    "use strict";
    Object.defineProperty(rs, "__esModule", { value: !0 });
    rs.Lexer = void 0;
    rs.isPunctuatorTokenKind = j_;
    var ar = Na(),
      Qy = vr(),
      I_ = Xi(),
      gn = Ia(),
      te = es(),
      Uy = class {
        constructor(t) {
          let r = new Qy.Token(te.TokenKind.SOF, 0, 0, 0, 0);
          (this.source = t),
            (this.lastToken = r),
            (this.token = r),
            (this.line = 1),
            (this.lineStart = 0);
        }
        get [Symbol.toStringTag]() {
          return "Lexer";
        }
        advance() {
          return (this.lastToken = this.token), (this.token = this.lookahead());
        }
        lookahead() {
          let t = this.token;
          if (t.kind !== te.TokenKind.EOF)
            do
              if (t.next) t = t.next;
              else {
                let r = P_(this, t.end);
                (t.next = r), (r.prev = t), (t = r);
              }
            while (t.kind === te.TokenKind.COMMENT);
          return t;
        }
      };
    rs.Lexer = Uy;
    function j_(e) {
      return (
        e === te.TokenKind.BANG ||
        e === te.TokenKind.DOLLAR ||
        e === te.TokenKind.AMP ||
        e === te.TokenKind.PAREN_L ||
        e === te.TokenKind.PAREN_R ||
        e === te.TokenKind.SPREAD ||
        e === te.TokenKind.COLON ||
        e === te.TokenKind.EQUALS ||
        e === te.TokenKind.AT ||
        e === te.TokenKind.BRACKET_L ||
        e === te.TokenKind.BRACKET_R ||
        e === te.TokenKind.BRACE_L ||
        e === te.TokenKind.PIPE ||
        e === te.TokenKind.BRACE_R
      );
    }
    function Zn(e) {
      return (e >= 0 && e <= 55295) || (e >= 57344 && e <= 1114111);
    }
    function ja(e, t) {
      return Vy(e.charCodeAt(t)) && Ky(e.charCodeAt(t + 1));
    }
    function Vy(e) {
      return e >= 55296 && e <= 56319;
    }
    function Ky(e) {
      return e >= 56320 && e <= 57343;
    }
    function vn(e, t) {
      let r = e.source.body.codePointAt(t);
      if (r === void 0) return te.TokenKind.EOF;
      if (r >= 32 && r <= 126) {
        let n = String.fromCodePoint(r);
        return n === '"' ? `'"'` : `"${n}"`;
      }
      return "U+" + r.toString(16).toUpperCase().padStart(4, "0");
    }
    function Ve(e, t, r, n, i) {
      let s = e.line,
        a = 1 + r - e.lineStart;
      return new Qy.Token(t, r, n, s, a, i);
    }
    function P_(e, t) {
      let r = e.source.body,
        n = r.length,
        i = t;
      for (; i < n; ) {
        let s = r.charCodeAt(i);
        switch (s) {
          case 65279:
          case 9:
          case 32:
          case 44:
            ++i;
            continue;
          case 10:
            ++i, ++e.line, (e.lineStart = i);
            continue;
          case 13:
            r.charCodeAt(i + 1) === 10 ? (i += 2) : ++i,
              ++e.line,
              (e.lineStart = i);
            continue;
          case 35:
            return w_(e, i);
          case 33:
            return Ve(e, te.TokenKind.BANG, i, i + 1);
          case 36:
            return Ve(e, te.TokenKind.DOLLAR, i, i + 1);
          case 38:
            return Ve(e, te.TokenKind.AMP, i, i + 1);
          case 40:
            return Ve(e, te.TokenKind.PAREN_L, i, i + 1);
          case 41:
            return Ve(e, te.TokenKind.PAREN_R, i, i + 1);
          case 46:
            if (r.charCodeAt(i + 1) === 46 && r.charCodeAt(i + 2) === 46)
              return Ve(e, te.TokenKind.SPREAD, i, i + 3);
            break;
          case 58:
            return Ve(e, te.TokenKind.COLON, i, i + 1);
          case 61:
            return Ve(e, te.TokenKind.EQUALS, i, i + 1);
          case 64:
            return Ve(e, te.TokenKind.AT, i, i + 1);
          case 91:
            return Ve(e, te.TokenKind.BRACKET_L, i, i + 1);
          case 93:
            return Ve(e, te.TokenKind.BRACKET_R, i, i + 1);
          case 123:
            return Ve(e, te.TokenKind.BRACE_L, i, i + 1);
          case 124:
            return Ve(e, te.TokenKind.PIPE, i, i + 1);
          case 125:
            return Ve(e, te.TokenKind.BRACE_R, i, i + 1);
          case 34:
            return r.charCodeAt(i + 1) === 34 && r.charCodeAt(i + 2) === 34
              ? M_(e, i)
              : R_(e, i);
        }
        if ((0, gn.isDigit)(s) || s === 45) return D_(e, i, s);
        if ((0, gn.isNameStart)(s)) return x_(e, i);
        throw (0, ar.syntaxError)(
          e.source,
          i,
          s === 39
            ? `Unexpected single quote character ('), did you mean to use a double quote (")?`
            : Zn(s) || ja(r, i)
            ? `Unexpected character: ${vn(e, i)}.`
            : `Invalid character: ${vn(e, i)}.`
        );
      }
      return Ve(e, te.TokenKind.EOF, n, n);
    }
    function w_(e, t) {
      let r = e.source.body,
        n = r.length,
        i = t + 1;
      for (; i < n; ) {
        let s = r.charCodeAt(i);
        if (s === 10 || s === 13) break;
        if (Zn(s)) ++i;
        else if (ja(r, i)) i += 2;
        else break;
      }
      return Ve(e, te.TokenKind.COMMENT, t, i, r.slice(t + 1, i));
    }
    function D_(e, t, r) {
      let n = e.source.body,
        i = t,
        s = r,
        a = !1;
      if ((s === 45 && (s = n.charCodeAt(++i)), s === 48)) {
        if (((s = n.charCodeAt(++i)), (0, gn.isDigit)(s)))
          throw (0, ar.syntaxError)(
            e.source,
            i,
            `Invalid number, unexpected digit after 0: ${vn(e, i)}.`
          );
      } else (i = dl(e, i, s)), (s = n.charCodeAt(i));
      if (
        (s === 46 &&
          ((a = !0),
          (s = n.charCodeAt(++i)),
          (i = dl(e, i, s)),
          (s = n.charCodeAt(i))),
        (s === 69 || s === 101) &&
          ((a = !0),
          (s = n.charCodeAt(++i)),
          (s === 43 || s === 45) && (s = n.charCodeAt(++i)),
          (i = dl(e, i, s)),
          (s = n.charCodeAt(i))),
        s === 46 || (0, gn.isNameStart)(s))
      )
        throw (0, ar.syntaxError)(
          e.source,
          i,
          `Invalid number, expected digit but got: ${vn(e, i)}.`
        );
      return Ve(
        e,
        a ? te.TokenKind.FLOAT : te.TokenKind.INT,
        t,
        i,
        n.slice(t, i)
      );
    }
    function dl(e, t, r) {
      if (!(0, gn.isDigit)(r))
        throw (0, ar.syntaxError)(
          e.source,
          t,
          `Invalid number, expected digit but got: ${vn(e, t)}.`
        );
      let n = e.source.body,
        i = t + 1;
      for (; (0, gn.isDigit)(n.charCodeAt(i)); ) ++i;
      return i;
    }
    function R_(e, t) {
      let r = e.source.body,
        n = r.length,
        i = t + 1,
        s = i,
        a = "";
      for (; i < n; ) {
        let o = r.charCodeAt(i);
        if (o === 34)
          return (a += r.slice(s, i)), Ve(e, te.TokenKind.STRING, t, i + 1, a);
        if (o === 92) {
          a += r.slice(s, i);
          let u =
            r.charCodeAt(i + 1) === 117
              ? r.charCodeAt(i + 2) === 123
                ? L_(e, i)
                : F_(e, i)
              : q_(e, i);
          (a += u.value), (i += u.size), (s = i);
          continue;
        }
        if (o === 10 || o === 13) break;
        if (Zn(o)) ++i;
        else if (ja(r, i)) i += 2;
        else
          throw (0, ar.syntaxError)(
            e.source,
            i,
            `Invalid character within String: ${vn(e, i)}.`
          );
      }
      throw (0, ar.syntaxError)(e.source, i, "Unterminated string.");
    }
    function L_(e, t) {
      let r = e.source.body,
        n = 0,
        i = 3;
      for (; i < 12; ) {
        let s = r.charCodeAt(t + i++);
        if (s === 125) {
          if (i < 5 || !Zn(n)) break;
          return { value: String.fromCodePoint(n), size: i };
        }
        if (((n = (n << 4) | ts(s)), n < 0)) break;
      }
      throw (0, ar.syntaxError)(
        e.source,
        t,
        `Invalid Unicode escape sequence: "${r.slice(t, t + i)}".`
      );
    }
    function F_(e, t) {
      let r = e.source.body,
        n = $y(r, t + 2);
      if (Zn(n)) return { value: String.fromCodePoint(n), size: 6 };
      if (Vy(n) && r.charCodeAt(t + 6) === 92 && r.charCodeAt(t + 7) === 117) {
        let i = $y(r, t + 8);
        if (Ky(i)) return { value: String.fromCodePoint(n, i), size: 12 };
      }
      throw (0, ar.syntaxError)(
        e.source,
        t,
        `Invalid Unicode escape sequence: "${r.slice(t, t + 6)}".`
      );
    }
    function $y(e, t) {
      return (
        (ts(e.charCodeAt(t)) << 12) |
        (ts(e.charCodeAt(t + 1)) << 8) |
        (ts(e.charCodeAt(t + 2)) << 4) |
        ts(e.charCodeAt(t + 3))
      );
    }
    function ts(e) {
      return e >= 48 && e <= 57
        ? e - 48
        : e >= 65 && e <= 70
        ? e - 55
        : e >= 97 && e <= 102
        ? e - 87
        : -1;
    }
    function q_(e, t) {
      let r = e.source.body;
      switch (r.charCodeAt(t + 1)) {
        case 34:
          return { value: '"', size: 2 };
        case 92:
          return { value: "\\", size: 2 };
        case 47:
          return { value: "/", size: 2 };
        case 98:
          return { value: "\b", size: 2 };
        case 102:
          return { value: "\f", size: 2 };
        case 110:
          return {
            value: `
`,
            size: 2,
          };
        case 114:
          return { value: "\r", size: 2 };
        case 116:
          return { value: "	", size: 2 };
      }
      throw (0, ar.syntaxError)(
        e.source,
        t,
        `Invalid character escape sequence: "${r.slice(t, t + 2)}".`
      );
    }
    function M_(e, t) {
      let r = e.source.body,
        n = r.length,
        i = e.lineStart,
        s = t + 3,
        a = s,
        o = "",
        u = [];
      for (; s < n; ) {
        let l = r.charCodeAt(s);
        if (
          l === 34 &&
          r.charCodeAt(s + 1) === 34 &&
          r.charCodeAt(s + 2) === 34
        ) {
          (o += r.slice(a, s)), u.push(o);
          let c = Ve(
            e,
            te.TokenKind.BLOCK_STRING,
            t,
            s + 3,
            (0, I_.dedentBlockStringLines)(u).join(`
`)
          );
          return (e.line += u.length - 1), (e.lineStart = i), c;
        }
        if (
          l === 92 &&
          r.charCodeAt(s + 1) === 34 &&
          r.charCodeAt(s + 2) === 34 &&
          r.charCodeAt(s + 3) === 34
        ) {
          (o += r.slice(a, s)), (a = s + 1), (s += 4);
          continue;
        }
        if (l === 10 || l === 13) {
          (o += r.slice(a, s)),
            u.push(o),
            l === 13 && r.charCodeAt(s + 1) === 10 ? (s += 2) : ++s,
            (o = ""),
            (a = s),
            (i = s);
          continue;
        }
        if (Zn(l)) ++s;
        else if (ja(r, s)) s += 2;
        else
          throw (0, ar.syntaxError)(
            e.source,
            s,
            `Invalid character within String: ${vn(e, s)}.`
          );
      }
      throw (0, ar.syntaxError)(e.source, s, "Unterminated string.");
    }
    function x_(e, t) {
      let r = e.source.body,
        n = r.length,
        i = t + 1;
      for (; i < n; ) {
        let s = r.charCodeAt(i);
        if ((0, gn.isNameContinue)(s)) ++i;
        else break;
      }
      return Ve(e, te.TokenKind.NAME, t, i, r.slice(t, i));
    }
  });
  var he = f((fl) => {
    "use strict";
    Object.defineProperty(fl, "__esModule", { value: !0 });
    fl.inspect = k_;
    var C_ = 10,
      By = 2;
    function k_(e) {
      return wa(e, []);
    }
    function wa(e, t) {
      switch (typeof e) {
        case "string":
          return JSON.stringify(e);
        case "function":
          return e.name ? `[function ${e.name}]` : "[function]";
        case "object":
          return G_(e, t);
        default:
          return String(e);
      }
    }
    function G_(e, t) {
      if (e === null) return "null";
      if (t.includes(e)) return "[Circular]";
      let r = [...t, e];
      if (Q_(e)) {
        let n = e.toJSON();
        if (n !== e) return typeof n == "string" ? n : wa(n, r);
      } else if (Array.isArray(e)) return V_(e, r);
      return U_(e, r);
    }
    function Q_(e) {
      return typeof e.toJSON == "function";
    }
    function U_(e, t) {
      let r = Object.entries(e);
      if (r.length === 0) return "{}";
      if (t.length > By) return "[" + K_(e) + "]";
      let n = r.map(([i, s]) => i + ": " + wa(s, t));
      return "{ " + n.join(", ") + " }";
    }
    function V_(e, t) {
      if (e.length === 0) return "[]";
      if (t.length > By) return "[Array]";
      let r = Math.min(C_, e.length),
        n = e.length - r,
        i = [];
      for (let s = 0; s < r; ++s) i.push(wa(e[s], t));
      return (
        n === 1
          ? i.push("... 1 more item")
          : n > 1 && i.push(`... ${n} more items`),
        "[" + i.join(", ") + "]"
      );
    }
    function K_(e) {
      let t = Object.prototype.toString
        .call(e)
        .replace(/^\[object /, "")
        .replace(/]$/, "");
      if (t === "Object" && typeof e.constructor == "function") {
        let r = e.constructor.name;
        if (typeof r == "string" && r !== "") return r;
      }
      return t;
    }
  });
  var ns = f((Da) => {
    "use strict";
    Object.defineProperty(Da, "__esModule", { value: !0 });
    Da.instanceOf = void 0;
    var GC = he(),
      $_ = function (t, r) {
        return t instanceof r;
      };
    Da.instanceOf = $_;
  });
  var Ra = f((is) => {
    "use strict";
    Object.defineProperty(is, "__esModule", { value: !0 });
    is.Source = void 0;
    is.isSource = W_;
    var yl = Tt(),
      B_ = he(),
      z_ = ns(),
      hl = class {
        constructor(t, r = "GraphQL request", n = { line: 1, column: 1 }) {
          typeof t == "string" ||
            (0, yl.devAssert)(
              !1,
              `Body must be a string. Received: ${(0, B_.inspect)(t)}.`
            ),
            (this.body = t),
            (this.name = r),
            (this.locationOffset = n),
            this.locationOffset.line > 0 ||
              (0, yl.devAssert)(
                !1,
                "line in locationOffset is 1-indexed and must be positive."
              ),
            this.locationOffset.column > 0 ||
              (0, yl.devAssert)(
                !1,
                "column in locationOffset is 1-indexed and must be positive."
              );
        }
        get [Symbol.toStringTag]() {
          return "Source";
        }
      };
    is.Source = hl;
    function W_(e) {
      return (0, z_.instanceOf)(e, hl);
    }
  });
  var ri = f((Yr) => {
    "use strict";
    Object.defineProperty(Yr, "__esModule", { value: !0 });
    Yr.Parser = void 0;
    Yr.parse = H_;
    Yr.parseConstValue = X_;
    Yr.parseType = Z_;
    Yr.parseValue = J_;
    var ei = Na(),
      ss = vr(),
      Y_ = Xn(),
      X = ue(),
      zy = Pa(),
      Wy = Ra(),
      R = es();
    function H_(e, t) {
      return new ti(e, t).parseDocument();
    }
    function J_(e, t) {
      let r = new ti(e, t);
      r.expectToken(R.TokenKind.SOF);
      let n = r.parseValueLiteral(!1);
      return r.expectToken(R.TokenKind.EOF), n;
    }
    function X_(e, t) {
      let r = new ti(e, t);
      r.expectToken(R.TokenKind.SOF);
      let n = r.parseConstValueLiteral();
      return r.expectToken(R.TokenKind.EOF), n;
    }
    function Z_(e, t) {
      let r = new ti(e, t);
      r.expectToken(R.TokenKind.SOF);
      let n = r.parseTypeReference();
      return r.expectToken(R.TokenKind.EOF), n;
    }
    var ti = class {
      constructor(t, r) {
        let n = (0, Wy.isSource)(t) ? t : new Wy.Source(t);
        (this._lexer = new zy.Lexer(n)), (this._options = r);
      }
      parseName() {
        let t = this.expectToken(R.TokenKind.NAME);
        return this.node(t, { kind: X.Kind.NAME, value: t.value });
      }
      parseDocument() {
        return this.node(this._lexer.token, {
          kind: X.Kind.DOCUMENT,
          definitions: this.many(
            R.TokenKind.SOF,
            this.parseDefinition,
            R.TokenKind.EOF
          ),
        });
      }
      parseDefinition() {
        if (this.peek(R.TokenKind.BRACE_L))
          return this.parseOperationDefinition();
        let t = this.peekDescription(),
          r = t ? this._lexer.lookahead() : this._lexer.token;
        if (r.kind === R.TokenKind.NAME) {
          switch (r.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
          if (t)
            throw (0, ei.syntaxError)(
              this._lexer.source,
              this._lexer.token.start,
              "Unexpected description, descriptions are supported only on type definitions."
            );
          switch (r.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        }
        throw this.unexpected(r);
      }
      parseOperationDefinition() {
        let t = this._lexer.token;
        if (this.peek(R.TokenKind.BRACE_L))
          return this.node(t, {
            kind: X.Kind.OPERATION_DEFINITION,
            operation: ss.OperationTypeNode.QUERY,
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
          });
        let r = this.parseOperationType(),
          n;
        return (
          this.peek(R.TokenKind.NAME) && (n = this.parseName()),
          this.node(t, {
            kind: X.Kind.OPERATION_DEFINITION,
            operation: r,
            name: n,
            variableDefinitions: this.parseVariableDefinitions(),
            directives: this.parseDirectives(!1),
            selectionSet: this.parseSelectionSet(),
          })
        );
      }
      parseOperationType() {
        let t = this.expectToken(R.TokenKind.NAME);
        switch (t.value) {
          case "query":
            return ss.OperationTypeNode.QUERY;
          case "mutation":
            return ss.OperationTypeNode.MUTATION;
          case "subscription":
            return ss.OperationTypeNode.SUBSCRIPTION;
        }
        throw this.unexpected(t);
      }
      parseVariableDefinitions() {
        return this.optionalMany(
          R.TokenKind.PAREN_L,
          this.parseVariableDefinition,
          R.TokenKind.PAREN_R
        );
      }
      parseVariableDefinition() {
        return this.node(this._lexer.token, {
          kind: X.Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type:
            (this.expectToken(R.TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(R.TokenKind.EQUALS)
            ? this.parseConstValueLiteral()
            : void 0,
          directives: this.parseConstDirectives(),
        });
      }
      parseVariable() {
        let t = this._lexer.token;
        return (
          this.expectToken(R.TokenKind.DOLLAR),
          this.node(t, { kind: X.Kind.VARIABLE, name: this.parseName() })
        );
      }
      parseSelectionSet() {
        return this.node(this._lexer.token, {
          kind: X.Kind.SELECTION_SET,
          selections: this.many(
            R.TokenKind.BRACE_L,
            this.parseSelection,
            R.TokenKind.BRACE_R
          ),
        });
      }
      parseSelection() {
        return this.peek(R.TokenKind.SPREAD)
          ? this.parseFragment()
          : this.parseField();
      }
      parseField() {
        let t = this._lexer.token,
          r = this.parseName(),
          n,
          i;
        return (
          this.expectOptionalToken(R.TokenKind.COLON)
            ? ((n = r), (i = this.parseName()))
            : (i = r),
          this.node(t, {
            kind: X.Kind.FIELD,
            alias: n,
            name: i,
            arguments: this.parseArguments(!1),
            directives: this.parseDirectives(!1),
            selectionSet: this.peek(R.TokenKind.BRACE_L)
              ? this.parseSelectionSet()
              : void 0,
          })
        );
      }
      parseArguments(t) {
        let r = t ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(R.TokenKind.PAREN_L, r, R.TokenKind.PAREN_R);
      }
      parseArgument(t = !1) {
        let r = this._lexer.token,
          n = this.parseName();
        return (
          this.expectToken(R.TokenKind.COLON),
          this.node(r, {
            kind: X.Kind.ARGUMENT,
            name: n,
            value: this.parseValueLiteral(t),
          })
        );
      }
      parseConstArgument() {
        return this.parseArgument(!0);
      }
      parseFragment() {
        let t = this._lexer.token;
        this.expectToken(R.TokenKind.SPREAD);
        let r = this.expectOptionalKeyword("on");
        return !r && this.peek(R.TokenKind.NAME)
          ? this.node(t, {
              kind: X.Kind.FRAGMENT_SPREAD,
              name: this.parseFragmentName(),
              directives: this.parseDirectives(!1),
            })
          : this.node(t, {
              kind: X.Kind.INLINE_FRAGMENT,
              typeCondition: r ? this.parseNamedType() : void 0,
              directives: this.parseDirectives(!1),
              selectionSet: this.parseSelectionSet(),
            });
      }
      parseFragmentDefinition() {
        var t;
        let r = this._lexer.token;
        return (
          this.expectKeyword("fragment"),
          ((t = this._options) === null || t === void 0
            ? void 0
            : t.allowLegacyFragmentVariables) === !0
            ? this.node(r, {
                kind: X.Kind.FRAGMENT_DEFINITION,
                name: this.parseFragmentName(),
                variableDefinitions: this.parseVariableDefinitions(),
                typeCondition:
                  (this.expectKeyword("on"), this.parseNamedType()),
                directives: this.parseDirectives(!1),
                selectionSet: this.parseSelectionSet(),
              })
            : this.node(r, {
                kind: X.Kind.FRAGMENT_DEFINITION,
                name: this.parseFragmentName(),
                typeCondition:
                  (this.expectKeyword("on"), this.parseNamedType()),
                directives: this.parseDirectives(!1),
                selectionSet: this.parseSelectionSet(),
              })
        );
      }
      parseFragmentName() {
        if (this._lexer.token.value === "on") throw this.unexpected();
        return this.parseName();
      }
      parseValueLiteral(t) {
        let r = this._lexer.token;
        switch (r.kind) {
          case R.TokenKind.BRACKET_L:
            return this.parseList(t);
          case R.TokenKind.BRACE_L:
            return this.parseObject(t);
          case R.TokenKind.INT:
            return (
              this._lexer.advance(),
              this.node(r, { kind: X.Kind.INT, value: r.value })
            );
          case R.TokenKind.FLOAT:
            return (
              this._lexer.advance(),
              this.node(r, { kind: X.Kind.FLOAT, value: r.value })
            );
          case R.TokenKind.STRING:
          case R.TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case R.TokenKind.NAME:
            switch ((this._lexer.advance(), r.value)) {
              case "true":
                return this.node(r, { kind: X.Kind.BOOLEAN, value: !0 });
              case "false":
                return this.node(r, { kind: X.Kind.BOOLEAN, value: !1 });
              case "null":
                return this.node(r, { kind: X.Kind.NULL });
              default:
                return this.node(r, { kind: X.Kind.ENUM, value: r.value });
            }
          case R.TokenKind.DOLLAR:
            if (t)
              if (
                (this.expectToken(R.TokenKind.DOLLAR),
                this._lexer.token.kind === R.TokenKind.NAME)
              ) {
                let n = this._lexer.token.value;
                throw (0, ei.syntaxError)(
                  this._lexer.source,
                  r.start,
                  `Unexpected variable "$${n}" in constant value.`
                );
              } else throw this.unexpected(r);
            return this.parseVariable();
          default:
            throw this.unexpected();
        }
      }
      parseConstValueLiteral() {
        return this.parseValueLiteral(!0);
      }
      parseStringLiteral() {
        let t = this._lexer.token;
        return (
          this._lexer.advance(),
          this.node(t, {
            kind: X.Kind.STRING,
            value: t.value,
            block: t.kind === R.TokenKind.BLOCK_STRING,
          })
        );
      }
      parseList(t) {
        let r = () => this.parseValueLiteral(t);
        return this.node(this._lexer.token, {
          kind: X.Kind.LIST,
          values: this.any(R.TokenKind.BRACKET_L, r, R.TokenKind.BRACKET_R),
        });
      }
      parseObject(t) {
        let r = () => this.parseObjectField(t);
        return this.node(this._lexer.token, {
          kind: X.Kind.OBJECT,
          fields: this.any(R.TokenKind.BRACE_L, r, R.TokenKind.BRACE_R),
        });
      }
      parseObjectField(t) {
        let r = this._lexer.token,
          n = this.parseName();
        return (
          this.expectToken(R.TokenKind.COLON),
          this.node(r, {
            kind: X.Kind.OBJECT_FIELD,
            name: n,
            value: this.parseValueLiteral(t),
          })
        );
      }
      parseDirectives(t) {
        let r = [];
        for (; this.peek(R.TokenKind.AT); ) r.push(this.parseDirective(t));
        return r;
      }
      parseConstDirectives() {
        return this.parseDirectives(!0);
      }
      parseDirective(t) {
        let r = this._lexer.token;
        return (
          this.expectToken(R.TokenKind.AT),
          this.node(r, {
            kind: X.Kind.DIRECTIVE,
            name: this.parseName(),
            arguments: this.parseArguments(t),
          })
        );
      }
      parseTypeReference() {
        let t = this._lexer.token,
          r;
        if (this.expectOptionalToken(R.TokenKind.BRACKET_L)) {
          let n = this.parseTypeReference();
          this.expectToken(R.TokenKind.BRACKET_R),
            (r = this.node(t, { kind: X.Kind.LIST_TYPE, type: n }));
        } else r = this.parseNamedType();
        return this.expectOptionalToken(R.TokenKind.BANG)
          ? this.node(t, { kind: X.Kind.NON_NULL_TYPE, type: r })
          : r;
      }
      parseNamedType() {
        return this.node(this._lexer.token, {
          kind: X.Kind.NAMED_TYPE,
          name: this.parseName(),
        });
      }
      peekDescription() {
        return (
          this.peek(R.TokenKind.STRING) || this.peek(R.TokenKind.BLOCK_STRING)
        );
      }
      parseDescription() {
        if (this.peekDescription()) return this.parseStringLiteral();
      }
      parseSchemaDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("schema");
        let n = this.parseConstDirectives(),
          i = this.many(
            R.TokenKind.BRACE_L,
            this.parseOperationTypeDefinition,
            R.TokenKind.BRACE_R
          );
        return this.node(t, {
          kind: X.Kind.SCHEMA_DEFINITION,
          description: r,
          directives: n,
          operationTypes: i,
        });
      }
      parseOperationTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseOperationType();
        this.expectToken(R.TokenKind.COLON);
        let n = this.parseNamedType();
        return this.node(t, {
          kind: X.Kind.OPERATION_TYPE_DEFINITION,
          operation: r,
          type: n,
        });
      }
      parseScalarTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("scalar");
        let n = this.parseName(),
          i = this.parseConstDirectives();
        return this.node(t, {
          kind: X.Kind.SCALAR_TYPE_DEFINITION,
          description: r,
          name: n,
          directives: i,
        });
      }
      parseObjectTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("type");
        let n = this.parseName(),
          i = this.parseImplementsInterfaces(),
          s = this.parseConstDirectives(),
          a = this.parseFieldsDefinition();
        return this.node(t, {
          kind: X.Kind.OBJECT_TYPE_DEFINITION,
          description: r,
          name: n,
          interfaces: i,
          directives: s,
          fields: a,
        });
      }
      parseImplementsInterfaces() {
        return this.expectOptionalKeyword("implements")
          ? this.delimitedMany(R.TokenKind.AMP, this.parseNamedType)
          : [];
      }
      parseFieldsDefinition() {
        return this.optionalMany(
          R.TokenKind.BRACE_L,
          this.parseFieldDefinition,
          R.TokenKind.BRACE_R
        );
      }
      parseFieldDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription(),
          n = this.parseName(),
          i = this.parseArgumentDefs();
        this.expectToken(R.TokenKind.COLON);
        let s = this.parseTypeReference(),
          a = this.parseConstDirectives();
        return this.node(t, {
          kind: X.Kind.FIELD_DEFINITION,
          description: r,
          name: n,
          arguments: i,
          type: s,
          directives: a,
        });
      }
      parseArgumentDefs() {
        return this.optionalMany(
          R.TokenKind.PAREN_L,
          this.parseInputValueDef,
          R.TokenKind.PAREN_R
        );
      }
      parseInputValueDef() {
        let t = this._lexer.token,
          r = this.parseDescription(),
          n = this.parseName();
        this.expectToken(R.TokenKind.COLON);
        let i = this.parseTypeReference(),
          s;
        this.expectOptionalToken(R.TokenKind.EQUALS) &&
          (s = this.parseConstValueLiteral());
        let a = this.parseConstDirectives();
        return this.node(t, {
          kind: X.Kind.INPUT_VALUE_DEFINITION,
          description: r,
          name: n,
          type: i,
          defaultValue: s,
          directives: a,
        });
      }
      parseInterfaceTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("interface");
        let n = this.parseName(),
          i = this.parseImplementsInterfaces(),
          s = this.parseConstDirectives(),
          a = this.parseFieldsDefinition();
        return this.node(t, {
          kind: X.Kind.INTERFACE_TYPE_DEFINITION,
          description: r,
          name: n,
          interfaces: i,
          directives: s,
          fields: a,
        });
      }
      parseUnionTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("union");
        let n = this.parseName(),
          i = this.parseConstDirectives(),
          s = this.parseUnionMemberTypes();
        return this.node(t, {
          kind: X.Kind.UNION_TYPE_DEFINITION,
          description: r,
          name: n,
          directives: i,
          types: s,
        });
      }
      parseUnionMemberTypes() {
        return this.expectOptionalToken(R.TokenKind.EQUALS)
          ? this.delimitedMany(R.TokenKind.PIPE, this.parseNamedType)
          : [];
      }
      parseEnumTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("enum");
        let n = this.parseName(),
          i = this.parseConstDirectives(),
          s = this.parseEnumValuesDefinition();
        return this.node(t, {
          kind: X.Kind.ENUM_TYPE_DEFINITION,
          description: r,
          name: n,
          directives: i,
          values: s,
        });
      }
      parseEnumValuesDefinition() {
        return this.optionalMany(
          R.TokenKind.BRACE_L,
          this.parseEnumValueDefinition,
          R.TokenKind.BRACE_R
        );
      }
      parseEnumValueDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription(),
          n = this.parseEnumValueName(),
          i = this.parseConstDirectives();
        return this.node(t, {
          kind: X.Kind.ENUM_VALUE_DEFINITION,
          description: r,
          name: n,
          directives: i,
        });
      }
      parseEnumValueName() {
        if (
          this._lexer.token.value === "true" ||
          this._lexer.token.value === "false" ||
          this._lexer.token.value === "null"
        )
          throw (0, ei.syntaxError)(
            this._lexer.source,
            this._lexer.token.start,
            `${La(
              this._lexer.token
            )} is reserved and cannot be used for an enum value.`
          );
        return this.parseName();
      }
      parseInputObjectTypeDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("input");
        let n = this.parseName(),
          i = this.parseConstDirectives(),
          s = this.parseInputFieldsDefinition();
        return this.node(t, {
          kind: X.Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description: r,
          name: n,
          directives: i,
          fields: s,
        });
      }
      parseInputFieldsDefinition() {
        return this.optionalMany(
          R.TokenKind.BRACE_L,
          this.parseInputValueDef,
          R.TokenKind.BRACE_R
        );
      }
      parseTypeSystemExtension() {
        let t = this._lexer.lookahead();
        if (t.kind === R.TokenKind.NAME)
          switch (t.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        throw this.unexpected(t);
      }
      parseSchemaExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("schema");
        let r = this.parseConstDirectives(),
          n = this.optionalMany(
            R.TokenKind.BRACE_L,
            this.parseOperationTypeDefinition,
            R.TokenKind.BRACE_R
          );
        if (r.length === 0 && n.length === 0) throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.SCHEMA_EXTENSION,
          directives: r,
          operationTypes: n,
        });
      }
      parseScalarTypeExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("scalar");
        let r = this.parseName(),
          n = this.parseConstDirectives();
        if (n.length === 0) throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.SCALAR_TYPE_EXTENSION,
          name: r,
          directives: n,
        });
      }
      parseObjectTypeExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("type");
        let r = this.parseName(),
          n = this.parseImplementsInterfaces(),
          i = this.parseConstDirectives(),
          s = this.parseFieldsDefinition();
        if (n.length === 0 && i.length === 0 && s.length === 0)
          throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.OBJECT_TYPE_EXTENSION,
          name: r,
          interfaces: n,
          directives: i,
          fields: s,
        });
      }
      parseInterfaceTypeExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("interface");
        let r = this.parseName(),
          n = this.parseImplementsInterfaces(),
          i = this.parseConstDirectives(),
          s = this.parseFieldsDefinition();
        if (n.length === 0 && i.length === 0 && s.length === 0)
          throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.INTERFACE_TYPE_EXTENSION,
          name: r,
          interfaces: n,
          directives: i,
          fields: s,
        });
      }
      parseUnionTypeExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("union");
        let r = this.parseName(),
          n = this.parseConstDirectives(),
          i = this.parseUnionMemberTypes();
        if (n.length === 0 && i.length === 0) throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.UNION_TYPE_EXTENSION,
          name: r,
          directives: n,
          types: i,
        });
      }
      parseEnumTypeExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("enum");
        let r = this.parseName(),
          n = this.parseConstDirectives(),
          i = this.parseEnumValuesDefinition();
        if (n.length === 0 && i.length === 0) throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.ENUM_TYPE_EXTENSION,
          name: r,
          directives: n,
          values: i,
        });
      }
      parseInputObjectTypeExtension() {
        let t = this._lexer.token;
        this.expectKeyword("extend"), this.expectKeyword("input");
        let r = this.parseName(),
          n = this.parseConstDirectives(),
          i = this.parseInputFieldsDefinition();
        if (n.length === 0 && i.length === 0) throw this.unexpected();
        return this.node(t, {
          kind: X.Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name: r,
          directives: n,
          fields: i,
        });
      }
      parseDirectiveDefinition() {
        let t = this._lexer.token,
          r = this.parseDescription();
        this.expectKeyword("directive"), this.expectToken(R.TokenKind.AT);
        let n = this.parseName(),
          i = this.parseArgumentDefs(),
          s = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        let a = this.parseDirectiveLocations();
        return this.node(t, {
          kind: X.Kind.DIRECTIVE_DEFINITION,
          description: r,
          name: n,
          arguments: i,
          repeatable: s,
          locations: a,
        });
      }
      parseDirectiveLocations() {
        return this.delimitedMany(
          R.TokenKind.PIPE,
          this.parseDirectiveLocation
        );
      }
      parseDirectiveLocation() {
        let t = this._lexer.token,
          r = this.parseName();
        if (Object.prototype.hasOwnProperty.call(Y_.DirectiveLocation, r.value))
          return r;
        throw this.unexpected(t);
      }
      node(t, r) {
        var n;
        return (
          ((n = this._options) === null || n === void 0
            ? void 0
            : n.noLocation) !== !0 &&
            (r.loc = new ss.Location(
              t,
              this._lexer.lastToken,
              this._lexer.source
            )),
          r
        );
      }
      peek(t) {
        return this._lexer.token.kind === t;
      }
      expectToken(t) {
        let r = this._lexer.token;
        if (r.kind === t) return this._lexer.advance(), r;
        throw (0, ei.syntaxError)(
          this._lexer.source,
          r.start,
          `Expected ${Yy(t)}, found ${La(r)}.`
        );
      }
      expectOptionalToken(t) {
        return this._lexer.token.kind === t ? (this._lexer.advance(), !0) : !1;
      }
      expectKeyword(t) {
        let r = this._lexer.token;
        if (r.kind === R.TokenKind.NAME && r.value === t) this._lexer.advance();
        else
          throw (0, ei.syntaxError)(
            this._lexer.source,
            r.start,
            `Expected "${t}", found ${La(r)}.`
          );
      }
      expectOptionalKeyword(t) {
        let r = this._lexer.token;
        return r.kind === R.TokenKind.NAME && r.value === t
          ? (this._lexer.advance(), !0)
          : !1;
      }
      unexpected(t) {
        let r = t != null ? t : this._lexer.token;
        return (0, ei.syntaxError)(
          this._lexer.source,
          r.start,
          `Unexpected ${La(r)}.`
        );
      }
      any(t, r, n) {
        this.expectToken(t);
        let i = [];
        for (; !this.expectOptionalToken(n); ) i.push(r.call(this));
        return i;
      }
      optionalMany(t, r, n) {
        if (this.expectOptionalToken(t)) {
          let i = [];
          do i.push(r.call(this));
          while (!this.expectOptionalToken(n));
          return i;
        }
        return [];
      }
      many(t, r, n) {
        this.expectToken(t);
        let i = [];
        do i.push(r.call(this));
        while (!this.expectOptionalToken(n));
        return i;
      }
      delimitedMany(t, r) {
        this.expectOptionalToken(t);
        let n = [];
        do n.push(r.call(this));
        while (this.expectOptionalToken(t));
        return n;
      }
    };
    Yr.Parser = ti;
    function La(e) {
      let t = e.value;
      return Yy(e.kind) + (t != null ? ` "${t}"` : "");
    }
    function Yy(e) {
      return (0, zy.isPunctuatorTokenKind)(e) ? `"${e}"` : e;
    }
  });
  var Hr = f((ml) => {
    "use strict";
    Object.defineProperty(ml, "__esModule", { value: !0 });
    ml.didYouMean = t0;
    var e0 = 5;
    function t0(e, t) {
      let [r, n] = t ? [e, t] : [void 0, e],
        i = " Did you mean ";
      r && (i += r + " ");
      let s = n.map((u) => `"${u}"`);
      switch (s.length) {
        case 0:
          return "";
        case 1:
          return i + s[0] + "?";
        case 2:
          return i + s[0] + " or " + s[1] + "?";
      }
      let a = s.slice(0, e0),
        o = a.pop();
      return i + a.join(", ") + ", or " + o + "?";
    }
  });
  var Hy = f((gl) => {
    "use strict";
    Object.defineProperty(gl, "__esModule", { value: !0 });
    gl.identityFunc = r0;
    function r0(e) {
      return e;
    }
  });
  var Jr = f((vl) => {
    "use strict";
    Object.defineProperty(vl, "__esModule", { value: !0 });
    vl.keyMap = n0;
    function n0(e, t) {
      let r = Object.create(null);
      for (let n of e) r[t(n)] = n;
      return r;
    }
  });
  var as = f((bl) => {
    "use strict";
    Object.defineProperty(bl, "__esModule", { value: !0 });
    bl.keyValMap = i0;
    function i0(e, t, r) {
      let n = Object.create(null);
      for (let i of e) n[t(i)] = r(i);
      return n;
    }
  });
  var Sl = f((Ol) => {
    "use strict";
    Object.defineProperty(Ol, "__esModule", { value: !0 });
    Ol.mapValue = s0;
    function s0(e, t) {
      let r = Object.create(null);
      for (let n of Object.keys(e)) r[n] = t(e[n], n);
      return r;
    }
  });
  var os = f((_l) => {
    "use strict";
    Object.defineProperty(_l, "__esModule", { value: !0 });
    _l.naturalCompare = a0;
    function a0(e, t) {
      let r = 0,
        n = 0;
      for (; r < e.length && n < t.length; ) {
        let i = e.charCodeAt(r),
          s = t.charCodeAt(n);
        if (Fa(i) && Fa(s)) {
          let a = 0;
          do ++r, (a = a * 10 + i - Tl), (i = e.charCodeAt(r));
          while (Fa(i) && a > 0);
          let o = 0;
          do ++n, (o = o * 10 + s - Tl), (s = t.charCodeAt(n));
          while (Fa(s) && o > 0);
          if (a < o) return -1;
          if (a > o) return 1;
        } else {
          if (i < s) return -1;
          if (i > s) return 1;
          ++r, ++n;
        }
      }
      return e.length - t.length;
    }
    var Tl = 48,
      o0 = 57;
    function Fa(e) {
      return !isNaN(e) && Tl <= e && e <= o0;
    }
  });
  var Xr = f((Al) => {
    "use strict";
    Object.defineProperty(Al, "__esModule", { value: !0 });
    Al.suggestionList = l0;
    var u0 = os();
    function l0(e, t) {
      let r = Object.create(null),
        n = new Jy(e),
        i = Math.floor(e.length * 0.4) + 1;
      for (let s of t) {
        let a = n.measure(s, i);
        a !== void 0 && (r[s] = a);
      }
      return Object.keys(r).sort((s, a) => {
        let o = r[s] - r[a];
        return o !== 0 ? o : (0, u0.naturalCompare)(s, a);
      });
    }
    var Jy = class {
      constructor(t) {
        (this._input = t),
          (this._inputLowerCase = t.toLowerCase()),
          (this._inputArray = Xy(this._inputLowerCase)),
          (this._rows = [
            new Array(t.length + 1).fill(0),
            new Array(t.length + 1).fill(0),
            new Array(t.length + 1).fill(0),
          ]);
      }
      measure(t, r) {
        if (this._input === t) return 0;
        let n = t.toLowerCase();
        if (this._inputLowerCase === n) return 1;
        let i = Xy(n),
          s = this._inputArray;
        if (i.length < s.length) {
          let c = i;
          (i = s), (s = c);
        }
        let a = i.length,
          o = s.length;
        if (a - o > r) return;
        let u = this._rows;
        for (let c = 0; c <= o; c++) u[0][c] = c;
        for (let c = 1; c <= a; c++) {
          let d = u[(c - 1) % 3],
            p = u[c % 3],
            m = (p[0] = c);
          for (let v = 1; v <= o; v++) {
            let E = i[c - 1] === s[v - 1] ? 0 : 1,
              L = Math.min(d[v] + 1, p[v - 1] + 1, d[v - 1] + E);
            if (
              c > 1 &&
              v > 1 &&
              i[c - 1] === s[v - 2] &&
              i[c - 2] === s[v - 1]
            ) {
              let C = u[(c - 2) % 3][v - 2];
              L = Math.min(L, C + 1);
            }
            L < m && (m = L), (p[v] = L);
          }
          if (m > r) return;
        }
        let l = u[a % 3][o];
        return l <= r ? l : void 0;
      }
    };
    function Xy(e) {
      let t = e.length,
        r = new Array(t);
      for (let n = 0; n < t; ++n) r[n] = e.charCodeAt(n);
      return r;
    }
  });
  var qa = f((El) => {
    "use strict";
    Object.defineProperty(El, "__esModule", { value: !0 });
    El.toObjMap = c0;
    function c0(e) {
      if (e == null) return Object.create(null);
      if (Object.getPrototypeOf(e) === null) return e;
      let t = Object.create(null);
      for (let [r, n] of Object.entries(e)) t[r] = n;
      return t;
    }
  });
  var Zy = f((Nl) => {
    "use strict";
    Object.defineProperty(Nl, "__esModule", { value: !0 });
    Nl.printString = p0;
    function p0(e) {
      return `"${e.replace(d0, f0)}"`;
    }
    var d0 = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    function f0(e) {
      return y0[e.charCodeAt(0)];
    }
    var y0 = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F",
    ];
  });
  var bn = f((Zr) => {
    "use strict";
    Object.defineProperty(Zr, "__esModule", { value: !0 });
    Zr.BREAK = void 0;
    Zr.getEnterLeaveForKind = Ma;
    Zr.getVisitFn = b0;
    Zr.visit = g0;
    Zr.visitInParallel = v0;
    var h0 = Tt(),
      m0 = he(),
      Il = vr(),
      eh = ue(),
      ni = Object.freeze({});
    Zr.BREAK = ni;
    function g0(e, t, r = Il.QueryDocumentKeys) {
      let n = new Map();
      for (let C of Object.values(eh.Kind)) n.set(C, Ma(t, C));
      let i,
        s = Array.isArray(e),
        a = [e],
        o = -1,
        u = [],
        l = e,
        c,
        d,
        p = [],
        m = [];
      do {
        o++;
        let C = o === a.length,
          H = C && u.length !== 0;
        if (C) {
          if (
            ((c = m.length === 0 ? void 0 : p[p.length - 1]),
            (l = d),
            (d = m.pop()),
            H)
          )
            if (s) {
              l = l.slice();
              let S = 0;
              for (let [$, k] of u) {
                let M = $ - S;
                k === null ? (l.splice(M, 1), S++) : (l[M] = k);
              }
            } else {
              l = Object.defineProperties(
                {},
                Object.getOwnPropertyDescriptors(l)
              );
              for (let [S, $] of u) l[S] = $;
            }
          (o = i.index),
            (a = i.keys),
            (u = i.edits),
            (s = i.inArray),
            (i = i.prev);
        } else if (d) {
          if (((c = s ? o : a[o]), (l = d[c]), l == null)) continue;
          p.push(c);
        }
        let B;
        if (!Array.isArray(l)) {
          var v, E;
          (0, Il.isNode)(l) ||
            (0, h0.devAssert)(!1, `Invalid AST Node: ${(0, m0.inspect)(l)}.`);
          let S = C
            ? (v = n.get(l.kind)) === null || v === void 0
              ? void 0
              : v.leave
            : (E = n.get(l.kind)) === null || E === void 0
            ? void 0
            : E.enter;
          if (((B = S == null ? void 0 : S.call(t, l, c, d, p, m)), B === ni))
            break;
          if (B === !1) {
            if (!C) {
              p.pop();
              continue;
            }
          } else if (B !== void 0 && (u.push([c, B]), !C))
            if ((0, Il.isNode)(B)) l = B;
            else {
              p.pop();
              continue;
            }
        }
        if ((B === void 0 && H && u.push([c, l]), C)) p.pop();
        else {
          var L;
          (i = { inArray: s, index: o, keys: a, edits: u, prev: i }),
            (s = Array.isArray(l)),
            (a = s ? l : (L = r[l.kind]) !== null && L !== void 0 ? L : []),
            (o = -1),
            (u = []),
            d && m.push(d),
            (d = l);
        }
      } while (i !== void 0);
      return u.length !== 0 ? u[u.length - 1][1] : e;
    }
    function v0(e) {
      let t = new Array(e.length).fill(null),
        r = Object.create(null);
      for (let n of Object.values(eh.Kind)) {
        let i = !1,
          s = new Array(e.length).fill(void 0),
          a = new Array(e.length).fill(void 0);
        for (let u = 0; u < e.length; ++u) {
          let { enter: l, leave: c } = Ma(e[u], n);
          i || (i = l != null || c != null), (s[u] = l), (a[u] = c);
        }
        if (!i) continue;
        let o = {
          enter(...u) {
            let l = u[0];
            for (let d = 0; d < e.length; d++)
              if (t[d] === null) {
                var c;
                let p =
                  (c = s[d]) === null || c === void 0
                    ? void 0
                    : c.apply(e[d], u);
                if (p === !1) t[d] = l;
                else if (p === ni) t[d] = ni;
                else if (p !== void 0) return p;
              }
          },
          leave(...u) {
            let l = u[0];
            for (let d = 0; d < e.length; d++)
              if (t[d] === null) {
                var c;
                let p =
                  (c = a[d]) === null || c === void 0
                    ? void 0
                    : c.apply(e[d], u);
                if (p === ni) t[d] = ni;
                else if (p !== void 0 && p !== !1) return p;
              } else t[d] === l && (t[d] = null);
          },
        };
        r[n] = o;
      }
      return r;
    }
    function Ma(e, t) {
      let r = e[t];
      return typeof r == "object"
        ? r
        : typeof r == "function"
        ? { enter: r, leave: void 0 }
        : { enter: e.enter, leave: e.leave };
    }
    function b0(e, t, r) {
      let { enter: n, leave: i } = Ma(e, t);
      return r ? i : n;
    }
  });
  var kt = f((jl) => {
    "use strict";
    Object.defineProperty(jl, "__esModule", { value: !0 });
    jl.print = _0;
    var O0 = Xi(),
      S0 = Zy(),
      T0 = bn();
    function _0(e) {
      return (0, T0.visit)(e, E0);
    }
    var A0 = 80,
      E0 = {
        Name: { leave: (e) => e.value },
        Variable: { leave: (e) => "$" + e.name },
        Document: {
          leave: (e) =>
            G(
              e.definitions,
              `

`
            ),
        },
        OperationDefinition: {
          leave(e) {
            let t = se("(", G(e.variableDefinitions, ", "), ")"),
              r = G([e.operation, G([e.name, t]), G(e.directives, " ")], " ");
            return (r === "query" ? "" : r + " ") + e.selectionSet;
          },
        },
        VariableDefinition: {
          leave: ({ variable: e, type: t, defaultValue: r, directives: n }) =>
            e + ": " + t + se(" = ", r) + se(" ", G(n, " ")),
        },
        SelectionSet: { leave: ({ selections: e }) => or(e) },
        Field: {
          leave({
            alias: e,
            name: t,
            arguments: r,
            directives: n,
            selectionSet: i,
          }) {
            let s = se("", e, ": ") + t,
              a = s + se("(", G(r, ", "), ")");
            return (
              a.length > A0 &&
                (a =
                  s +
                  se(
                    `(
`,
                    xa(
                      G(
                        r,
                        `
`
                      )
                    ),
                    `
)`
                  )),
              G([a, G(n, " "), i], " ")
            );
          },
        },
        Argument: { leave: ({ name: e, value: t }) => e + ": " + t },
        FragmentSpread: {
          leave: ({ name: e, directives: t }) => "..." + e + se(" ", G(t, " ")),
        },
        InlineFragment: {
          leave: ({ typeCondition: e, directives: t, selectionSet: r }) =>
            G(["...", se("on ", e), G(t, " "), r], " "),
        },
        FragmentDefinition: {
          leave: ({
            name: e,
            typeCondition: t,
            variableDefinitions: r,
            directives: n,
            selectionSet: i,
          }) =>
            `fragment ${e}${se("(", G(r, ", "), ")")} on ${t} ${se(
              "",
              G(n, " "),
              " "
            )}` + i,
        },
        IntValue: { leave: ({ value: e }) => e },
        FloatValue: { leave: ({ value: e }) => e },
        StringValue: {
          leave: ({ value: e, block: t }) =>
            t ? (0, O0.printBlockString)(e) : (0, S0.printString)(e),
        },
        BooleanValue: { leave: ({ value: e }) => (e ? "true" : "false") },
        NullValue: { leave: () => "null" },
        EnumValue: { leave: ({ value: e }) => e },
        ListValue: { leave: ({ values: e }) => "[" + G(e, ", ") + "]" },
        ObjectValue: { leave: ({ fields: e }) => "{" + G(e, ", ") + "}" },
        ObjectField: { leave: ({ name: e, value: t }) => e + ": " + t },
        Directive: {
          leave: ({ name: e, arguments: t }) =>
            "@" + e + se("(", G(t, ", "), ")"),
        },
        NamedType: { leave: ({ name: e }) => e },
        ListType: { leave: ({ type: e }) => "[" + e + "]" },
        NonNullType: { leave: ({ type: e }) => e + "!" },
        SchemaDefinition: {
          leave: ({ description: e, directives: t, operationTypes: r }) =>
            se(
              "",
              e,
              `
`
            ) + G(["schema", G(t, " "), or(r)], " "),
        },
        OperationTypeDefinition: {
          leave: ({ operation: e, type: t }) => e + ": " + t,
        },
        ScalarTypeDefinition: {
          leave: ({ description: e, name: t, directives: r }) =>
            se(
              "",
              e,
              `
`
            ) + G(["scalar", t, G(r, " ")], " "),
        },
        ObjectTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            interfaces: r,
            directives: n,
            fields: i,
          }) =>
            se(
              "",
              e,
              `
`
            ) +
            G(
              ["type", t, se("implements ", G(r, " & ")), G(n, " "), or(i)],
              " "
            ),
        },
        FieldDefinition: {
          leave: ({
            description: e,
            name: t,
            arguments: r,
            type: n,
            directives: i,
          }) =>
            se(
              "",
              e,
              `
`
            ) +
            t +
            (th(r)
              ? se(
                  `(
`,
                  xa(
                    G(
                      r,
                      `
`
                    )
                  ),
                  `
)`
                )
              : se("(", G(r, ", "), ")")) +
            ": " +
            n +
            se(" ", G(i, " ")),
        },
        InputValueDefinition: {
          leave: ({
            description: e,
            name: t,
            type: r,
            defaultValue: n,
            directives: i,
          }) =>
            se(
              "",
              e,
              `
`
            ) + G([t + ": " + r, se("= ", n), G(i, " ")], " "),
        },
        InterfaceTypeDefinition: {
          leave: ({
            description: e,
            name: t,
            interfaces: r,
            directives: n,
            fields: i,
          }) =>
            se(
              "",
              e,
              `
`
            ) +
            G(
              [
                "interface",
                t,
                se("implements ", G(r, " & ")),
                G(n, " "),
                or(i),
              ],
              " "
            ),
        },
        UnionTypeDefinition: {
          leave: ({ description: e, name: t, directives: r, types: n }) =>
            se(
              "",
              e,
              `
`
            ) + G(["union", t, G(r, " "), se("= ", G(n, " | "))], " "),
        },
        EnumTypeDefinition: {
          leave: ({ description: e, name: t, directives: r, values: n }) =>
            se(
              "",
              e,
              `
`
            ) + G(["enum", t, G(r, " "), or(n)], " "),
        },
        EnumValueDefinition: {
          leave: ({ description: e, name: t, directives: r }) =>
            se(
              "",
              e,
              `
`
            ) + G([t, G(r, " ")], " "),
        },
        InputObjectTypeDefinition: {
          leave: ({ description: e, name: t, directives: r, fields: n }) =>
            se(
              "",
              e,
              `
`
            ) + G(["input", t, G(r, " "), or(n)], " "),
        },
        DirectiveDefinition: {
          leave: ({
            description: e,
            name: t,
            arguments: r,
            repeatable: n,
            locations: i,
          }) =>
            se(
              "",
              e,
              `
`
            ) +
            "directive @" +
            t +
            (th(r)
              ? se(
                  `(
`,
                  xa(
                    G(
                      r,
                      `
`
                    )
                  ),
                  `
)`
                )
              : se("(", G(r, ", "), ")")) +
            (n ? " repeatable" : "") +
            " on " +
            G(i, " | "),
        },
        SchemaExtension: {
          leave: ({ directives: e, operationTypes: t }) =>
            G(["extend schema", G(e, " "), or(t)], " "),
        },
        ScalarTypeExtension: {
          leave: ({ name: e, directives: t }) =>
            G(["extend scalar", e, G(t, " ")], " "),
        },
        ObjectTypeExtension: {
          leave: ({ name: e, interfaces: t, directives: r, fields: n }) =>
            G(
              [
                "extend type",
                e,
                se("implements ", G(t, " & ")),
                G(r, " "),
                or(n),
              ],
              " "
            ),
        },
        InterfaceTypeExtension: {
          leave: ({ name: e, interfaces: t, directives: r, fields: n }) =>
            G(
              [
                "extend interface",
                e,
                se("implements ", G(t, " & ")),
                G(r, " "),
                or(n),
              ],
              " "
            ),
        },
        UnionTypeExtension: {
          leave: ({ name: e, directives: t, types: r }) =>
            G(["extend union", e, G(t, " "), se("= ", G(r, " | "))], " "),
        },
        EnumTypeExtension: {
          leave: ({ name: e, directives: t, values: r }) =>
            G(["extend enum", e, G(t, " "), or(r)], " "),
        },
        InputObjectTypeExtension: {
          leave: ({ name: e, directives: t, fields: r }) =>
            G(["extend input", e, G(t, " "), or(r)], " "),
        },
      };
    function G(e, t = "") {
      var r;
      return (r = e == null ? void 0 : e.filter((n) => n).join(t)) !== null &&
        r !== void 0
        ? r
        : "";
    }
    function or(e) {
      return se(
        `{
`,
        xa(
          G(
            e,
            `
`
          )
        ),
        `
}`
      );
    }
    function se(e, t, r = "") {
      return t != null && t !== "" ? e + t + r : "";
    }
    function xa(e) {
      return se(
        "  ",
        e.replace(
          /\n/g,
          `
  `
        )
      );
    }
    function th(e) {
      var t;
      return (t =
        e == null
          ? void 0
          : e.some((r) =>
              r.includes(`
`)
            )) !== null && t !== void 0
        ? t
        : !1;
    }
  });
  var Dl = f((wl) => {
    "use strict";
    Object.defineProperty(wl, "__esModule", { value: !0 });
    wl.valueFromASTUntyped = Pl;
    var N0 = as(),
      Lr = ue();
    function Pl(e, t) {
      switch (e.kind) {
        case Lr.Kind.NULL:
          return null;
        case Lr.Kind.INT:
          return parseInt(e.value, 10);
        case Lr.Kind.FLOAT:
          return parseFloat(e.value);
        case Lr.Kind.STRING:
        case Lr.Kind.ENUM:
        case Lr.Kind.BOOLEAN:
          return e.value;
        case Lr.Kind.LIST:
          return e.values.map((r) => Pl(r, t));
        case Lr.Kind.OBJECT:
          return (0, N0.keyValMap)(
            e.fields,
            (r) => r.name.value,
            (r) => Pl(r.value, t)
          );
        case Lr.Kind.VARIABLE:
          return t == null ? void 0 : t[e.name.value];
      }
    }
  });
  var us = f((ka) => {
    "use strict";
    Object.defineProperty(ka, "__esModule", { value: !0 });
    ka.assertEnumValueName = I0;
    ka.assertName = ih;
    var rh = Tt(),
      Ca = W(),
      nh = Ia();
    function ih(e) {
      if (
        (e != null || (0, rh.devAssert)(!1, "Must provide name."),
        typeof e == "string" ||
          (0, rh.devAssert)(!1, "Expected name to be a string."),
        e.length === 0)
      )
        throw new Ca.GraphQLError("Expected name to be a non-empty string.");
      for (let t = 1; t < e.length; ++t)
        if (!(0, nh.isNameContinue)(e.charCodeAt(t)))
          throw new Ca.GraphQLError(
            `Names must only contain [_a-zA-Z0-9] but "${e}" does not.`
          );
      if (!(0, nh.isNameStart)(e.charCodeAt(0)))
        throw new Ca.GraphQLError(
          `Names must start with [_a-zA-Z] but "${e}" does not.`
        );
      return e;
    }
    function I0(e) {
      if (e === "true" || e === "false" || e === "null")
        throw new Ca.GraphQLError(`Enum values cannot be named: ${e}`);
      return ih(e);
    }
  });
  var ae = f((V) => {
    "use strict";
    Object.defineProperty(V, "__esModule", { value: !0 });
    V.GraphQLUnionType =
      V.GraphQLScalarType =
      V.GraphQLObjectType =
      V.GraphQLNonNull =
      V.GraphQLList =
      V.GraphQLInterfaceType =
      V.GraphQLInputObjectType =
      V.GraphQLEnumType =
        void 0;
    V.argsToArgsConfig = mh;
    V.assertAbstractType = z0;
    V.assertCompositeType = B0;
    V.assertEnumType = k0;
    V.assertInputObjectType = G0;
    V.assertInputType = V0;
    V.assertInterfaceType = x0;
    V.assertLeafType = $0;
    V.assertListType = Q0;
    V.assertNamedType = J0;
    V.assertNonNullType = U0;
    V.assertNullableType = Y0;
    V.assertObjectType = M0;
    V.assertOutputType = K0;
    V.assertScalarType = q0;
    V.assertType = F0;
    V.assertUnionType = C0;
    V.assertWrappingType = W0;
    V.defineArguments = yh;
    V.getNamedType = X0;
    V.getNullableType = H0;
    V.isAbstractType = ch;
    V.isCompositeType = lh;
    V.isEnumType = _n;
    V.isInputObjectType = cs;
    V.isInputType = Rl;
    V.isInterfaceType = Sn;
    V.isLeafType = uh;
    V.isListType = Ua;
    V.isNamedType = ph;
    V.isNonNullType = tn;
    V.isNullableType = Ml;
    V.isObjectType = ii;
    V.isOutputType = Ll;
    V.isRequiredArgument = Z0;
    V.isRequiredInputField = nA;
    V.isScalarType = On;
    V.isType = Qa;
    V.isUnionType = Tn;
    V.isWrappingType = ps;
    V.resolveObjMapThunk = Cl;
    V.resolveReadonlyArrayThunk = xl;
    var Ze = Tt(),
      j0 = Hr(),
      sh = Hy(),
      Oe = he(),
      en = ns(),
      P0 = gr(),
      w0 = Jr(),
      ah = as(),
      Ga = Sl(),
      D0 = Xr(),
      br = qa(),
      ls = W(),
      R0 = ue(),
      oh = kt(),
      L0 = Dl(),
      Or = us();
    function Qa(e) {
      return (
        On(e) || ii(e) || Sn(e) || Tn(e) || _n(e) || cs(e) || Ua(e) || tn(e)
      );
    }
    function F0(e) {
      if (!Qa(e))
        throw new Error(`Expected ${(0, Oe.inspect)(e)} to be a GraphQL type.`);
      return e;
    }
    function On(e) {
      return (0, en.instanceOf)(e, kl);
    }
    function q0(e) {
      if (!On(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Scalar type.`
        );
      return e;
    }
    function ii(e) {
      return (0, en.instanceOf)(e, Gl);
    }
    function M0(e) {
      if (!ii(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Object type.`
        );
      return e;
    }
    function Sn(e) {
      return (0, en.instanceOf)(e, Ql);
    }
    function x0(e) {
      if (!Sn(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Interface type.`
        );
      return e;
    }
    function Tn(e) {
      return (0, en.instanceOf)(e, Ul);
    }
    function C0(e) {
      if (!Tn(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Union type.`
        );
      return e;
    }
    function _n(e) {
      return (0, en.instanceOf)(e, Vl);
    }
    function k0(e) {
      if (!_n(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Enum type.`
        );
      return e;
    }
    function cs(e) {
      return (0, en.instanceOf)(e, Kl);
    }
    function G0(e) {
      if (!cs(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Input Object type.`
        );
      return e;
    }
    function Ua(e) {
      return (0, en.instanceOf)(e, Fl);
    }
    function Q0(e) {
      if (!Ua(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL List type.`
        );
      return e;
    }
    function tn(e) {
      return (0, en.instanceOf)(e, ql);
    }
    function U0(e) {
      if (!tn(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL Non-Null type.`
        );
      return e;
    }
    function Rl(e) {
      return On(e) || _n(e) || cs(e) || (ps(e) && Rl(e.ofType));
    }
    function V0(e) {
      if (!Rl(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL input type.`
        );
      return e;
    }
    function Ll(e) {
      return (
        On(e) || ii(e) || Sn(e) || Tn(e) || _n(e) || (ps(e) && Ll(e.ofType))
      );
    }
    function K0(e) {
      if (!Ll(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL output type.`
        );
      return e;
    }
    function uh(e) {
      return On(e) || _n(e);
    }
    function $0(e) {
      if (!uh(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL leaf type.`
        );
      return e;
    }
    function lh(e) {
      return ii(e) || Sn(e) || Tn(e);
    }
    function B0(e) {
      if (!lh(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL composite type.`
        );
      return e;
    }
    function ch(e) {
      return Sn(e) || Tn(e);
    }
    function z0(e) {
      if (!ch(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL abstract type.`
        );
      return e;
    }
    var Fl = class {
      constructor(t) {
        Qa(t) ||
          (0, Ze.devAssert)(
            !1,
            `Expected ${(0, Oe.inspect)(t)} to be a GraphQL type.`
          ),
          (this.ofType = t);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLList";
      }
      toString() {
        return "[" + String(this.ofType) + "]";
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLList = Fl;
    var ql = class {
      constructor(t) {
        Ml(t) ||
          (0, Ze.devAssert)(
            !1,
            `Expected ${(0, Oe.inspect)(t)} to be a GraphQL nullable type.`
          ),
          (this.ofType = t);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLNonNull";
      }
      toString() {
        return String(this.ofType) + "!";
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLNonNull = ql;
    function ps(e) {
      return Ua(e) || tn(e);
    }
    function W0(e) {
      if (!ps(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL wrapping type.`
        );
      return e;
    }
    function Ml(e) {
      return Qa(e) && !tn(e);
    }
    function Y0(e) {
      if (!Ml(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL nullable type.`
        );
      return e;
    }
    function H0(e) {
      if (e) return tn(e) ? e.ofType : e;
    }
    function ph(e) {
      return On(e) || ii(e) || Sn(e) || Tn(e) || _n(e) || cs(e);
    }
    function J0(e) {
      if (!ph(e))
        throw new Error(
          `Expected ${(0, Oe.inspect)(e)} to be a GraphQL named type.`
        );
      return e;
    }
    function X0(e) {
      if (e) {
        let t = e;
        for (; ps(t); ) t = t.ofType;
        return t;
      }
    }
    function xl(e) {
      return typeof e == "function" ? e() : e;
    }
    function Cl(e) {
      return typeof e == "function" ? e() : e;
    }
    var kl = class {
      constructor(t) {
        var r, n, i, s;
        let a =
          (r = t.parseValue) !== null && r !== void 0 ? r : sh.identityFunc;
        (this.name = (0, Or.assertName)(t.name)),
          (this.description = t.description),
          (this.specifiedByURL = t.specifiedByURL),
          (this.serialize =
            (n = t.serialize) !== null && n !== void 0 ? n : sh.identityFunc),
          (this.parseValue = a),
          (this.parseLiteral =
            (i = t.parseLiteral) !== null && i !== void 0
              ? i
              : (o, u) => a((0, L0.valueFromASTUntyped)(o, u))),
          (this.extensions = (0, br.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (s = t.extensionASTNodes) !== null && s !== void 0 ? s : []),
          t.specifiedByURL == null ||
            typeof t.specifiedByURL == "string" ||
            (0, Ze.devAssert)(
              !1,
              `${
                this.name
              } must provide "specifiedByURL" as a string, but got: ${(0,
              Oe.inspect)(t.specifiedByURL)}.`
            ),
          t.serialize == null ||
            typeof t.serialize == "function" ||
            (0, Ze.devAssert)(
              !1,
              `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`
            ),
          t.parseLiteral &&
            ((typeof t.parseValue == "function" &&
              typeof t.parseLiteral == "function") ||
              (0, Ze.devAssert)(
                !1,
                `${this.name} must provide both "parseValue" and "parseLiteral" functions.`
              ));
      }
      get [Symbol.toStringTag]() {
        return "GraphQLScalarType";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          specifiedByURL: this.specifiedByURL,
          serialize: this.serialize,
          parseValue: this.parseValue,
          parseLiteral: this.parseLiteral,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLScalarType = kl;
    var Gl = class {
      constructor(t) {
        var r;
        (this.name = (0, Or.assertName)(t.name)),
          (this.description = t.description),
          (this.isTypeOf = t.isTypeOf),
          (this.extensions = (0, br.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (r = t.extensionASTNodes) !== null && r !== void 0 ? r : []),
          (this._fields = () => fh(t)),
          (this._interfaces = () => dh(t)),
          t.isTypeOf == null ||
            typeof t.isTypeOf == "function" ||
            (0, Ze.devAssert)(
              !1,
              `${
                this.name
              } must provide "isTypeOf" as a function, but got: ${(0,
              Oe.inspect)(t.isTypeOf)}.`
            );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLObjectType";
      }
      getFields() {
        return (
          typeof this._fields == "function" && (this._fields = this._fields()),
          this._fields
        );
      }
      getInterfaces() {
        return (
          typeof this._interfaces == "function" &&
            (this._interfaces = this._interfaces()),
          this._interfaces
        );
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: hh(this.getFields()),
          isTypeOf: this.isTypeOf,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLObjectType = Gl;
    function dh(e) {
      var t;
      let r = xl((t = e.interfaces) !== null && t !== void 0 ? t : []);
      return (
        Array.isArray(r) ||
          (0, Ze.devAssert)(
            !1,
            `${e.name} interfaces must be an Array or a function which returns an Array.`
          ),
        r
      );
    }
    function fh(e) {
      let t = Cl(e.fields);
      return (
        si(t) ||
          (0, Ze.devAssert)(
            !1,
            `${e.name} fields must be an object with field names as keys or a function which returns such an object.`
          ),
        (0, Ga.mapValue)(t, (r, n) => {
          var i;
          si(r) ||
            (0, Ze.devAssert)(
              !1,
              `${e.name}.${n} field config must be an object.`
            ),
            r.resolve == null ||
              typeof r.resolve == "function" ||
              (0, Ze.devAssert)(
                !1,
                `${
                  e.name
                }.${n} field resolver must be a function if provided, but got: ${(0,
                Oe.inspect)(r.resolve)}.`
              );
          let s = (i = r.args) !== null && i !== void 0 ? i : {};
          return (
            si(s) ||
              (0, Ze.devAssert)(
                !1,
                `${e.name}.${n} args must be an object with argument names as keys.`
              ),
            {
              name: (0, Or.assertName)(n),
              description: r.description,
              type: r.type,
              args: yh(s),
              resolve: r.resolve,
              subscribe: r.subscribe,
              deprecationReason: r.deprecationReason,
              extensions: (0, br.toObjMap)(r.extensions),
              astNode: r.astNode,
            }
          );
        })
      );
    }
    function yh(e) {
      return Object.entries(e).map(([t, r]) => ({
        name: (0, Or.assertName)(t),
        description: r.description,
        type: r.type,
        defaultValue: r.defaultValue,
        deprecationReason: r.deprecationReason,
        extensions: (0, br.toObjMap)(r.extensions),
        astNode: r.astNode,
      }));
    }
    function si(e) {
      return (0, P0.isObjectLike)(e) && !Array.isArray(e);
    }
    function hh(e) {
      return (0, Ga.mapValue)(e, (t) => ({
        description: t.description,
        type: t.type,
        args: mh(t.args),
        resolve: t.resolve,
        subscribe: t.subscribe,
        deprecationReason: t.deprecationReason,
        extensions: t.extensions,
        astNode: t.astNode,
      }));
    }
    function mh(e) {
      return (0, ah.keyValMap)(
        e,
        (t) => t.name,
        (t) => ({
          description: t.description,
          type: t.type,
          defaultValue: t.defaultValue,
          deprecationReason: t.deprecationReason,
          extensions: t.extensions,
          astNode: t.astNode,
        })
      );
    }
    function Z0(e) {
      return tn(e.type) && e.defaultValue === void 0;
    }
    var Ql = class {
      constructor(t) {
        var r;
        (this.name = (0, Or.assertName)(t.name)),
          (this.description = t.description),
          (this.resolveType = t.resolveType),
          (this.extensions = (0, br.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (r = t.extensionASTNodes) !== null && r !== void 0 ? r : []),
          (this._fields = fh.bind(void 0, t)),
          (this._interfaces = dh.bind(void 0, t)),
          t.resolveType == null ||
            typeof t.resolveType == "function" ||
            (0, Ze.devAssert)(
              !1,
              `${
                this.name
              } must provide "resolveType" as a function, but got: ${(0,
              Oe.inspect)(t.resolveType)}.`
            );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInterfaceType";
      }
      getFields() {
        return (
          typeof this._fields == "function" && (this._fields = this._fields()),
          this._fields
        );
      }
      getInterfaces() {
        return (
          typeof this._interfaces == "function" &&
            (this._interfaces = this._interfaces()),
          this._interfaces
        );
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: hh(this.getFields()),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLInterfaceType = Ql;
    var Ul = class {
      constructor(t) {
        var r;
        (this.name = (0, Or.assertName)(t.name)),
          (this.description = t.description),
          (this.resolveType = t.resolveType),
          (this.extensions = (0, br.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (r = t.extensionASTNodes) !== null && r !== void 0 ? r : []),
          (this._types = eA.bind(void 0, t)),
          t.resolveType == null ||
            typeof t.resolveType == "function" ||
            (0, Ze.devAssert)(
              !1,
              `${
                this.name
              } must provide "resolveType" as a function, but got: ${(0,
              Oe.inspect)(t.resolveType)}.`
            );
      }
      get [Symbol.toStringTag]() {
        return "GraphQLUnionType";
      }
      getTypes() {
        return (
          typeof this._types == "function" && (this._types = this._types()),
          this._types
        );
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          types: this.getTypes(),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLUnionType = Ul;
    function eA(e) {
      let t = xl(e.types);
      return (
        Array.isArray(t) ||
          (0, Ze.devAssert)(
            !1,
            `Must provide Array of types or a function which returns such an array for Union ${e.name}.`
          ),
        t
      );
    }
    var Vl = class {
      constructor(t) {
        var r;
        (this.name = (0, Or.assertName)(t.name)),
          (this.description = t.description),
          (this.extensions = (0, br.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (r = t.extensionASTNodes) !== null && r !== void 0 ? r : []),
          (this._values = tA(this.name, t.values)),
          (this._valueLookup = new Map(this._values.map((n) => [n.value, n]))),
          (this._nameLookup = (0, w0.keyMap)(this._values, (n) => n.name));
      }
      get [Symbol.toStringTag]() {
        return "GraphQLEnumType";
      }
      getValues() {
        return this._values;
      }
      getValue(t) {
        return this._nameLookup[t];
      }
      serialize(t) {
        let r = this._valueLookup.get(t);
        if (r === void 0)
          throw new ls.GraphQLError(
            `Enum "${this.name}" cannot represent value: ${(0, Oe.inspect)(t)}`
          );
        return r.name;
      }
      parseValue(t) {
        if (typeof t != "string") {
          let n = (0, Oe.inspect)(t);
          throw new ls.GraphQLError(
            `Enum "${this.name}" cannot represent non-string value: ${n}.` +
              Va(this, n)
          );
        }
        let r = this.getValue(t);
        if (r == null)
          throw new ls.GraphQLError(
            `Value "${t}" does not exist in "${this.name}" enum.` + Va(this, t)
          );
        return r.value;
      }
      parseLiteral(t, r) {
        if (t.kind !== R0.Kind.ENUM) {
          let i = (0, oh.print)(t);
          throw new ls.GraphQLError(
            `Enum "${this.name}" cannot represent non-enum value: ${i}.` +
              Va(this, i),
            { nodes: t }
          );
        }
        let n = this.getValue(t.value);
        if (n == null) {
          let i = (0, oh.print)(t);
          throw new ls.GraphQLError(
            `Value "${i}" does not exist in "${this.name}" enum.` + Va(this, i),
            { nodes: t }
          );
        }
        return n.value;
      }
      toConfig() {
        let t = (0, ah.keyValMap)(
          this.getValues(),
          (r) => r.name,
          (r) => ({
            description: r.description,
            value: r.value,
            deprecationReason: r.deprecationReason,
            extensions: r.extensions,
            astNode: r.astNode,
          })
        );
        return {
          name: this.name,
          description: this.description,
          values: t,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLEnumType = Vl;
    function Va(e, t) {
      let r = e.getValues().map((i) => i.name),
        n = (0, D0.suggestionList)(t, r);
      return (0, j0.didYouMean)("the enum value", n);
    }
    function tA(e, t) {
      return (
        si(t) ||
          (0, Ze.devAssert)(
            !1,
            `${e} values must be an object with value names as keys.`
          ),
        Object.entries(t).map(
          ([r, n]) => (
            si(n) ||
              (0, Ze.devAssert)(
                !1,
                `${e}.${r} must refer to an object with a "value" key representing an internal value but got: ${(0,
                Oe.inspect)(n)}.`
              ),
            {
              name: (0, Or.assertEnumValueName)(r),
              description: n.description,
              value: n.value !== void 0 ? n.value : r,
              deprecationReason: n.deprecationReason,
              extensions: (0, br.toObjMap)(n.extensions),
              astNode: n.astNode,
            }
          )
        )
      );
    }
    var Kl = class {
      constructor(t) {
        var r;
        (this.name = (0, Or.assertName)(t.name)),
          (this.description = t.description),
          (this.extensions = (0, br.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (r = t.extensionASTNodes) !== null && r !== void 0 ? r : []),
          (this._fields = rA.bind(void 0, t));
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInputObjectType";
      }
      getFields() {
        return (
          typeof this._fields == "function" && (this._fields = this._fields()),
          this._fields
        );
      }
      toConfig() {
        let t = (0, Ga.mapValue)(this.getFields(), (r) => ({
          description: r.description,
          type: r.type,
          defaultValue: r.defaultValue,
          deprecationReason: r.deprecationReason,
          extensions: r.extensions,
          astNode: r.astNode,
        }));
        return {
          name: this.name,
          description: this.description,
          fields: t,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    V.GraphQLInputObjectType = Kl;
    function rA(e) {
      let t = Cl(e.fields);
      return (
        si(t) ||
          (0, Ze.devAssert)(
            !1,
            `${e.name} fields must be an object with field names as keys or a function which returns such an object.`
          ),
        (0, Ga.mapValue)(
          t,
          (r, n) => (
            !("resolve" in r) ||
              (0, Ze.devAssert)(
                !1,
                `${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`
              ),
            {
              name: (0, Or.assertName)(n),
              description: r.description,
              type: r.type,
              defaultValue: r.defaultValue,
              deprecationReason: r.deprecationReason,
              extensions: (0, br.toObjMap)(r.extensions),
              astNode: r.astNode,
            }
          )
        )
      );
    }
    function nA(e) {
      return tn(e.type) && e.defaultValue === void 0;
    }
  });
  var fs = f((ds) => {
    "use strict";
    Object.defineProperty(ds, "__esModule", { value: !0 });
    ds.doTypesOverlap = iA;
    ds.isEqualType = $l;
    ds.isTypeSubTypeOf = Ka;
    var pt = ae();
    function $l(e, t) {
      return e === t
        ? !0
        : ((0, pt.isNonNullType)(e) && (0, pt.isNonNullType)(t)) ||
          ((0, pt.isListType)(e) && (0, pt.isListType)(t))
        ? $l(e.ofType, t.ofType)
        : !1;
    }
    function Ka(e, t, r) {
      return t === r
        ? !0
        : (0, pt.isNonNullType)(r)
        ? (0, pt.isNonNullType)(t)
          ? Ka(e, t.ofType, r.ofType)
          : !1
        : (0, pt.isNonNullType)(t)
        ? Ka(e, t.ofType, r)
        : (0, pt.isListType)(r)
        ? (0, pt.isListType)(t)
          ? Ka(e, t.ofType, r.ofType)
          : !1
        : (0, pt.isListType)(t)
        ? !1
        : (0, pt.isAbstractType)(r) &&
          ((0, pt.isInterfaceType)(t) || (0, pt.isObjectType)(t)) &&
          e.isSubType(r, t);
    }
    function iA(e, t, r) {
      return t === r
        ? !0
        : (0, pt.isAbstractType)(t)
        ? (0, pt.isAbstractType)(r)
          ? e.getPossibleTypes(t).some((n) => e.isSubType(r, n))
          : e.isSubType(t, r)
        : (0, pt.isAbstractType)(r)
        ? e.isSubType(r, t)
        : !1;
    }
  });
  var Sr = f((ze) => {
    "use strict";
    Object.defineProperty(ze, "__esModule", { value: !0 });
    ze.GraphQLString =
      ze.GraphQLInt =
      ze.GraphQLID =
      ze.GraphQLFloat =
      ze.GraphQLBoolean =
      ze.GRAPHQL_MIN_INT =
      ze.GRAPHQL_MAX_INT =
        void 0;
    ze.isSpecifiedScalarType = sA;
    ze.specifiedScalarTypes = void 0;
    var ur = he(),
      gh = gr(),
      et = W(),
      An = ue(),
      ys = kt(),
      hs = ae(),
      $a = 2147483647;
    ze.GRAPHQL_MAX_INT = $a;
    var Ba = -2147483648;
    ze.GRAPHQL_MIN_INT = Ba;
    var vh = new hs.GraphQLScalarType({
      name: "Int",
      description:
        "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      serialize(e) {
        let t = ms(e);
        if (typeof t == "boolean") return t ? 1 : 0;
        let r = t;
        if (
          (typeof t == "string" && t !== "" && (r = Number(t)),
          typeof r != "number" || !Number.isInteger(r))
        )
          throw new et.GraphQLError(
            `Int cannot represent non-integer value: ${(0, ur.inspect)(t)}`
          );
        if (r > $a || r < Ba)
          throw new et.GraphQLError(
            "Int cannot represent non 32-bit signed integer value: " +
              (0, ur.inspect)(t)
          );
        return r;
      },
      parseValue(e) {
        if (typeof e != "number" || !Number.isInteger(e))
          throw new et.GraphQLError(
            `Int cannot represent non-integer value: ${(0, ur.inspect)(e)}`
          );
        if (e > $a || e < Ba)
          throw new et.GraphQLError(
            `Int cannot represent non 32-bit signed integer value: ${e}`
          );
        return e;
      },
      parseLiteral(e) {
        if (e.kind !== An.Kind.INT)
          throw new et.GraphQLError(
            `Int cannot represent non-integer value: ${(0, ys.print)(e)}`,
            { nodes: e }
          );
        let t = parseInt(e.value, 10);
        if (t > $a || t < Ba)
          throw new et.GraphQLError(
            `Int cannot represent non 32-bit signed integer value: ${e.value}`,
            { nodes: e }
          );
        return t;
      },
    });
    ze.GraphQLInt = vh;
    var bh = new hs.GraphQLScalarType({
      name: "Float",
      description:
        "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
      serialize(e) {
        let t = ms(e);
        if (typeof t == "boolean") return t ? 1 : 0;
        let r = t;
        if (
          (typeof t == "string" && t !== "" && (r = Number(t)),
          typeof r != "number" || !Number.isFinite(r))
        )
          throw new et.GraphQLError(
            `Float cannot represent non numeric value: ${(0, ur.inspect)(t)}`
          );
        return r;
      },
      parseValue(e) {
        if (typeof e != "number" || !Number.isFinite(e))
          throw new et.GraphQLError(
            `Float cannot represent non numeric value: ${(0, ur.inspect)(e)}`
          );
        return e;
      },
      parseLiteral(e) {
        if (e.kind !== An.Kind.FLOAT && e.kind !== An.Kind.INT)
          throw new et.GraphQLError(
            `Float cannot represent non numeric value: ${(0, ys.print)(e)}`,
            e
          );
        return parseFloat(e.value);
      },
    });
    ze.GraphQLFloat = bh;
    var Oh = new hs.GraphQLScalarType({
      name: "String",
      description:
        "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      serialize(e) {
        let t = ms(e);
        if (typeof t == "string") return t;
        if (typeof t == "boolean") return t ? "true" : "false";
        if (typeof t == "number" && Number.isFinite(t)) return t.toString();
        throw new et.GraphQLError(
          `String cannot represent value: ${(0, ur.inspect)(e)}`
        );
      },
      parseValue(e) {
        if (typeof e != "string")
          throw new et.GraphQLError(
            `String cannot represent a non string value: ${(0, ur.inspect)(e)}`
          );
        return e;
      },
      parseLiteral(e) {
        if (e.kind !== An.Kind.STRING)
          throw new et.GraphQLError(
            `String cannot represent a non string value: ${(0, ys.print)(e)}`,
            { nodes: e }
          );
        return e.value;
      },
    });
    ze.GraphQLString = Oh;
    var Sh = new hs.GraphQLScalarType({
      name: "Boolean",
      description: "The `Boolean` scalar type represents `true` or `false`.",
      serialize(e) {
        let t = ms(e);
        if (typeof t == "boolean") return t;
        if (Number.isFinite(t)) return t !== 0;
        throw new et.GraphQLError(
          `Boolean cannot represent a non boolean value: ${(0, ur.inspect)(t)}`
        );
      },
      parseValue(e) {
        if (typeof e != "boolean")
          throw new et.GraphQLError(
            `Boolean cannot represent a non boolean value: ${(0, ur.inspect)(
              e
            )}`
          );
        return e;
      },
      parseLiteral(e) {
        if (e.kind !== An.Kind.BOOLEAN)
          throw new et.GraphQLError(
            `Boolean cannot represent a non boolean value: ${(0, ys.print)(e)}`,
            { nodes: e }
          );
        return e.value;
      },
    });
    ze.GraphQLBoolean = Sh;
    var Th = new hs.GraphQLScalarType({
      name: "ID",
      description:
        'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
      serialize(e) {
        let t = ms(e);
        if (typeof t == "string") return t;
        if (Number.isInteger(t)) return String(t);
        throw new et.GraphQLError(
          `ID cannot represent value: ${(0, ur.inspect)(e)}`
        );
      },
      parseValue(e) {
        if (typeof e == "string") return e;
        if (typeof e == "number" && Number.isInteger(e)) return e.toString();
        throw new et.GraphQLError(
          `ID cannot represent value: ${(0, ur.inspect)(e)}`
        );
      },
      parseLiteral(e) {
        if (e.kind !== An.Kind.STRING && e.kind !== An.Kind.INT)
          throw new et.GraphQLError(
            "ID cannot represent a non-string and non-integer value: " +
              (0, ys.print)(e),
            { nodes: e }
          );
        return e.value;
      },
    });
    ze.GraphQLID = Th;
    var _h = Object.freeze([Oh, vh, bh, Sh, Th]);
    ze.specifiedScalarTypes = _h;
    function sA(e) {
      return _h.some(({ name: t }) => e.name === t);
    }
    function ms(e) {
      if ((0, gh.isObjectLike)(e)) {
        if (typeof e.valueOf == "function") {
          let t = e.valueOf();
          if (!(0, gh.isObjectLike)(t)) return t;
        }
        if (typeof e.toJSON == "function") return e.toJSON();
      }
      return e;
    }
  });
  var Nt = f((We) => {
    "use strict";
    Object.defineProperty(We, "__esModule", { value: !0 });
    We.GraphQLSpecifiedByDirective =
      We.GraphQLSkipDirective =
      We.GraphQLIncludeDirective =
      We.GraphQLDirective =
      We.GraphQLDeprecatedDirective =
      We.DEFAULT_DEPRECATION_REASON =
        void 0;
    We.assertDirective = pA;
    We.isDirective = Eh;
    We.isSpecifiedDirective = dA;
    We.specifiedDirectives = void 0;
    var Ah = Tt(),
      aA = he(),
      oA = ns(),
      uA = gr(),
      lA = qa(),
      lr = Xn(),
      cA = us(),
      gs = ae(),
      za = Sr();
    function Eh(e) {
      return (0, oA.instanceOf)(e, En);
    }
    function pA(e) {
      if (!Eh(e))
        throw new Error(
          `Expected ${(0, aA.inspect)(e)} to be a GraphQL directive.`
        );
      return e;
    }
    var En = class {
      constructor(t) {
        var r, n;
        (this.name = (0, cA.assertName)(t.name)),
          (this.description = t.description),
          (this.locations = t.locations),
          (this.isRepeatable =
            (r = t.isRepeatable) !== null && r !== void 0 ? r : !1),
          (this.extensions = (0, lA.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          Array.isArray(t.locations) ||
            (0, Ah.devAssert)(!1, `@${t.name} locations must be an Array.`);
        let i = (n = t.args) !== null && n !== void 0 ? n : {};
        ((0, uA.isObjectLike)(i) && !Array.isArray(i)) ||
          (0, Ah.devAssert)(
            !1,
            `@${t.name} args must be an object with argument names as keys.`
          ),
          (this.args = (0, gs.defineArguments)(i));
      }
      get [Symbol.toStringTag]() {
        return "GraphQLDirective";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          locations: this.locations,
          args: (0, gs.argsToArgsConfig)(this.args),
          isRepeatable: this.isRepeatable,
          extensions: this.extensions,
          astNode: this.astNode,
        };
      }
      toString() {
        return "@" + this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    We.GraphQLDirective = En;
    var Nh = new En({
      name: "include",
      description:
        "Directs the executor to include this field or fragment only when the `if` argument is true.",
      locations: [
        lr.DirectiveLocation.FIELD,
        lr.DirectiveLocation.FRAGMENT_SPREAD,
        lr.DirectiveLocation.INLINE_FRAGMENT,
      ],
      args: {
        if: {
          type: new gs.GraphQLNonNull(za.GraphQLBoolean),
          description: "Included when true.",
        },
      },
    });
    We.GraphQLIncludeDirective = Nh;
    var Ih = new En({
      name: "skip",
      description:
        "Directs the executor to skip this field or fragment when the `if` argument is true.",
      locations: [
        lr.DirectiveLocation.FIELD,
        lr.DirectiveLocation.FRAGMENT_SPREAD,
        lr.DirectiveLocation.INLINE_FRAGMENT,
      ],
      args: {
        if: {
          type: new gs.GraphQLNonNull(za.GraphQLBoolean),
          description: "Skipped when true.",
        },
      },
    });
    We.GraphQLSkipDirective = Ih;
    var jh = "No longer supported";
    We.DEFAULT_DEPRECATION_REASON = jh;
    var Ph = new En({
      name: "deprecated",
      description:
        "Marks an element of a GraphQL schema as no longer supported.",
      locations: [
        lr.DirectiveLocation.FIELD_DEFINITION,
        lr.DirectiveLocation.ARGUMENT_DEFINITION,
        lr.DirectiveLocation.INPUT_FIELD_DEFINITION,
        lr.DirectiveLocation.ENUM_VALUE,
      ],
      args: {
        reason: {
          type: za.GraphQLString,
          description:
            "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
          defaultValue: jh,
        },
      },
    });
    We.GraphQLDeprecatedDirective = Ph;
    var wh = new En({
      name: "specifiedBy",
      description: "Exposes a URL that specifies the behavior of this scalar.",
      locations: [lr.DirectiveLocation.SCALAR],
      args: {
        url: {
          type: new gs.GraphQLNonNull(za.GraphQLString),
          description: "The URL that specifies the behavior of this scalar.",
        },
      },
    });
    We.GraphQLSpecifiedByDirective = wh;
    var Dh = Object.freeze([Nh, Ih, Ph, wh]);
    We.specifiedDirectives = Dh;
    function dA(e) {
      return Dh.some(({ name: t }) => t === e.name);
    }
  });
  var Wa = f((Bl) => {
    "use strict";
    Object.defineProperty(Bl, "__esModule", { value: !0 });
    Bl.isIterableObject = fA;
    function fA(e) {
      return (
        typeof e == "object" &&
        typeof (e == null ? void 0 : e[Symbol.iterator]) == "function"
      );
    }
  });
  var Os = f((zl) => {
    "use strict";
    Object.defineProperty(zl, "__esModule", { value: !0 });
    zl.astFromValue = bs;
    var Rh = he(),
      yA = ct(),
      hA = Wa(),
      mA = gr(),
      $t = ue(),
      vs = ae(),
      gA = Sr();
    function bs(e, t) {
      if ((0, vs.isNonNullType)(t)) {
        let r = bs(e, t.ofType);
        return (r == null ? void 0 : r.kind) === $t.Kind.NULL ? null : r;
      }
      if (e === null) return { kind: $t.Kind.NULL };
      if (e === void 0) return null;
      if ((0, vs.isListType)(t)) {
        let r = t.ofType;
        if ((0, hA.isIterableObject)(e)) {
          let n = [];
          for (let i of e) {
            let s = bs(i, r);
            s != null && n.push(s);
          }
          return { kind: $t.Kind.LIST, values: n };
        }
        return bs(e, r);
      }
      if ((0, vs.isInputObjectType)(t)) {
        if (!(0, mA.isObjectLike)(e)) return null;
        let r = [];
        for (let n of Object.values(t.getFields())) {
          let i = bs(e[n.name], n.type);
          i &&
            r.push({
              kind: $t.Kind.OBJECT_FIELD,
              name: { kind: $t.Kind.NAME, value: n.name },
              value: i,
            });
        }
        return { kind: $t.Kind.OBJECT, fields: r };
      }
      if ((0, vs.isLeafType)(t)) {
        let r = t.serialize(e);
        if (r == null) return null;
        if (typeof r == "boolean") return { kind: $t.Kind.BOOLEAN, value: r };
        if (typeof r == "number" && Number.isFinite(r)) {
          let n = String(r);
          return Lh.test(n)
            ? { kind: $t.Kind.INT, value: n }
            : { kind: $t.Kind.FLOAT, value: n };
        }
        if (typeof r == "string")
          return (0, vs.isEnumType)(t)
            ? { kind: $t.Kind.ENUM, value: r }
            : t === gA.GraphQLID && Lh.test(r)
            ? { kind: $t.Kind.INT, value: r }
            : { kind: $t.Kind.STRING, value: r };
        throw new TypeError(
          `Cannot convert value to AST: ${(0, Rh.inspect)(r)}.`
        );
      }
      (0, yA.invariant)(!1, "Unexpected input type: " + (0, Rh.inspect)(t));
    }
    var Lh = /^-?(?:0|[1-9][0-9]*)$/;
  });
  var zt = f((me) => {
    "use strict";
    Object.defineProperty(me, "__esModule", { value: !0 });
    me.introspectionTypes =
      me.__TypeKind =
      me.__Type =
      me.__Schema =
      me.__InputValue =
      me.__Field =
      me.__EnumValue =
      me.__DirectiveLocation =
      me.__Directive =
      me.TypeNameMetaFieldDef =
      me.TypeMetaFieldDef =
      me.TypeKind =
      me.SchemaMetaFieldDef =
        void 0;
    me.isIntrospectionType = EA;
    var vA = he(),
      bA = ct(),
      Ye = Xn(),
      OA = kt(),
      SA = Os(),
      Q = ae(),
      Se = Sr(),
      Wl = new Q.GraphQLObjectType({
        name: "__Schema",
        description:
          "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
        fields: () => ({
          description: {
            type: Se.GraphQLString,
            resolve: (e) => e.description,
          },
          types: {
            description: "A list of all types supported by this server.",
            type: new Q.GraphQLNonNull(
              new Q.GraphQLList(new Q.GraphQLNonNull(Bt))
            ),
            resolve(e) {
              return Object.values(e.getTypeMap());
            },
          },
          queryType: {
            description: "The type that query operations will be rooted at.",
            type: new Q.GraphQLNonNull(Bt),
            resolve: (e) => e.getQueryType(),
          },
          mutationType: {
            description:
              "If this server supports mutation, the type that mutation operations will be rooted at.",
            type: Bt,
            resolve: (e) => e.getMutationType(),
          },
          subscriptionType: {
            description:
              "If this server support subscription, the type that subscription operations will be rooted at.",
            type: Bt,
            resolve: (e) => e.getSubscriptionType(),
          },
          directives: {
            description: "A list of all directives supported by this server.",
            type: new Q.GraphQLNonNull(
              new Q.GraphQLList(new Q.GraphQLNonNull(Yl))
            ),
            resolve: (e) => e.getDirectives(),
          },
        }),
      });
    me.__Schema = Wl;
    var Yl = new Q.GraphQLObjectType({
      name: "__Directive",
      description: `A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,
      fields: () => ({
        name: {
          type: new Q.GraphQLNonNull(Se.GraphQLString),
          resolve: (e) => e.name,
        },
        description: { type: Se.GraphQLString, resolve: (e) => e.description },
        isRepeatable: {
          type: new Q.GraphQLNonNull(Se.GraphQLBoolean),
          resolve: (e) => e.isRepeatable,
        },
        locations: {
          type: new Q.GraphQLNonNull(
            new Q.GraphQLList(new Q.GraphQLNonNull(Hl))
          ),
          resolve: (e) => e.locations,
        },
        args: {
          type: new Q.GraphQLNonNull(
            new Q.GraphQLList(new Q.GraphQLNonNull(Ss))
          ),
          args: {
            includeDeprecated: { type: Se.GraphQLBoolean, defaultValue: !1 },
          },
          resolve(e, { includeDeprecated: t }) {
            return t
              ? e.args
              : e.args.filter((r) => r.deprecationReason == null);
          },
        },
      }),
    });
    me.__Directive = Yl;
    var Hl = new Q.GraphQLEnumType({
      name: "__DirectiveLocation",
      description:
        "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
      values: {
        QUERY: {
          value: Ye.DirectiveLocation.QUERY,
          description: "Location adjacent to a query operation.",
        },
        MUTATION: {
          value: Ye.DirectiveLocation.MUTATION,
          description: "Location adjacent to a mutation operation.",
        },
        SUBSCRIPTION: {
          value: Ye.DirectiveLocation.SUBSCRIPTION,
          description: "Location adjacent to a subscription operation.",
        },
        FIELD: {
          value: Ye.DirectiveLocation.FIELD,
          description: "Location adjacent to a field.",
        },
        FRAGMENT_DEFINITION: {
          value: Ye.DirectiveLocation.FRAGMENT_DEFINITION,
          description: "Location adjacent to a fragment definition.",
        },
        FRAGMENT_SPREAD: {
          value: Ye.DirectiveLocation.FRAGMENT_SPREAD,
          description: "Location adjacent to a fragment spread.",
        },
        INLINE_FRAGMENT: {
          value: Ye.DirectiveLocation.INLINE_FRAGMENT,
          description: "Location adjacent to an inline fragment.",
        },
        VARIABLE_DEFINITION: {
          value: Ye.DirectiveLocation.VARIABLE_DEFINITION,
          description: "Location adjacent to a variable definition.",
        },
        SCHEMA: {
          value: Ye.DirectiveLocation.SCHEMA,
          description: "Location adjacent to a schema definition.",
        },
        SCALAR: {
          value: Ye.DirectiveLocation.SCALAR,
          description: "Location adjacent to a scalar definition.",
        },
        OBJECT: {
          value: Ye.DirectiveLocation.OBJECT,
          description: "Location adjacent to an object type definition.",
        },
        FIELD_DEFINITION: {
          value: Ye.DirectiveLocation.FIELD_DEFINITION,
          description: "Location adjacent to a field definition.",
        },
        ARGUMENT_DEFINITION: {
          value: Ye.DirectiveLocation.ARGUMENT_DEFINITION,
          description: "Location adjacent to an argument definition.",
        },
        INTERFACE: {
          value: Ye.DirectiveLocation.INTERFACE,
          description: "Location adjacent to an interface definition.",
        },
        UNION: {
          value: Ye.DirectiveLocation.UNION,
          description: "Location adjacent to a union definition.",
        },
        ENUM: {
          value: Ye.DirectiveLocation.ENUM,
          description: "Location adjacent to an enum definition.",
        },
        ENUM_VALUE: {
          value: Ye.DirectiveLocation.ENUM_VALUE,
          description: "Location adjacent to an enum value definition.",
        },
        INPUT_OBJECT: {
          value: Ye.DirectiveLocation.INPUT_OBJECT,
          description: "Location adjacent to an input object type definition.",
        },
        INPUT_FIELD_DEFINITION: {
          value: Ye.DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: "Location adjacent to an input object field definition.",
        },
      },
    });
    me.__DirectiveLocation = Hl;
    var Bt = new Q.GraphQLObjectType({
      name: "__Type",
      description:
        "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
      fields: () => ({
        kind: {
          type: new Q.GraphQLNonNull(Zl),
          resolve(e) {
            if ((0, Q.isScalarType)(e)) return He.SCALAR;
            if ((0, Q.isObjectType)(e)) return He.OBJECT;
            if ((0, Q.isInterfaceType)(e)) return He.INTERFACE;
            if ((0, Q.isUnionType)(e)) return He.UNION;
            if ((0, Q.isEnumType)(e)) return He.ENUM;
            if ((0, Q.isInputObjectType)(e)) return He.INPUT_OBJECT;
            if ((0, Q.isListType)(e)) return He.LIST;
            if ((0, Q.isNonNullType)(e)) return He.NON_NULL;
            (0, bA.invariant)(!1, `Unexpected type: "${(0, vA.inspect)(e)}".`);
          },
        },
        name: {
          type: Se.GraphQLString,
          resolve: (e) => ("name" in e ? e.name : void 0),
        },
        description: {
          type: Se.GraphQLString,
          resolve: (e) => ("description" in e ? e.description : void 0),
        },
        specifiedByURL: {
          type: Se.GraphQLString,
          resolve: (e) => ("specifiedByURL" in e ? e.specifiedByURL : void 0),
        },
        fields: {
          type: new Q.GraphQLList(new Q.GraphQLNonNull(Jl)),
          args: {
            includeDeprecated: { type: Se.GraphQLBoolean, defaultValue: !1 },
          },
          resolve(e, { includeDeprecated: t }) {
            if ((0, Q.isObjectType)(e) || (0, Q.isInterfaceType)(e)) {
              let r = Object.values(e.getFields());
              return t ? r : r.filter((n) => n.deprecationReason == null);
            }
          },
        },
        interfaces: {
          type: new Q.GraphQLList(new Q.GraphQLNonNull(Bt)),
          resolve(e) {
            if ((0, Q.isObjectType)(e) || (0, Q.isInterfaceType)(e))
              return e.getInterfaces();
          },
        },
        possibleTypes: {
          type: new Q.GraphQLList(new Q.GraphQLNonNull(Bt)),
          resolve(e, t, r, { schema: n }) {
            if ((0, Q.isAbstractType)(e)) return n.getPossibleTypes(e);
          },
        },
        enumValues: {
          type: new Q.GraphQLList(new Q.GraphQLNonNull(Xl)),
          args: {
            includeDeprecated: { type: Se.GraphQLBoolean, defaultValue: !1 },
          },
          resolve(e, { includeDeprecated: t }) {
            if ((0, Q.isEnumType)(e)) {
              let r = e.getValues();
              return t ? r : r.filter((n) => n.deprecationReason == null);
            }
          },
        },
        inputFields: {
          type: new Q.GraphQLList(new Q.GraphQLNonNull(Ss)),
          args: {
            includeDeprecated: { type: Se.GraphQLBoolean, defaultValue: !1 },
          },
          resolve(e, { includeDeprecated: t }) {
            if ((0, Q.isInputObjectType)(e)) {
              let r = Object.values(e.getFields());
              return t ? r : r.filter((n) => n.deprecationReason == null);
            }
          },
        },
        ofType: {
          type: Bt,
          resolve: (e) => ("ofType" in e ? e.ofType : void 0),
        },
      }),
    });
    me.__Type = Bt;
    var Jl = new Q.GraphQLObjectType({
      name: "__Field",
      description:
        "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
      fields: () => ({
        name: {
          type: new Q.GraphQLNonNull(Se.GraphQLString),
          resolve: (e) => e.name,
        },
        description: { type: Se.GraphQLString, resolve: (e) => e.description },
        args: {
          type: new Q.GraphQLNonNull(
            new Q.GraphQLList(new Q.GraphQLNonNull(Ss))
          ),
          args: {
            includeDeprecated: { type: Se.GraphQLBoolean, defaultValue: !1 },
          },
          resolve(e, { includeDeprecated: t }) {
            return t
              ? e.args
              : e.args.filter((r) => r.deprecationReason == null);
          },
        },
        type: { type: new Q.GraphQLNonNull(Bt), resolve: (e) => e.type },
        isDeprecated: {
          type: new Q.GraphQLNonNull(Se.GraphQLBoolean),
          resolve: (e) => e.deprecationReason != null,
        },
        deprecationReason: {
          type: Se.GraphQLString,
          resolve: (e) => e.deprecationReason,
        },
      }),
    });
    me.__Field = Jl;
    var Ss = new Q.GraphQLObjectType({
      name: "__InputValue",
      description:
        "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
      fields: () => ({
        name: {
          type: new Q.GraphQLNonNull(Se.GraphQLString),
          resolve: (e) => e.name,
        },
        description: { type: Se.GraphQLString, resolve: (e) => e.description },
        type: { type: new Q.GraphQLNonNull(Bt), resolve: (e) => e.type },
        defaultValue: {
          type: Se.GraphQLString,
          description:
            "A GraphQL-formatted string representing the default value for this input value.",
          resolve(e) {
            let { type: t, defaultValue: r } = e,
              n = (0, SA.astFromValue)(r, t);
            return n ? (0, OA.print)(n) : null;
          },
        },
        isDeprecated: {
          type: new Q.GraphQLNonNull(Se.GraphQLBoolean),
          resolve: (e) => e.deprecationReason != null,
        },
        deprecationReason: {
          type: Se.GraphQLString,
          resolve: (e) => e.deprecationReason,
        },
      }),
    });
    me.__InputValue = Ss;
    var Xl = new Q.GraphQLObjectType({
      name: "__EnumValue",
      description:
        "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
      fields: () => ({
        name: {
          type: new Q.GraphQLNonNull(Se.GraphQLString),
          resolve: (e) => e.name,
        },
        description: { type: Se.GraphQLString, resolve: (e) => e.description },
        isDeprecated: {
          type: new Q.GraphQLNonNull(Se.GraphQLBoolean),
          resolve: (e) => e.deprecationReason != null,
        },
        deprecationReason: {
          type: Se.GraphQLString,
          resolve: (e) => e.deprecationReason,
        },
      }),
    });
    me.__EnumValue = Xl;
    var He;
    me.TypeKind = He;
    (function (e) {
      (e.SCALAR = "SCALAR"),
        (e.OBJECT = "OBJECT"),
        (e.INTERFACE = "INTERFACE"),
        (e.UNION = "UNION"),
        (e.ENUM = "ENUM"),
        (e.INPUT_OBJECT = "INPUT_OBJECT"),
        (e.LIST = "LIST"),
        (e.NON_NULL = "NON_NULL");
    })(He || (me.TypeKind = He = {}));
    var Zl = new Q.GraphQLEnumType({
      name: "__TypeKind",
      description: "An enum describing what kind of type a given `__Type` is.",
      values: {
        SCALAR: {
          value: He.SCALAR,
          description: "Indicates this type is a scalar.",
        },
        OBJECT: {
          value: He.OBJECT,
          description:
            "Indicates this type is an object. `fields` and `interfaces` are valid fields.",
        },
        INTERFACE: {
          value: He.INTERFACE,
          description:
            "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.",
        },
        UNION: {
          value: He.UNION,
          description:
            "Indicates this type is a union. `possibleTypes` is a valid field.",
        },
        ENUM: {
          value: He.ENUM,
          description:
            "Indicates this type is an enum. `enumValues` is a valid field.",
        },
        INPUT_OBJECT: {
          value: He.INPUT_OBJECT,
          description:
            "Indicates this type is an input object. `inputFields` is a valid field.",
        },
        LIST: {
          value: He.LIST,
          description:
            "Indicates this type is a list. `ofType` is a valid field.",
        },
        NON_NULL: {
          value: He.NON_NULL,
          description:
            "Indicates this type is a non-null. `ofType` is a valid field.",
        },
      },
    });
    me.__TypeKind = Zl;
    var TA = {
      name: "__schema",
      type: new Q.GraphQLNonNull(Wl),
      description: "Access the current type schema of this server.",
      args: [],
      resolve: (e, t, r, { schema: n }) => n,
      deprecationReason: void 0,
      extensions: Object.create(null),
      astNode: void 0,
    };
    me.SchemaMetaFieldDef = TA;
    var _A = {
      name: "__type",
      type: Bt,
      description: "Request the type information of a single type.",
      args: [
        {
          name: "name",
          description: void 0,
          type: new Q.GraphQLNonNull(Se.GraphQLString),
          defaultValue: void 0,
          deprecationReason: void 0,
          extensions: Object.create(null),
          astNode: void 0,
        },
      ],
      resolve: (e, { name: t }, r, { schema: n }) => n.getType(t),
      deprecationReason: void 0,
      extensions: Object.create(null),
      astNode: void 0,
    };
    me.TypeMetaFieldDef = _A;
    var AA = {
      name: "__typename",
      type: new Q.GraphQLNonNull(Se.GraphQLString),
      description: "The name of the current Object type at runtime.",
      args: [],
      resolve: (e, t, r, { parentType: n }) => n.name,
      deprecationReason: void 0,
      extensions: Object.create(null),
      astNode: void 0,
    };
    me.TypeNameMetaFieldDef = AA;
    var Fh = Object.freeze([Wl, Yl, Hl, Bt, Jl, Ss, Xl, Zl]);
    me.introspectionTypes = Fh;
    function EA(e) {
      return Fh.some(({ name: t }) => e.name === t);
    }
  });
  var Nn = f((ai) => {
    "use strict";
    Object.defineProperty(ai, "__esModule", { value: !0 });
    ai.GraphQLSchema = void 0;
    ai.assertSchema = wA;
    ai.isSchema = Mh;
    var Ya = Tt(),
      ec = he(),
      NA = ns(),
      IA = gr(),
      jA = qa(),
      tc = vr(),
      cr = ae(),
      qh = Nt(),
      PA = zt();
    function Mh(e) {
      return (0, NA.instanceOf)(e, rc);
    }
    function wA(e) {
      if (!Mh(e))
        throw new Error(
          `Expected ${(0, ec.inspect)(e)} to be a GraphQL schema.`
        );
      return e;
    }
    var rc = class {
      constructor(t) {
        var r, n;
        (this.__validationErrors = t.assumeValid === !0 ? [] : void 0),
          (0, IA.isObjectLike)(t) ||
            (0, Ya.devAssert)(!1, "Must provide configuration object."),
          !t.types ||
            Array.isArray(t.types) ||
            (0, Ya.devAssert)(
              !1,
              `"types" must be Array if provided but got: ${(0, ec.inspect)(
                t.types
              )}.`
            ),
          !t.directives ||
            Array.isArray(t.directives) ||
            (0, Ya.devAssert)(
              !1,
              `"directives" must be Array if provided but got: ${(0,
              ec.inspect)(t.directives)}.`
            ),
          (this.description = t.description),
          (this.extensions = (0, jA.toObjMap)(t.extensions)),
          (this.astNode = t.astNode),
          (this.extensionASTNodes =
            (r = t.extensionASTNodes) !== null && r !== void 0 ? r : []),
          (this._queryType = t.query),
          (this._mutationType = t.mutation),
          (this._subscriptionType = t.subscription),
          (this._directives =
            (n = t.directives) !== null && n !== void 0
              ? n
              : qh.specifiedDirectives);
        let i = new Set(t.types);
        if (t.types != null) for (let s of t.types) i.delete(s), pr(s, i);
        this._queryType != null && pr(this._queryType, i),
          this._mutationType != null && pr(this._mutationType, i),
          this._subscriptionType != null && pr(this._subscriptionType, i);
        for (let s of this._directives)
          if ((0, qh.isDirective)(s)) for (let a of s.args) pr(a.type, i);
        pr(PA.__Schema, i),
          (this._typeMap = Object.create(null)),
          (this._subTypeMap = Object.create(null)),
          (this._implementationsMap = Object.create(null));
        for (let s of i) {
          if (s == null) continue;
          let a = s.name;
          if (
            (a ||
              (0, Ya.devAssert)(
                !1,
                "One of the provided types for building the Schema is missing a name."
              ),
            this._typeMap[a] !== void 0)
          )
            throw new Error(
              `Schema must contain uniquely named types but contains multiple types named "${a}".`
            );
          if (((this._typeMap[a] = s), (0, cr.isInterfaceType)(s))) {
            for (let o of s.getInterfaces())
              if ((0, cr.isInterfaceType)(o)) {
                let u = this._implementationsMap[o.name];
                u === void 0 &&
                  (u = this._implementationsMap[o.name] =
                    { objects: [], interfaces: [] }),
                  u.interfaces.push(s);
              }
          } else if ((0, cr.isObjectType)(s)) {
            for (let o of s.getInterfaces())
              if ((0, cr.isInterfaceType)(o)) {
                let u = this._implementationsMap[o.name];
                u === void 0 &&
                  (u = this._implementationsMap[o.name] =
                    { objects: [], interfaces: [] }),
                  u.objects.push(s);
              }
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLSchema";
      }
      getQueryType() {
        return this._queryType;
      }
      getMutationType() {
        return this._mutationType;
      }
      getSubscriptionType() {
        return this._subscriptionType;
      }
      getRootType(t) {
        switch (t) {
          case tc.OperationTypeNode.QUERY:
            return this.getQueryType();
          case tc.OperationTypeNode.MUTATION:
            return this.getMutationType();
          case tc.OperationTypeNode.SUBSCRIPTION:
            return this.getSubscriptionType();
        }
      }
      getTypeMap() {
        return this._typeMap;
      }
      getType(t) {
        return this.getTypeMap()[t];
      }
      getPossibleTypes(t) {
        return (0, cr.isUnionType)(t)
          ? t.getTypes()
          : this.getImplementations(t).objects;
      }
      getImplementations(t) {
        let r = this._implementationsMap[t.name];
        return r != null ? r : { objects: [], interfaces: [] };
      }
      isSubType(t, r) {
        let n = this._subTypeMap[t.name];
        if (n === void 0) {
          if (((n = Object.create(null)), (0, cr.isUnionType)(t)))
            for (let i of t.getTypes()) n[i.name] = !0;
          else {
            let i = this.getImplementations(t);
            for (let s of i.objects) n[s.name] = !0;
            for (let s of i.interfaces) n[s.name] = !0;
          }
          this._subTypeMap[t.name] = n;
        }
        return n[r.name] !== void 0;
      }
      getDirectives() {
        return this._directives;
      }
      getDirective(t) {
        return this.getDirectives().find((r) => r.name === t);
      }
      toConfig() {
        return {
          description: this.description,
          query: this.getQueryType(),
          mutation: this.getMutationType(),
          subscription: this.getSubscriptionType(),
          types: Object.values(this.getTypeMap()),
          directives: this.getDirectives(),
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
          assumeValid: this.__validationErrors !== void 0,
        };
      }
    };
    ai.GraphQLSchema = rc;
    function pr(e, t) {
      let r = (0, cr.getNamedType)(e);
      if (!t.has(r)) {
        if ((t.add(r), (0, cr.isUnionType)(r)))
          for (let n of r.getTypes()) pr(n, t);
        else if ((0, cr.isObjectType)(r) || (0, cr.isInterfaceType)(r)) {
          for (let n of r.getInterfaces()) pr(n, t);
          for (let n of Object.values(r.getFields())) {
            pr(n.type, t);
            for (let i of n.args) pr(i.type, t);
          }
        } else if ((0, cr.isInputObjectType)(r))
          for (let n of Object.values(r.getFields())) pr(n.type, t);
      }
      return t;
    }
  });
  var _s = f((Ha) => {
    "use strict";
    Object.defineProperty(Ha, "__esModule", { value: !0 });
    Ha.assertValidSchema = FA;
    Ha.validateSchema = kh;
    var dt = he(),
      DA = W(),
      nc = vr(),
      xh = fs(),
      Qe = ae(),
      Ch = Nt(),
      RA = zt(),
      LA = Nn();
    function kh(e) {
      if (((0, LA.assertSchema)(e), e.__validationErrors))
        return e.__validationErrors;
      let t = new Gh(e);
      qA(t), MA(t), xA(t);
      let r = t.getErrors();
      return (e.__validationErrors = r), r;
    }
    function FA(e) {
      let t = kh(e);
      if (t.length !== 0)
        throw new Error(
          t.map((r) => r.message).join(`

`)
        );
    }
    var Gh = class {
      constructor(t) {
        (this._errors = []), (this.schema = t);
      }
      reportError(t, r) {
        let n = Array.isArray(r) ? r.filter(Boolean) : r;
        this._errors.push(new DA.GraphQLError(t, { nodes: n }));
      }
      getErrors() {
        return this._errors;
      }
    };
    function qA(e) {
      let t = e.schema,
        r = t.getQueryType();
      if (!r) e.reportError("Query root type must be provided.", t.astNode);
      else if (!(0, Qe.isObjectType)(r)) {
        var n;
        e.reportError(
          `Query root type must be Object type, it cannot be ${(0, dt.inspect)(
            r
          )}.`,
          (n = ic(t, nc.OperationTypeNode.QUERY)) !== null && n !== void 0
            ? n
            : r.astNode
        );
      }
      let i = t.getMutationType();
      if (i && !(0, Qe.isObjectType)(i)) {
        var s;
        e.reportError(
          `Mutation root type must be Object type if provided, it cannot be ${(0,
          dt.inspect)(i)}.`,
          (s = ic(t, nc.OperationTypeNode.MUTATION)) !== null && s !== void 0
            ? s
            : i.astNode
        );
      }
      let a = t.getSubscriptionType();
      if (a && !(0, Qe.isObjectType)(a)) {
        var o;
        e.reportError(
          `Subscription root type must be Object type if provided, it cannot be ${(0,
          dt.inspect)(a)}.`,
          (o = ic(t, nc.OperationTypeNode.SUBSCRIPTION)) !== null &&
            o !== void 0
            ? o
            : a.astNode
        );
      }
    }
    function ic(e, t) {
      var r;
      return (r = [e.astNode, ...e.extensionASTNodes]
        .flatMap((n) => {
          var i;
          return (i = n == null ? void 0 : n.operationTypes) !== null &&
            i !== void 0
            ? i
            : [];
        })
        .find((n) => n.operation === t)) === null || r === void 0
        ? void 0
        : r.type;
    }
    function MA(e) {
      for (let r of e.schema.getDirectives()) {
        if (!(0, Ch.isDirective)(r)) {
          e.reportError(
            `Expected directive but got: ${(0, dt.inspect)(r)}.`,
            r == null ? void 0 : r.astNode
          );
          continue;
        }
        In(e, r);
        for (let n of r.args)
          if (
            (In(e, n),
            (0, Qe.isInputType)(n.type) ||
              e.reportError(
                `The type of @${r.name}(${
                  n.name
                }:) must be Input Type but got: ${(0, dt.inspect)(n.type)}.`,
                n.astNode
              ),
            (0, Qe.isRequiredArgument)(n) && n.deprecationReason != null)
          ) {
            var t;
            e.reportError(
              `Required argument @${r.name}(${n.name}:) cannot be deprecated.`,
              [
                sc(n.astNode),
                (t = n.astNode) === null || t === void 0 ? void 0 : t.type,
              ]
            );
          }
      }
    }
    function In(e, t) {
      t.name.startsWith("__") &&
        e.reportError(
          `Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,
          t.astNode
        );
    }
    function xA(e) {
      let t = VA(e),
        r = e.schema.getTypeMap();
      for (let n of Object.values(r)) {
        if (!(0, Qe.isNamedType)(n)) {
          e.reportError(
            `Expected GraphQL named type but got: ${(0, dt.inspect)(n)}.`,
            n.astNode
          );
          continue;
        }
        (0, RA.isIntrospectionType)(n) || In(e, n),
          (0, Qe.isObjectType)(n) || (0, Qe.isInterfaceType)(n)
            ? (Qh(e, n), Uh(e, n))
            : (0, Qe.isUnionType)(n)
            ? GA(e, n)
            : (0, Qe.isEnumType)(n)
            ? QA(e, n)
            : (0, Qe.isInputObjectType)(n) && (UA(e, n), t(n));
      }
    }
    function Qh(e, t) {
      let r = Object.values(t.getFields());
      r.length === 0 &&
        e.reportError(`Type ${t.name} must define one or more fields.`, [
          t.astNode,
          ...t.extensionASTNodes,
        ]);
      for (let a of r) {
        if ((In(e, a), !(0, Qe.isOutputType)(a.type))) {
          var n;
          e.reportError(
            `The type of ${t.name}.${a.name} must be Output Type but got: ${(0,
            dt.inspect)(a.type)}.`,
            (n = a.astNode) === null || n === void 0 ? void 0 : n.type
          );
        }
        for (let o of a.args) {
          let u = o.name;
          if ((In(e, o), !(0, Qe.isInputType)(o.type))) {
            var i;
            e.reportError(
              `The type of ${t.name}.${
                a.name
              }(${u}:) must be Input Type but got: ${(0, dt.inspect)(o.type)}.`,
              (i = o.astNode) === null || i === void 0 ? void 0 : i.type
            );
          }
          if ((0, Qe.isRequiredArgument)(o) && o.deprecationReason != null) {
            var s;
            e.reportError(
              `Required argument ${t.name}.${a.name}(${u}:) cannot be deprecated.`,
              [
                sc(o.astNode),
                (s = o.astNode) === null || s === void 0 ? void 0 : s.type,
              ]
            );
          }
        }
      }
    }
    function Uh(e, t) {
      let r = Object.create(null);
      for (let n of t.getInterfaces()) {
        if (!(0, Qe.isInterfaceType)(n)) {
          e.reportError(
            `Type ${(0, dt.inspect)(
              t
            )} must only implement Interface types, it cannot implement ${(0,
            dt.inspect)(n)}.`,
            Ts(t, n)
          );
          continue;
        }
        if (t === n) {
          e.reportError(
            `Type ${t.name} cannot implement itself because it would create a circular reference.`,
            Ts(t, n)
          );
          continue;
        }
        if (r[n.name]) {
          e.reportError(
            `Type ${t.name} can only implement ${n.name} once.`,
            Ts(t, n)
          );
          continue;
        }
        (r[n.name] = !0), kA(e, t, n), CA(e, t, n);
      }
    }
    function CA(e, t, r) {
      let n = t.getFields();
      for (let u of Object.values(r.getFields())) {
        let l = u.name,
          c = n[l];
        if (!c) {
          e.reportError(
            `Interface field ${r.name}.${l} expected but ${t.name} does not provide it.`,
            [u.astNode, t.astNode, ...t.extensionASTNodes]
          );
          continue;
        }
        if (!(0, xh.isTypeSubTypeOf)(e.schema, c.type, u.type)) {
          var i, s;
          e.reportError(
            `Interface field ${r.name}.${l} expects type ${(0, dt.inspect)(
              u.type
            )} but ${t.name}.${l} is type ${(0, dt.inspect)(c.type)}.`,
            [
              (i = u.astNode) === null || i === void 0 ? void 0 : i.type,
              (s = c.astNode) === null || s === void 0 ? void 0 : s.type,
            ]
          );
        }
        for (let d of u.args) {
          let p = d.name,
            m = c.args.find((v) => v.name === p);
          if (!m) {
            e.reportError(
              `Interface field argument ${r.name}.${l}(${p}:) expected but ${t.name}.${l} does not provide it.`,
              [d.astNode, c.astNode]
            );
            continue;
          }
          if (!(0, xh.isEqualType)(d.type, m.type)) {
            var a, o;
            e.reportError(
              `Interface field argument ${r.name}.${l}(${p}:) expects type ${(0,
              dt.inspect)(d.type)} but ${t.name}.${l}(${p}:) is type ${(0,
              dt.inspect)(m.type)}.`,
              [
                (a = d.astNode) === null || a === void 0 ? void 0 : a.type,
                (o = m.astNode) === null || o === void 0 ? void 0 : o.type,
              ]
            );
          }
        }
        for (let d of c.args) {
          let p = d.name;
          !u.args.find((v) => v.name === p) &&
            (0, Qe.isRequiredArgument)(d) &&
            e.reportError(
              `Object field ${t.name}.${l} includes required argument ${p} that is missing from the Interface field ${r.name}.${l}.`,
              [d.astNode, u.astNode]
            );
        }
      }
    }
    function kA(e, t, r) {
      let n = t.getInterfaces();
      for (let i of r.getInterfaces())
        n.includes(i) ||
          e.reportError(
            i === t
              ? `Type ${t.name} cannot implement ${r.name} because it would create a circular reference.`
              : `Type ${t.name} must implement ${i.name} because it is implemented by ${r.name}.`,
            [...Ts(r, i), ...Ts(t, r)]
          );
    }
    function GA(e, t) {
      let r = t.getTypes();
      r.length === 0 &&
        e.reportError(
          `Union type ${t.name} must define one or more member types.`,
          [t.astNode, ...t.extensionASTNodes]
        );
      let n = Object.create(null);
      for (let i of r) {
        if (n[i.name]) {
          e.reportError(
            `Union type ${t.name} can only include type ${i.name} once.`,
            Vh(t, i.name)
          );
          continue;
        }
        (n[i.name] = !0),
          (0, Qe.isObjectType)(i) ||
            e.reportError(
              `Union type ${
                t.name
              } can only include Object types, it cannot include ${(0,
              dt.inspect)(i)}.`,
              Vh(t, String(i))
            );
      }
    }
    function QA(e, t) {
      let r = t.getValues();
      r.length === 0 &&
        e.reportError(`Enum type ${t.name} must define one or more values.`, [
          t.astNode,
          ...t.extensionASTNodes,
        ]);
      for (let n of r) In(e, n);
    }
    function UA(e, t) {
      let r = Object.values(t.getFields());
      r.length === 0 &&
        e.reportError(
          `Input Object type ${t.name} must define one or more fields.`,
          [t.astNode, ...t.extensionASTNodes]
        );
      for (let s of r) {
        if ((In(e, s), !(0, Qe.isInputType)(s.type))) {
          var n;
          e.reportError(
            `The type of ${t.name}.${s.name} must be Input Type but got: ${(0,
            dt.inspect)(s.type)}.`,
            (n = s.astNode) === null || n === void 0 ? void 0 : n.type
          );
        }
        if ((0, Qe.isRequiredInputField)(s) && s.deprecationReason != null) {
          var i;
          e.reportError(
            `Required input field ${t.name}.${s.name} cannot be deprecated.`,
            [
              sc(s.astNode),
              (i = s.astNode) === null || i === void 0 ? void 0 : i.type,
            ]
          );
        }
      }
    }
    function VA(e) {
      let t = Object.create(null),
        r = [],
        n = Object.create(null);
      return i;
      function i(s) {
        if (t[s.name]) return;
        (t[s.name] = !0), (n[s.name] = r.length);
        let a = Object.values(s.getFields());
        for (let o of a)
          if (
            (0, Qe.isNonNullType)(o.type) &&
            (0, Qe.isInputObjectType)(o.type.ofType)
          ) {
            let u = o.type.ofType,
              l = n[u.name];
            if ((r.push(o), l === void 0)) i(u);
            else {
              let c = r.slice(l),
                d = c.map((p) => p.name).join(".");
              e.reportError(
                `Cannot reference Input Object "${u.name}" within itself through a series of non-null fields: "${d}".`,
                c.map((p) => p.astNode)
              );
            }
            r.pop();
          }
        n[s.name] = void 0;
      }
    }
    function Ts(e, t) {
      let { astNode: r, extensionASTNodes: n } = e;
      return (r != null ? [r, ...n] : n)
        .flatMap((s) => {
          var a;
          return (a = s.interfaces) !== null && a !== void 0 ? a : [];
        })
        .filter((s) => s.name.value === t.name);
    }
    function Vh(e, t) {
      let { astNode: r, extensionASTNodes: n } = e;
      return (r != null ? [r, ...n] : n)
        .flatMap((s) => {
          var a;
          return (a = s.types) !== null && a !== void 0 ? a : [];
        })
        .filter((s) => s.name.value === t);
    }
    function sc(e) {
      var t;
      return e == null || (t = e.directives) === null || t === void 0
        ? void 0
        : t.find((r) => r.name.value === Ch.GraphQLDeprecatedDirective.name);
    }
  });
  var Tr = f((uc) => {
    "use strict";
    Object.defineProperty(uc, "__esModule", { value: !0 });
    uc.typeFromAST = oc;
    var ac = ue(),
      Kh = ae();
    function oc(e, t) {
      switch (t.kind) {
        case ac.Kind.LIST_TYPE: {
          let r = oc(e, t.type);
          return r && new Kh.GraphQLList(r);
        }
        case ac.Kind.NON_NULL_TYPE: {
          let r = oc(e, t.type);
          return r && new Kh.GraphQLNonNull(r);
        }
        case ac.Kind.NAMED_TYPE:
          return e.getType(t.name.value);
      }
    }
  });
  var Ja = f((As) => {
    "use strict";
    Object.defineProperty(As, "__esModule", { value: !0 });
    As.TypeInfo = void 0;
    As.visitWithTypeInfo = BA;
    var KA = vr(),
      Fe = ue(),
      $h = bn(),
      qe = ae(),
      oi = zt(),
      Bh = Tr(),
      zh = class {
        constructor(t, r, n) {
          (this._schema = t),
            (this._typeStack = []),
            (this._parentTypeStack = []),
            (this._inputTypeStack = []),
            (this._fieldDefStack = []),
            (this._defaultValueStack = []),
            (this._directive = null),
            (this._argument = null),
            (this._enumValue = null),
            (this._getFieldDef = n != null ? n : $A),
            r &&
              ((0, qe.isInputType)(r) && this._inputTypeStack.push(r),
              (0, qe.isCompositeType)(r) && this._parentTypeStack.push(r),
              (0, qe.isOutputType)(r) && this._typeStack.push(r));
        }
        get [Symbol.toStringTag]() {
          return "TypeInfo";
        }
        getType() {
          if (this._typeStack.length > 0)
            return this._typeStack[this._typeStack.length - 1];
        }
        getParentType() {
          if (this._parentTypeStack.length > 0)
            return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
        getInputType() {
          if (this._inputTypeStack.length > 0)
            return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
        getParentInputType() {
          if (this._inputTypeStack.length > 1)
            return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
        getFieldDef() {
          if (this._fieldDefStack.length > 0)
            return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
        getDefaultValue() {
          if (this._defaultValueStack.length > 0)
            return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
        getDirective() {
          return this._directive;
        }
        getArgument() {
          return this._argument;
        }
        getEnumValue() {
          return this._enumValue;
        }
        enter(t) {
          let r = this._schema;
          switch (t.kind) {
            case Fe.Kind.SELECTION_SET: {
              let i = (0, qe.getNamedType)(this.getType());
              this._parentTypeStack.push(
                (0, qe.isCompositeType)(i) ? i : void 0
              );
              break;
            }
            case Fe.Kind.FIELD: {
              let i = this.getParentType(),
                s,
                a;
              i && ((s = this._getFieldDef(r, i, t)), s && (a = s.type)),
                this._fieldDefStack.push(s),
                this._typeStack.push((0, qe.isOutputType)(a) ? a : void 0);
              break;
            }
            case Fe.Kind.DIRECTIVE:
              this._directive = r.getDirective(t.name.value);
              break;
            case Fe.Kind.OPERATION_DEFINITION: {
              let i = r.getRootType(t.operation);
              this._typeStack.push((0, qe.isObjectType)(i) ? i : void 0);
              break;
            }
            case Fe.Kind.INLINE_FRAGMENT:
            case Fe.Kind.FRAGMENT_DEFINITION: {
              let i = t.typeCondition,
                s = i
                  ? (0, Bh.typeFromAST)(r, i)
                  : (0, qe.getNamedType)(this.getType());
              this._typeStack.push((0, qe.isOutputType)(s) ? s : void 0);
              break;
            }
            case Fe.Kind.VARIABLE_DEFINITION: {
              let i = (0, Bh.typeFromAST)(r, t.type);
              this._inputTypeStack.push((0, qe.isInputType)(i) ? i : void 0);
              break;
            }
            case Fe.Kind.ARGUMENT: {
              var n;
              let i,
                s,
                a =
                  (n = this.getDirective()) !== null && n !== void 0
                    ? n
                    : this.getFieldDef();
              a &&
                ((i = a.args.find((o) => o.name === t.name.value)),
                i && (s = i.type)),
                (this._argument = i),
                this._defaultValueStack.push(i ? i.defaultValue : void 0),
                this._inputTypeStack.push((0, qe.isInputType)(s) ? s : void 0);
              break;
            }
            case Fe.Kind.LIST: {
              let i = (0, qe.getNullableType)(this.getInputType()),
                s = (0, qe.isListType)(i) ? i.ofType : i;
              this._defaultValueStack.push(void 0),
                this._inputTypeStack.push((0, qe.isInputType)(s) ? s : void 0);
              break;
            }
            case Fe.Kind.OBJECT_FIELD: {
              let i = (0, qe.getNamedType)(this.getInputType()),
                s,
                a;
              (0, qe.isInputObjectType)(i) &&
                ((a = i.getFields()[t.name.value]), a && (s = a.type)),
                this._defaultValueStack.push(a ? a.defaultValue : void 0),
                this._inputTypeStack.push((0, qe.isInputType)(s) ? s : void 0);
              break;
            }
            case Fe.Kind.ENUM: {
              let i = (0, qe.getNamedType)(this.getInputType()),
                s;
              (0, qe.isEnumType)(i) && (s = i.getValue(t.value)),
                (this._enumValue = s);
              break;
            }
            default:
          }
        }
        leave(t) {
          switch (t.kind) {
            case Fe.Kind.SELECTION_SET:
              this._parentTypeStack.pop();
              break;
            case Fe.Kind.FIELD:
              this._fieldDefStack.pop(), this._typeStack.pop();
              break;
            case Fe.Kind.DIRECTIVE:
              this._directive = null;
              break;
            case Fe.Kind.OPERATION_DEFINITION:
            case Fe.Kind.INLINE_FRAGMENT:
            case Fe.Kind.FRAGMENT_DEFINITION:
              this._typeStack.pop();
              break;
            case Fe.Kind.VARIABLE_DEFINITION:
              this._inputTypeStack.pop();
              break;
            case Fe.Kind.ARGUMENT:
              (this._argument = null),
                this._defaultValueStack.pop(),
                this._inputTypeStack.pop();
              break;
            case Fe.Kind.LIST:
            case Fe.Kind.OBJECT_FIELD:
              this._defaultValueStack.pop(), this._inputTypeStack.pop();
              break;
            case Fe.Kind.ENUM:
              this._enumValue = null;
              break;
            default:
          }
        }
      };
    As.TypeInfo = zh;
    function $A(e, t, r) {
      let n = r.name.value;
      if (n === oi.SchemaMetaFieldDef.name && e.getQueryType() === t)
        return oi.SchemaMetaFieldDef;
      if (n === oi.TypeMetaFieldDef.name && e.getQueryType() === t)
        return oi.TypeMetaFieldDef;
      if (n === oi.TypeNameMetaFieldDef.name && (0, qe.isCompositeType)(t))
        return oi.TypeNameMetaFieldDef;
      if ((0, qe.isObjectType)(t) || (0, qe.isInterfaceType)(t))
        return t.getFields()[n];
    }
    function BA(e, t) {
      return {
        enter(...r) {
          let n = r[0];
          e.enter(n);
          let i = (0, $h.getEnterLeaveForKind)(t, n.kind).enter;
          if (i) {
            let s = i.apply(t, r);
            return (
              s !== void 0 && (e.leave(n), (0, KA.isNode)(s) && e.enter(s)), s
            );
          }
        },
        leave(...r) {
          let n = r[0],
            i = (0, $h.getEnterLeaveForKind)(t, n.kind).leave,
            s;
          return i && (s = i.apply(t, r)), e.leave(n), s;
        },
      };
    }
  });
  var jn = f((Wt) => {
    "use strict";
    Object.defineProperty(Wt, "__esModule", { value: !0 });
    Wt.isConstValueNode = lc;
    Wt.isDefinitionNode = zA;
    Wt.isExecutableDefinitionNode = Wh;
    Wt.isSelectionNode = WA;
    Wt.isTypeDefinitionNode = Jh;
    Wt.isTypeExtensionNode = Zh;
    Wt.isTypeNode = YA;
    Wt.isTypeSystemDefinitionNode = Hh;
    Wt.isTypeSystemExtensionNode = Xh;
    Wt.isValueNode = Yh;
    var oe = ue();
    function zA(e) {
      return Wh(e) || Hh(e) || Xh(e);
    }
    function Wh(e) {
      return (
        e.kind === oe.Kind.OPERATION_DEFINITION ||
        e.kind === oe.Kind.FRAGMENT_DEFINITION
      );
    }
    function WA(e) {
      return (
        e.kind === oe.Kind.FIELD ||
        e.kind === oe.Kind.FRAGMENT_SPREAD ||
        e.kind === oe.Kind.INLINE_FRAGMENT
      );
    }
    function Yh(e) {
      return (
        e.kind === oe.Kind.VARIABLE ||
        e.kind === oe.Kind.INT ||
        e.kind === oe.Kind.FLOAT ||
        e.kind === oe.Kind.STRING ||
        e.kind === oe.Kind.BOOLEAN ||
        e.kind === oe.Kind.NULL ||
        e.kind === oe.Kind.ENUM ||
        e.kind === oe.Kind.LIST ||
        e.kind === oe.Kind.OBJECT
      );
    }
    function lc(e) {
      return (
        Yh(e) &&
        (e.kind === oe.Kind.LIST
          ? e.values.some(lc)
          : e.kind === oe.Kind.OBJECT
          ? e.fields.some((t) => lc(t.value))
          : e.kind !== oe.Kind.VARIABLE)
      );
    }
    function YA(e) {
      return (
        e.kind === oe.Kind.NAMED_TYPE ||
        e.kind === oe.Kind.LIST_TYPE ||
        e.kind === oe.Kind.NON_NULL_TYPE
      );
    }
    function Hh(e) {
      return (
        e.kind === oe.Kind.SCHEMA_DEFINITION ||
        Jh(e) ||
        e.kind === oe.Kind.DIRECTIVE_DEFINITION
      );
    }
    function Jh(e) {
      return (
        e.kind === oe.Kind.SCALAR_TYPE_DEFINITION ||
        e.kind === oe.Kind.OBJECT_TYPE_DEFINITION ||
        e.kind === oe.Kind.INTERFACE_TYPE_DEFINITION ||
        e.kind === oe.Kind.UNION_TYPE_DEFINITION ||
        e.kind === oe.Kind.ENUM_TYPE_DEFINITION ||
        e.kind === oe.Kind.INPUT_OBJECT_TYPE_DEFINITION
      );
    }
    function Xh(e) {
      return e.kind === oe.Kind.SCHEMA_EXTENSION || Zh(e);
    }
    function Zh(e) {
      return (
        e.kind === oe.Kind.SCALAR_TYPE_EXTENSION ||
        e.kind === oe.Kind.OBJECT_TYPE_EXTENSION ||
        e.kind === oe.Kind.INTERFACE_TYPE_EXTENSION ||
        e.kind === oe.Kind.UNION_TYPE_EXTENSION ||
        e.kind === oe.Kind.ENUM_TYPE_EXTENSION ||
        e.kind === oe.Kind.INPUT_OBJECT_TYPE_EXTENSION
      );
    }
  });
  var pc = f((cc) => {
    "use strict";
    Object.defineProperty(cc, "__esModule", { value: !0 });
    cc.ExecutableDefinitionsRule = XA;
    var HA = W(),
      em = ue(),
      JA = jn();
    function XA(e) {
      return {
        Document(t) {
          for (let r of t.definitions)
            if (!(0, JA.isExecutableDefinitionNode)(r)) {
              let n =
                r.kind === em.Kind.SCHEMA_DEFINITION ||
                r.kind === em.Kind.SCHEMA_EXTENSION
                  ? "schema"
                  : '"' + r.name.value + '"';
              e.reportError(
                new HA.GraphQLError(`The ${n} definition is not executable.`, {
                  nodes: r,
                })
              );
            }
          return !1;
        },
      };
    }
  });
  var fc = f((dc) => {
    "use strict";
    Object.defineProperty(dc, "__esModule", { value: !0 });
    dc.FieldsOnCorrectTypeRule = rE;
    var tm = Hr(),
      ZA = os(),
      eE = Xr(),
      tE = W(),
      Es = ae();
    function rE(e) {
      return {
        Field(t) {
          let r = e.getParentType();
          if (r && !e.getFieldDef()) {
            let i = e.getSchema(),
              s = t.name.value,
              a = (0, tm.didYouMean)(
                "to use an inline fragment on",
                nE(i, r, s)
              );
            a === "" && (a = (0, tm.didYouMean)(iE(r, s))),
              e.reportError(
                new tE.GraphQLError(
                  `Cannot query field "${s}" on type "${r.name}".` + a,
                  { nodes: t }
                )
              );
          }
        },
      };
    }
    function nE(e, t, r) {
      if (!(0, Es.isAbstractType)(t)) return [];
      let n = new Set(),
        i = Object.create(null);
      for (let a of e.getPossibleTypes(t))
        if (!!a.getFields()[r]) {
          n.add(a), (i[a.name] = 1);
          for (let o of a.getInterfaces()) {
            var s;
            !o.getFields()[r] ||
              (n.add(o),
              (i[o.name] =
                ((s = i[o.name]) !== null && s !== void 0 ? s : 0) + 1));
          }
        }
      return [...n]
        .sort((a, o) => {
          let u = i[o.name] - i[a.name];
          return u !== 0
            ? u
            : (0, Es.isInterfaceType)(a) && e.isSubType(a, o)
            ? -1
            : (0, Es.isInterfaceType)(o) && e.isSubType(o, a)
            ? 1
            : (0, ZA.naturalCompare)(a.name, o.name);
        })
        .map((a) => a.name);
    }
    function iE(e, t) {
      if ((0, Es.isObjectType)(e) || (0, Es.isInterfaceType)(e)) {
        let r = Object.keys(e.getFields());
        return (0, eE.suggestionList)(t, r);
      }
      return [];
    }
  });
  var hc = f((yc) => {
    "use strict";
    Object.defineProperty(yc, "__esModule", { value: !0 });
    yc.FragmentsOnCompositeTypesRule = sE;
    var rm = W(),
      nm = kt(),
      im = ae(),
      sm = Tr();
    function sE(e) {
      return {
        InlineFragment(t) {
          let r = t.typeCondition;
          if (r) {
            let n = (0, sm.typeFromAST)(e.getSchema(), r);
            if (n && !(0, im.isCompositeType)(n)) {
              let i = (0, nm.print)(r);
              e.reportError(
                new rm.GraphQLError(
                  `Fragment cannot condition on non composite type "${i}".`,
                  { nodes: r }
                )
              );
            }
          }
        },
        FragmentDefinition(t) {
          let r = (0, sm.typeFromAST)(e.getSchema(), t.typeCondition);
          if (r && !(0, im.isCompositeType)(r)) {
            let n = (0, nm.print)(t.typeCondition);
            e.reportError(
              new rm.GraphQLError(
                `Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,
                { nodes: t.typeCondition }
              )
            );
          }
        },
      };
    }
  });
  var mc = f((Xa) => {
    "use strict";
    Object.defineProperty(Xa, "__esModule", { value: !0 });
    Xa.KnownArgumentNamesOnDirectivesRule = lm;
    Xa.KnownArgumentNamesRule = uE;
    var am = Hr(),
      om = Xr(),
      um = W(),
      aE = ue(),
      oE = Nt();
    function uE(e) {
      return N(O({}, lm(e)), {
        Argument(t) {
          let r = e.getArgument(),
            n = e.getFieldDef(),
            i = e.getParentType();
          if (!r && n && i) {
            let s = t.name.value,
              a = n.args.map((u) => u.name),
              o = (0, om.suggestionList)(s, a);
            e.reportError(
              new um.GraphQLError(
                `Unknown argument "${s}" on field "${i.name}.${n.name}".` +
                  (0, am.didYouMean)(o),
                { nodes: t }
              )
            );
          }
        },
      });
    }
    function lm(e) {
      let t = Object.create(null),
        r = e.getSchema(),
        n = r ? r.getDirectives() : oE.specifiedDirectives;
      for (let a of n) t[a.name] = a.args.map((o) => o.name);
      let i = e.getDocument().definitions;
      for (let a of i)
        if (a.kind === aE.Kind.DIRECTIVE_DEFINITION) {
          var s;
          let o = (s = a.arguments) !== null && s !== void 0 ? s : [];
          t[a.name.value] = o.map((u) => u.name.value);
        }
      return {
        Directive(a) {
          let o = a.name.value,
            u = t[o];
          if (a.arguments && u)
            for (let l of a.arguments) {
              let c = l.name.value;
              if (!u.includes(c)) {
                let d = (0, om.suggestionList)(c, u);
                e.reportError(
                  new um.GraphQLError(
                    `Unknown argument "${c}" on directive "@${o}".` +
                      (0, am.didYouMean)(d),
                    { nodes: l }
                  )
                );
              }
            }
          return !1;
        },
      };
    }
  });
  var Oc = f((bc) => {
    "use strict";
    Object.defineProperty(bc, "__esModule", { value: !0 });
    bc.KnownDirectivesRule = pE;
    var lE = he(),
      gc = ct(),
      cm = W(),
      vc = vr(),
      Je = Xn(),
      Ee = ue(),
      cE = Nt();
    function pE(e) {
      let t = Object.create(null),
        r = e.getSchema(),
        n = r ? r.getDirectives() : cE.specifiedDirectives;
      for (let s of n) t[s.name] = s.locations;
      let i = e.getDocument().definitions;
      for (let s of i)
        s.kind === Ee.Kind.DIRECTIVE_DEFINITION &&
          (t[s.name.value] = s.locations.map((a) => a.value));
      return {
        Directive(s, a, o, u, l) {
          let c = s.name.value,
            d = t[c];
          if (!d) {
            e.reportError(
              new cm.GraphQLError(`Unknown directive "@${c}".`, { nodes: s })
            );
            return;
          }
          let p = dE(l);
          p &&
            !d.includes(p) &&
            e.reportError(
              new cm.GraphQLError(
                `Directive "@${c}" may not be used on ${p}.`,
                { nodes: s }
              )
            );
        },
      };
    }
    function dE(e) {
      let t = e[e.length - 1];
      switch (("kind" in t || (0, gc.invariant)(!1), t.kind)) {
        case Ee.Kind.OPERATION_DEFINITION:
          return fE(t.operation);
        case Ee.Kind.FIELD:
          return Je.DirectiveLocation.FIELD;
        case Ee.Kind.FRAGMENT_SPREAD:
          return Je.DirectiveLocation.FRAGMENT_SPREAD;
        case Ee.Kind.INLINE_FRAGMENT:
          return Je.DirectiveLocation.INLINE_FRAGMENT;
        case Ee.Kind.FRAGMENT_DEFINITION:
          return Je.DirectiveLocation.FRAGMENT_DEFINITION;
        case Ee.Kind.VARIABLE_DEFINITION:
          return Je.DirectiveLocation.VARIABLE_DEFINITION;
        case Ee.Kind.SCHEMA_DEFINITION:
        case Ee.Kind.SCHEMA_EXTENSION:
          return Je.DirectiveLocation.SCHEMA;
        case Ee.Kind.SCALAR_TYPE_DEFINITION:
        case Ee.Kind.SCALAR_TYPE_EXTENSION:
          return Je.DirectiveLocation.SCALAR;
        case Ee.Kind.OBJECT_TYPE_DEFINITION:
        case Ee.Kind.OBJECT_TYPE_EXTENSION:
          return Je.DirectiveLocation.OBJECT;
        case Ee.Kind.FIELD_DEFINITION:
          return Je.DirectiveLocation.FIELD_DEFINITION;
        case Ee.Kind.INTERFACE_TYPE_DEFINITION:
        case Ee.Kind.INTERFACE_TYPE_EXTENSION:
          return Je.DirectiveLocation.INTERFACE;
        case Ee.Kind.UNION_TYPE_DEFINITION:
        case Ee.Kind.UNION_TYPE_EXTENSION:
          return Je.DirectiveLocation.UNION;
        case Ee.Kind.ENUM_TYPE_DEFINITION:
        case Ee.Kind.ENUM_TYPE_EXTENSION:
          return Je.DirectiveLocation.ENUM;
        case Ee.Kind.ENUM_VALUE_DEFINITION:
          return Je.DirectiveLocation.ENUM_VALUE;
        case Ee.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case Ee.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return Je.DirectiveLocation.INPUT_OBJECT;
        case Ee.Kind.INPUT_VALUE_DEFINITION: {
          let r = e[e.length - 3];
          return (
            "kind" in r || (0, gc.invariant)(!1),
            r.kind === Ee.Kind.INPUT_OBJECT_TYPE_DEFINITION
              ? Je.DirectiveLocation.INPUT_FIELD_DEFINITION
              : Je.DirectiveLocation.ARGUMENT_DEFINITION
          );
        }
        default:
          (0, gc.invariant)(!1, "Unexpected kind: " + (0, lE.inspect)(t.kind));
      }
    }
    function fE(e) {
      switch (e) {
        case vc.OperationTypeNode.QUERY:
          return Je.DirectiveLocation.QUERY;
        case vc.OperationTypeNode.MUTATION:
          return Je.DirectiveLocation.MUTATION;
        case vc.OperationTypeNode.SUBSCRIPTION:
          return Je.DirectiveLocation.SUBSCRIPTION;
      }
    }
  });
  var Tc = f((Sc) => {
    "use strict";
    Object.defineProperty(Sc, "__esModule", { value: !0 });
    Sc.KnownFragmentNamesRule = hE;
    var yE = W();
    function hE(e) {
      return {
        FragmentSpread(t) {
          let r = t.name.value;
          e.getFragment(r) ||
            e.reportError(
              new yE.GraphQLError(`Unknown fragment "${r}".`, { nodes: t.name })
            );
        },
      };
    }
  });
  var Ec = f((Ac) => {
    "use strict";
    Object.defineProperty(Ac, "__esModule", { value: !0 });
    Ac.KnownTypeNamesRule = SE;
    var mE = Hr(),
      gE = Xr(),
      vE = W(),
      _c = jn(),
      bE = zt(),
      OE = Sr();
    function SE(e) {
      let t = e.getSchema(),
        r = t ? t.getTypeMap() : Object.create(null),
        n = Object.create(null);
      for (let s of e.getDocument().definitions)
        (0, _c.isTypeDefinitionNode)(s) && (n[s.name.value] = !0);
      let i = [...Object.keys(r), ...Object.keys(n)];
      return {
        NamedType(s, a, o, u, l) {
          let c = s.name.value;
          if (!r[c] && !n[c]) {
            var d;
            let p = (d = l[2]) !== null && d !== void 0 ? d : o,
              m = p != null && TE(p);
            if (m && pm.includes(c)) return;
            let v = (0, gE.suggestionList)(c, m ? pm.concat(i) : i);
            e.reportError(
              new vE.GraphQLError(
                `Unknown type "${c}".` + (0, mE.didYouMean)(v),
                { nodes: s }
              )
            );
          }
        },
      };
    }
    var pm = [...OE.specifiedScalarTypes, ...bE.introspectionTypes].map(
      (e) => e.name
    );
    function TE(e) {
      return (
        "kind" in e &&
        ((0, _c.isTypeSystemDefinitionNode)(e) ||
          (0, _c.isTypeSystemExtensionNode)(e))
      );
    }
  });
  var Ic = f((Nc) => {
    "use strict";
    Object.defineProperty(Nc, "__esModule", { value: !0 });
    Nc.LoneAnonymousOperationRule = EE;
    var _E = W(),
      AE = ue();
    function EE(e) {
      let t = 0;
      return {
        Document(r) {
          t = r.definitions.filter(
            (n) => n.kind === AE.Kind.OPERATION_DEFINITION
          ).length;
        },
        OperationDefinition(r) {
          !r.name &&
            t > 1 &&
            e.reportError(
              new _E.GraphQLError(
                "This anonymous operation must be the only defined operation.",
                { nodes: r }
              )
            );
        },
      };
    }
  });
  var Pc = f((jc) => {
    "use strict";
    Object.defineProperty(jc, "__esModule", { value: !0 });
    jc.LoneSchemaDefinitionRule = NE;
    var dm = W();
    function NE(e) {
      var t, r, n;
      let i = e.getSchema(),
        s =
          (t =
            (r =
              (n = i == null ? void 0 : i.astNode) !== null && n !== void 0
                ? n
                : i == null
                ? void 0
                : i.getQueryType()) !== null && r !== void 0
              ? r
              : i == null
              ? void 0
              : i.getMutationType()) !== null && t !== void 0
            ? t
            : i == null
            ? void 0
            : i.getSubscriptionType(),
        a = 0;
      return {
        SchemaDefinition(o) {
          if (s) {
            e.reportError(
              new dm.GraphQLError(
                "Cannot define a new schema within a schema extension.",
                { nodes: o }
              )
            );
            return;
          }
          a > 0 &&
            e.reportError(
              new dm.GraphQLError("Must provide only one schema definition.", {
                nodes: o,
              })
            ),
            ++a;
        },
      };
    }
  });
  var Dc = f((wc) => {
    "use strict";
    Object.defineProperty(wc, "__esModule", { value: !0 });
    wc.NoFragmentCyclesRule = jE;
    var IE = W();
    function jE(e) {
      let t = Object.create(null),
        r = [],
        n = Object.create(null);
      return {
        OperationDefinition: () => !1,
        FragmentDefinition(s) {
          return i(s), !1;
        },
      };
      function i(s) {
        if (t[s.name.value]) return;
        let a = s.name.value;
        t[a] = !0;
        let o = e.getFragmentSpreads(s.selectionSet);
        if (o.length !== 0) {
          n[a] = r.length;
          for (let u of o) {
            let l = u.name.value,
              c = n[l];
            if ((r.push(u), c === void 0)) {
              let d = e.getFragment(l);
              d && i(d);
            } else {
              let d = r.slice(c),
                p = d
                  .slice(0, -1)
                  .map((m) => '"' + m.name.value + '"')
                  .join(", ");
              e.reportError(
                new IE.GraphQLError(
                  `Cannot spread fragment "${l}" within itself` +
                    (p !== "" ? ` via ${p}.` : "."),
                  { nodes: d }
                )
              );
            }
            r.pop();
          }
          n[a] = void 0;
        }
      }
    }
  });
  var Lc = f((Rc) => {
    "use strict";
    Object.defineProperty(Rc, "__esModule", { value: !0 });
    Rc.NoUndefinedVariablesRule = wE;
    var PE = W();
    function wE(e) {
      let t = Object.create(null);
      return {
        OperationDefinition: {
          enter() {
            t = Object.create(null);
          },
          leave(r) {
            let n = e.getRecursiveVariableUsages(r);
            for (let { node: i } of n) {
              let s = i.name.value;
              t[s] !== !0 &&
                e.reportError(
                  new PE.GraphQLError(
                    r.name
                      ? `Variable "$${s}" is not defined by operation "${r.name.value}".`
                      : `Variable "$${s}" is not defined.`,
                    { nodes: [i, r] }
                  )
                );
            }
          },
        },
        VariableDefinition(r) {
          t[r.variable.name.value] = !0;
        },
      };
    }
  });
  var qc = f((Fc) => {
    "use strict";
    Object.defineProperty(Fc, "__esModule", { value: !0 });
    Fc.NoUnusedFragmentsRule = RE;
    var DE = W();
    function RE(e) {
      let t = [],
        r = [];
      return {
        OperationDefinition(n) {
          return t.push(n), !1;
        },
        FragmentDefinition(n) {
          return r.push(n), !1;
        },
        Document: {
          leave() {
            let n = Object.create(null);
            for (let i of t)
              for (let s of e.getRecursivelyReferencedFragments(i))
                n[s.name.value] = !0;
            for (let i of r) {
              let s = i.name.value;
              n[s] !== !0 &&
                e.reportError(
                  new DE.GraphQLError(`Fragment "${s}" is never used.`, {
                    nodes: i,
                  })
                );
            }
          },
        },
      };
    }
  });
  var xc = f((Mc) => {
    "use strict";
    Object.defineProperty(Mc, "__esModule", { value: !0 });
    Mc.NoUnusedVariablesRule = FE;
    var LE = W();
    function FE(e) {
      let t = [];
      return {
        OperationDefinition: {
          enter() {
            t = [];
          },
          leave(r) {
            let n = Object.create(null),
              i = e.getRecursiveVariableUsages(r);
            for (let { node: s } of i) n[s.name.value] = !0;
            for (let s of t) {
              let a = s.variable.name.value;
              n[a] !== !0 &&
                e.reportError(
                  new LE.GraphQLError(
                    r.name
                      ? `Variable "$${a}" is never used in operation "${r.name.value}".`
                      : `Variable "$${a}" is never used.`,
                    { nodes: s }
                  )
                );
            }
          },
        },
        VariableDefinition(r) {
          t.push(r);
        },
      };
    }
  });
  var Gc = f((kc) => {
    "use strict";
    Object.defineProperty(kc, "__esModule", { value: !0 });
    kc.sortValueNode = Cc;
    var qE = os(),
      Fr = ue();
    function Cc(e) {
      switch (e.kind) {
        case Fr.Kind.OBJECT:
          return N(O({}, e), { fields: ME(e.fields) });
        case Fr.Kind.LIST:
          return N(O({}, e), { values: e.values.map(Cc) });
        case Fr.Kind.INT:
        case Fr.Kind.FLOAT:
        case Fr.Kind.STRING:
        case Fr.Kind.BOOLEAN:
        case Fr.Kind.NULL:
        case Fr.Kind.ENUM:
        case Fr.Kind.VARIABLE:
          return e;
      }
    }
    function ME(e) {
      return e
        .map((t) => N(O({}, t), { value: Cc(t.value) }))
        .sort((t, r) => (0, qE.naturalCompare)(t.name.value, r.name.value));
    }
  });
  var $c = f((Kc) => {
    "use strict";
    Object.defineProperty(Kc, "__esModule", { value: !0 });
    Kc.OverlappingFieldsCanBeMergedRule = GE;
    var fm = he(),
      xE = W(),
      Ns = ue(),
      CE = kt(),
      It = ae(),
      kE = Gc(),
      ym = Tr();
    function hm(e) {
      return Array.isArray(e)
        ? e
            .map(([t, r]) => `subfields "${t}" conflict because ` + hm(r))
            .join(" and ")
        : e;
    }
    function GE(e) {
      let t = new bm(),
        r = new Map();
      return {
        SelectionSet(n) {
          let i = QE(e, r, t, e.getParentType(), n);
          for (let [[s, a], o, u] of i) {
            let l = hm(a);
            e.reportError(
              new xE.GraphQLError(
                `Fields "${s}" conflict because ${l}. Use different aliases on the fields to fetch both if this was intentional.`,
                { nodes: o.concat(u) }
              )
            );
          }
        },
      };
    }
    function QE(e, t, r, n, i) {
      let s = [],
        [a, o] = to(e, t, n, i);
      if ((VE(e, s, t, r, a), o.length !== 0))
        for (let u = 0; u < o.length; u++) {
          Za(e, s, t, r, !1, a, o[u]);
          for (let l = u + 1; l < o.length; l++) eo(e, s, t, r, !1, o[u], o[l]);
        }
      return s;
    }
    function Za(e, t, r, n, i, s, a) {
      let o = e.getFragment(a);
      if (!o) return;
      let [u, l] = Vc(e, r, o);
      if (s !== u) {
        Qc(e, t, r, n, i, s, u);
        for (let c of l)
          n.has(c, a, i) || (n.add(c, a, i), Za(e, t, r, n, i, s, c));
      }
    }
    function eo(e, t, r, n, i, s, a) {
      if (s === a || n.has(s, a, i)) return;
      n.add(s, a, i);
      let o = e.getFragment(s),
        u = e.getFragment(a);
      if (!o || !u) return;
      let [l, c] = Vc(e, r, o),
        [d, p] = Vc(e, r, u);
      Qc(e, t, r, n, i, l, d);
      for (let m of p) eo(e, t, r, n, i, s, m);
      for (let m of c) eo(e, t, r, n, i, m, a);
    }
    function UE(e, t, r, n, i, s, a, o) {
      let u = [],
        [l, c] = to(e, t, i, s),
        [d, p] = to(e, t, a, o);
      Qc(e, u, t, r, n, l, d);
      for (let m of p) Za(e, u, t, r, n, l, m);
      for (let m of c) Za(e, u, t, r, n, d, m);
      for (let m of c) for (let v of p) eo(e, u, t, r, n, m, v);
      return u;
    }
    function VE(e, t, r, n, i) {
      for (let [s, a] of Object.entries(i))
        if (a.length > 1)
          for (let o = 0; o < a.length; o++)
            for (let u = o + 1; u < a.length; u++) {
              let l = mm(e, r, n, !1, s, a[o], a[u]);
              l && t.push(l);
            }
    }
    function Qc(e, t, r, n, i, s, a) {
      for (let [o, u] of Object.entries(s)) {
        let l = a[o];
        if (l)
          for (let c of u)
            for (let d of l) {
              let p = mm(e, r, n, i, o, c, d);
              p && t.push(p);
            }
      }
    }
    function mm(e, t, r, n, i, s, a) {
      let [o, u, l] = s,
        [c, d, p] = a,
        m =
          n || (o !== c && (0, It.isObjectType)(o) && (0, It.isObjectType)(c));
      if (!m) {
        let H = u.name.value,
          B = d.name.value;
        if (H !== B)
          return [[i, `"${H}" and "${B}" are different fields`], [u], [d]];
        if (gm(u) !== gm(d))
          return [[i, "they have differing arguments"], [u], [d]];
      }
      let v = l == null ? void 0 : l.type,
        E = p == null ? void 0 : p.type;
      if (v && E && Uc(v, E))
        return [
          [
            i,
            `they return conflicting types "${(0, fm.inspect)(v)}" and "${(0,
            fm.inspect)(E)}"`,
          ],
          [u],
          [d],
        ];
      let L = u.selectionSet,
        C = d.selectionSet;
      if (L && C) {
        let H = UE(
          e,
          t,
          r,
          m,
          (0, It.getNamedType)(v),
          L,
          (0, It.getNamedType)(E),
          C
        );
        return KE(H, i, u, d);
      }
    }
    function gm(e) {
      var t;
      let r = (t = e.arguments) !== null && t !== void 0 ? t : [],
        n = {
          kind: Ns.Kind.OBJECT,
          fields: r.map((i) => ({
            kind: Ns.Kind.OBJECT_FIELD,
            name: i.name,
            value: i.value,
          })),
        };
      return (0, CE.print)((0, kE.sortValueNode)(n));
    }
    function Uc(e, t) {
      return (0, It.isListType)(e)
        ? (0, It.isListType)(t)
          ? Uc(e.ofType, t.ofType)
          : !0
        : (0, It.isListType)(t)
        ? !0
        : (0, It.isNonNullType)(e)
        ? (0, It.isNonNullType)(t)
          ? Uc(e.ofType, t.ofType)
          : !0
        : (0, It.isNonNullType)(t)
        ? !0
        : (0, It.isLeafType)(e) || (0, It.isLeafType)(t)
        ? e !== t
        : !1;
    }
    function to(e, t, r, n) {
      let i = t.get(n);
      if (i) return i;
      let s = Object.create(null),
        a = Object.create(null);
      vm(e, r, n, s, a);
      let o = [s, Object.keys(a)];
      return t.set(n, o), o;
    }
    function Vc(e, t, r) {
      let n = t.get(r.selectionSet);
      if (n) return n;
      let i = (0, ym.typeFromAST)(e.getSchema(), r.typeCondition);
      return to(e, t, i, r.selectionSet);
    }
    function vm(e, t, r, n, i) {
      for (let s of r.selections)
        switch (s.kind) {
          case Ns.Kind.FIELD: {
            let a = s.name.value,
              o;
            ((0, It.isObjectType)(t) || (0, It.isInterfaceType)(t)) &&
              (o = t.getFields()[a]);
            let u = s.alias ? s.alias.value : a;
            n[u] || (n[u] = []), n[u].push([t, s, o]);
            break;
          }
          case Ns.Kind.FRAGMENT_SPREAD:
            i[s.name.value] = !0;
            break;
          case Ns.Kind.INLINE_FRAGMENT: {
            let a = s.typeCondition,
              o = a ? (0, ym.typeFromAST)(e.getSchema(), a) : t;
            vm(e, o, s.selectionSet, n, i);
            break;
          }
        }
    }
    function KE(e, t, r, n) {
      if (e.length > 0)
        return [
          [t, e.map(([i]) => i)],
          [r, ...e.map(([, i]) => i).flat()],
          [n, ...e.map(([, , i]) => i).flat()],
        ];
    }
    var bm = class {
      constructor() {
        this._data = new Map();
      }
      has(t, r, n) {
        var i;
        let [s, a] = t < r ? [t, r] : [r, t],
          o =
            (i = this._data.get(s)) === null || i === void 0
              ? void 0
              : i.get(a);
        return o === void 0 ? !1 : n ? !0 : n === o;
      }
      add(t, r, n) {
        let [i, s] = t < r ? [t, r] : [r, t],
          a = this._data.get(i);
        a === void 0 ? this._data.set(i, new Map([[s, n]])) : a.set(s, n);
      }
    };
  });
  var Wc = f((zc) => {
    "use strict";
    Object.defineProperty(zc, "__esModule", { value: !0 });
    zc.PossibleFragmentSpreadsRule = BE;
    var ro = he(),
      Om = W(),
      Bc = ae(),
      Sm = fs(),
      $E = Tr();
    function BE(e) {
      return {
        InlineFragment(t) {
          let r = e.getType(),
            n = e.getParentType();
          if (
            (0, Bc.isCompositeType)(r) &&
            (0, Bc.isCompositeType)(n) &&
            !(0, Sm.doTypesOverlap)(e.getSchema(), r, n)
          ) {
            let i = (0, ro.inspect)(n),
              s = (0, ro.inspect)(r);
            e.reportError(
              new Om.GraphQLError(
                `Fragment cannot be spread here as objects of type "${i}" can never be of type "${s}".`,
                { nodes: t }
              )
            );
          }
        },
        FragmentSpread(t) {
          let r = t.name.value,
            n = zE(e, r),
            i = e.getParentType();
          if (n && i && !(0, Sm.doTypesOverlap)(e.getSchema(), n, i)) {
            let s = (0, ro.inspect)(i),
              a = (0, ro.inspect)(n);
            e.reportError(
              new Om.GraphQLError(
                `Fragment "${r}" cannot be spread here as objects of type "${s}" can never be of type "${a}".`,
                { nodes: t }
              )
            );
          }
        },
      };
    }
    function zE(e, t) {
      let r = e.getFragment(t);
      if (r) {
        let n = (0, $E.typeFromAST)(e.getSchema(), r.typeCondition);
        if ((0, Bc.isCompositeType)(n)) return n;
      }
    }
  });
  var Hc = f((Yc) => {
    "use strict";
    Object.defineProperty(Yc, "__esModule", { value: !0 });
    Yc.PossibleTypeExtensionsRule = JE;
    var WE = Hr(),
      Tm = he(),
      _m = ct(),
      YE = Xr(),
      Am = W(),
      De = ue(),
      HE = jn(),
      ui = ae();
    function JE(e) {
      let t = e.getSchema(),
        r = Object.create(null);
      for (let i of e.getDocument().definitions)
        (0, HE.isTypeDefinitionNode)(i) && (r[i.name.value] = i);
      return {
        ScalarTypeExtension: n,
        ObjectTypeExtension: n,
        InterfaceTypeExtension: n,
        UnionTypeExtension: n,
        EnumTypeExtension: n,
        InputObjectTypeExtension: n,
      };
      function n(i) {
        let s = i.name.value,
          a = r[s],
          o = t == null ? void 0 : t.getType(s),
          u;
        if ((a ? (u = XE[a.kind]) : o && (u = ZE(o)), u)) {
          if (u !== i.kind) {
            let l = eN(i.kind);
            e.reportError(
              new Am.GraphQLError(`Cannot extend non-${l} type "${s}".`, {
                nodes: a ? [a, i] : i,
              })
            );
          }
        } else {
          let l = Object.keys(O(O({}, r), t == null ? void 0 : t.getTypeMap())),
            c = (0, YE.suggestionList)(s, l);
          e.reportError(
            new Am.GraphQLError(
              `Cannot extend type "${s}" because it is not defined.` +
                (0, WE.didYouMean)(c),
              { nodes: i.name }
            )
          );
        }
      }
    }
    var XE = {
      [De.Kind.SCALAR_TYPE_DEFINITION]: De.Kind.SCALAR_TYPE_EXTENSION,
      [De.Kind.OBJECT_TYPE_DEFINITION]: De.Kind.OBJECT_TYPE_EXTENSION,
      [De.Kind.INTERFACE_TYPE_DEFINITION]: De.Kind.INTERFACE_TYPE_EXTENSION,
      [De.Kind.UNION_TYPE_DEFINITION]: De.Kind.UNION_TYPE_EXTENSION,
      [De.Kind.ENUM_TYPE_DEFINITION]: De.Kind.ENUM_TYPE_EXTENSION,
      [De.Kind.INPUT_OBJECT_TYPE_DEFINITION]:
        De.Kind.INPUT_OBJECT_TYPE_EXTENSION,
    };
    function ZE(e) {
      if ((0, ui.isScalarType)(e)) return De.Kind.SCALAR_TYPE_EXTENSION;
      if ((0, ui.isObjectType)(e)) return De.Kind.OBJECT_TYPE_EXTENSION;
      if ((0, ui.isInterfaceType)(e)) return De.Kind.INTERFACE_TYPE_EXTENSION;
      if ((0, ui.isUnionType)(e)) return De.Kind.UNION_TYPE_EXTENSION;
      if ((0, ui.isEnumType)(e)) return De.Kind.ENUM_TYPE_EXTENSION;
      if ((0, ui.isInputObjectType)(e))
        return De.Kind.INPUT_OBJECT_TYPE_EXTENSION;
      (0, _m.invariant)(!1, "Unexpected type: " + (0, Tm.inspect)(e));
    }
    function eN(e) {
      switch (e) {
        case De.Kind.SCALAR_TYPE_EXTENSION:
          return "scalar";
        case De.Kind.OBJECT_TYPE_EXTENSION:
          return "object";
        case De.Kind.INTERFACE_TYPE_EXTENSION:
          return "interface";
        case De.Kind.UNION_TYPE_EXTENSION:
          return "union";
        case De.Kind.ENUM_TYPE_EXTENSION:
          return "enum";
        case De.Kind.INPUT_OBJECT_TYPE_EXTENSION:
          return "input object";
        default:
          (0, _m.invariant)(!1, "Unexpected kind: " + (0, Tm.inspect)(e));
      }
    }
  });
  var Xc = f((no) => {
    "use strict";
    Object.defineProperty(no, "__esModule", { value: !0 });
    no.ProvidedRequiredArgumentsOnDirectivesRule = Pm;
    no.ProvidedRequiredArgumentsRule = nN;
    var Em = he(),
      Nm = Jr(),
      Im = W(),
      jm = ue(),
      tN = kt(),
      Jc = ae(),
      rN = Nt();
    function nN(e) {
      return N(O({}, Pm(e)), {
        Field: {
          leave(t) {
            var r;
            let n = e.getFieldDef();
            if (!n) return !1;
            let i = new Set(
              (r = t.arguments) === null || r === void 0
                ? void 0
                : r.map((s) => s.name.value)
            );
            for (let s of n.args)
              if (!i.has(s.name) && (0, Jc.isRequiredArgument)(s)) {
                let a = (0, Em.inspect)(s.type);
                e.reportError(
                  new Im.GraphQLError(
                    `Field "${n.name}" argument "${s.name}" of type "${a}" is required, but it was not provided.`,
                    { nodes: t }
                  )
                );
              }
          },
        },
      });
    }
    function Pm(e) {
      var t;
      let r = Object.create(null),
        n = e.getSchema(),
        i =
          (t = n == null ? void 0 : n.getDirectives()) !== null && t !== void 0
            ? t
            : rN.specifiedDirectives;
      for (let o of i)
        r[o.name] = (0, Nm.keyMap)(
          o.args.filter(Jc.isRequiredArgument),
          (u) => u.name
        );
      let s = e.getDocument().definitions;
      for (let o of s)
        if (o.kind === jm.Kind.DIRECTIVE_DEFINITION) {
          var a;
          let u = (a = o.arguments) !== null && a !== void 0 ? a : [];
          r[o.name.value] = (0, Nm.keyMap)(u.filter(iN), (l) => l.name.value);
        }
      return {
        Directive: {
          leave(o) {
            let u = o.name.value,
              l = r[u];
            if (l) {
              var c;
              let d = (c = o.arguments) !== null && c !== void 0 ? c : [],
                p = new Set(d.map((m) => m.name.value));
              for (let [m, v] of Object.entries(l))
                if (!p.has(m)) {
                  let E = (0, Jc.isType)(v.type)
                    ? (0, Em.inspect)(v.type)
                    : (0, tN.print)(v.type);
                  e.reportError(
                    new Im.GraphQLError(
                      `Directive "@${u}" argument "${m}" of type "${E}" is required, but it was not provided.`,
                      { nodes: o }
                    )
                  );
                }
            }
          },
        },
      };
    }
    function iN(e) {
      return e.type.kind === jm.Kind.NON_NULL_TYPE && e.defaultValue == null;
    }
  });
  var ep = f((Zc) => {
    "use strict";
    Object.defineProperty(Zc, "__esModule", { value: !0 });
    Zc.ScalarLeafsRule = sN;
    var wm = he(),
      Dm = W(),
      Rm = ae();
    function sN(e) {
      return {
        Field(t) {
          let r = e.getType(),
            n = t.selectionSet;
          if (r) {
            if ((0, Rm.isLeafType)((0, Rm.getNamedType)(r))) {
              if (n) {
                let i = t.name.value,
                  s = (0, wm.inspect)(r);
                e.reportError(
                  new Dm.GraphQLError(
                    `Field "${i}" must not have a selection since type "${s}" has no subfields.`,
                    { nodes: n }
                  )
                );
              }
            } else if (!n) {
              let i = t.name.value,
                s = (0, wm.inspect)(r);
              e.reportError(
                new Dm.GraphQLError(
                  `Field "${i}" of type "${s}" must have a selection of subfields. Did you mean "${i} { ... }"?`,
                  { nodes: t }
                )
              );
            }
          }
        },
      };
    }
  });
  var rp = f((tp) => {
    "use strict";
    Object.defineProperty(tp, "__esModule", { value: !0 });
    tp.printPathArray = aN;
    function aN(e) {
      return e
        .map((t) => (typeof t == "number" ? "[" + t.toString() + "]" : "." + t))
        .join("");
    }
  });
  var Is = f((io) => {
    "use strict";
    Object.defineProperty(io, "__esModule", { value: !0 });
    io.addPath = oN;
    io.pathToArray = uN;
    function oN(e, t, r) {
      return { prev: e, key: t, typename: r };
    }
    function uN(e) {
      let t = [],
        r = e;
      for (; r; ) t.push(r.key), (r = r.prev);
      return t.reverse();
    }
  });
  var ip = f((np) => {
    "use strict";
    Object.defineProperty(np, "__esModule", { value: !0 });
    np.coerceInputValue = hN;
    var lN = Hr(),
      so = he(),
      cN = ct(),
      pN = Wa(),
      dN = gr(),
      qr = Is(),
      fN = rp(),
      yN = Xr(),
      Pn = W(),
      js = ae();
    function hN(e, t, r = mN) {
      return Ps(e, t, r, void 0);
    }
    function mN(e, t, r) {
      let n = "Invalid value " + (0, so.inspect)(t);
      throw (
        (e.length > 0 && (n += ` at "value${(0, fN.printPathArray)(e)}"`),
        (r.message = n + ": " + r.message),
        r)
      );
    }
    function Ps(e, t, r, n) {
      if ((0, js.isNonNullType)(t)) {
        if (e != null) return Ps(e, t.ofType, r, n);
        r(
          (0, qr.pathToArray)(n),
          e,
          new Pn.GraphQLError(
            `Expected non-nullable type "${(0, so.inspect)(t)}" not to be null.`
          )
        );
        return;
      }
      if (e == null) return null;
      if ((0, js.isListType)(t)) {
        let i = t.ofType;
        return (0, pN.isIterableObject)(e)
          ? Array.from(e, (s, a) => {
              let o = (0, qr.addPath)(n, a, void 0);
              return Ps(s, i, r, o);
            })
          : [Ps(e, i, r, n)];
      }
      if ((0, js.isInputObjectType)(t)) {
        if (!(0, dN.isObjectLike)(e)) {
          r(
            (0, qr.pathToArray)(n),
            e,
            new Pn.GraphQLError(`Expected type "${t.name}" to be an object.`)
          );
          return;
        }
        let i = {},
          s = t.getFields();
        for (let a of Object.values(s)) {
          let o = e[a.name];
          if (o === void 0) {
            if (a.defaultValue !== void 0) i[a.name] = a.defaultValue;
            else if ((0, js.isNonNullType)(a.type)) {
              let u = (0, so.inspect)(a.type);
              r(
                (0, qr.pathToArray)(n),
                e,
                new Pn.GraphQLError(
                  `Field "${a.name}" of required type "${u}" was not provided.`
                )
              );
            }
            continue;
          }
          i[a.name] = Ps(o, a.type, r, (0, qr.addPath)(n, a.name, t.name));
        }
        for (let a of Object.keys(e))
          if (!s[a]) {
            let o = (0, yN.suggestionList)(a, Object.keys(t.getFields()));
            r(
              (0, qr.pathToArray)(n),
              e,
              new Pn.GraphQLError(
                `Field "${a}" is not defined by type "${t.name}".` +
                  (0, lN.didYouMean)(o)
              )
            );
          }
        return i;
      }
      if ((0, js.isLeafType)(t)) {
        let i;
        try {
          i = t.parseValue(e);
        } catch (s) {
          s instanceof Pn.GraphQLError
            ? r((0, qr.pathToArray)(n), e, s)
            : r(
                (0, qr.pathToArray)(n),
                e,
                new Pn.GraphQLError(`Expected type "${t.name}". ` + s.message, {
                  originalError: s,
                })
              );
          return;
        }
        return (
          i === void 0 &&
            r(
              (0, qr.pathToArray)(n),
              e,
              new Pn.GraphQLError(`Expected type "${t.name}".`)
            ),
          i
        );
      }
      (0, cN.invariant)(!1, "Unexpected input type: " + (0, so.inspect)(t));
    }
  });
  var Ds = f((sp) => {
    "use strict";
    Object.defineProperty(sp, "__esModule", { value: !0 });
    sp.valueFromAST = ws;
    var gN = he(),
      vN = ct(),
      bN = Jr(),
      li = ue(),
      wn = ae();
    function ws(e, t, r) {
      if (!!e) {
        if (e.kind === li.Kind.VARIABLE) {
          let n = e.name.value;
          if (r == null || r[n] === void 0) return;
          let i = r[n];
          return i === null && (0, wn.isNonNullType)(t) ? void 0 : i;
        }
        if ((0, wn.isNonNullType)(t))
          return e.kind === li.Kind.NULL ? void 0 : ws(e, t.ofType, r);
        if (e.kind === li.Kind.NULL) return null;
        if ((0, wn.isListType)(t)) {
          let n = t.ofType;
          if (e.kind === li.Kind.LIST) {
            let s = [];
            for (let a of e.values)
              if (Lm(a, r)) {
                if ((0, wn.isNonNullType)(n)) return;
                s.push(null);
              } else {
                let o = ws(a, n, r);
                if (o === void 0) return;
                s.push(o);
              }
            return s;
          }
          let i = ws(e, n, r);
          return i === void 0 ? void 0 : [i];
        }
        if ((0, wn.isInputObjectType)(t)) {
          if (e.kind !== li.Kind.OBJECT) return;
          let n = Object.create(null),
            i = (0, bN.keyMap)(e.fields, (s) => s.name.value);
          for (let s of Object.values(t.getFields())) {
            let a = i[s.name];
            if (!a || Lm(a.value, r)) {
              if (s.defaultValue !== void 0) n[s.name] = s.defaultValue;
              else if ((0, wn.isNonNullType)(s.type)) return;
              continue;
            }
            let o = ws(a.value, s.type, r);
            if (o === void 0) return;
            n[s.name] = o;
          }
          return n;
        }
        if ((0, wn.isLeafType)(t)) {
          let n;
          try {
            n = t.parseLiteral(e, r);
          } catch (i) {
            return;
          }
          return n === void 0 ? void 0 : n;
        }
        (0, vN.invariant)(!1, "Unexpected input type: " + (0, gN.inspect)(t));
      }
    }
    function Lm(e, t) {
      return (
        e.kind === li.Kind.VARIABLE && (t == null || t[e.name.value] === void 0)
      );
    }
  });
  var di = f((Rs) => {
    "use strict";
    Object.defineProperty(Rs, "__esModule", { value: !0 });
    Rs.getArgumentValues = xm;
    Rs.getDirectiveValues = NN;
    Rs.getVariableValues = AN;
    var ci = he(),
      ON = Jr(),
      SN = rp(),
      Mr = W(),
      Fm = ue(),
      qm = kt(),
      pi = ae(),
      TN = ip(),
      _N = Tr(),
      Mm = Ds();
    function AN(e, t, r, n) {
      let i = [],
        s = n == null ? void 0 : n.maxErrors;
      try {
        let a = EN(e, t, r, (o) => {
          if (s != null && i.length >= s)
            throw new Mr.GraphQLError(
              "Too many errors processing variables, error limit reached. Execution aborted."
            );
          i.push(o);
        });
        if (i.length === 0) return { coerced: a };
      } catch (a) {
        i.push(a);
      }
      return { errors: i };
    }
    function EN(e, t, r, n) {
      let i = {};
      for (let s of t) {
        let a = s.variable.name.value,
          o = (0, _N.typeFromAST)(e, s.type);
        if (!(0, pi.isInputType)(o)) {
          let l = (0, qm.print)(s.type);
          n(
            new Mr.GraphQLError(
              `Variable "$${a}" expected value of type "${l}" which cannot be used as an input type.`,
              { nodes: s.type }
            )
          );
          continue;
        }
        if (!Cm(r, a)) {
          if (s.defaultValue) i[a] = (0, Mm.valueFromAST)(s.defaultValue, o);
          else if ((0, pi.isNonNullType)(o)) {
            let l = (0, ci.inspect)(o);
            n(
              new Mr.GraphQLError(
                `Variable "$${a}" of required type "${l}" was not provided.`,
                { nodes: s }
              )
            );
          }
          continue;
        }
        let u = r[a];
        if (u === null && (0, pi.isNonNullType)(o)) {
          let l = (0, ci.inspect)(o);
          n(
            new Mr.GraphQLError(
              `Variable "$${a}" of non-null type "${l}" must not be null.`,
              { nodes: s }
            )
          );
          continue;
        }
        i[a] = (0, TN.coerceInputValue)(u, o, (l, c, d) => {
          let p = `Variable "$${a}" got invalid value ` + (0, ci.inspect)(c);
          l.length > 0 && (p += ` at "${a}${(0, SN.printPathArray)(l)}"`),
            n(
              new Mr.GraphQLError(p + "; " + d.message, {
                nodes: s,
                originalError: d.originalError,
              })
            );
        });
      }
      return i;
    }
    function xm(e, t, r) {
      var n;
      let i = {},
        s = (n = t.arguments) !== null && n !== void 0 ? n : [],
        a = (0, ON.keyMap)(s, (o) => o.name.value);
      for (let o of e.args) {
        let u = o.name,
          l = o.type,
          c = a[u];
        if (!c) {
          if (o.defaultValue !== void 0) i[u] = o.defaultValue;
          else if ((0, pi.isNonNullType)(l))
            throw new Mr.GraphQLError(
              `Argument "${u}" of required type "${(0, ci.inspect)(
                l
              )}" was not provided.`,
              { nodes: t }
            );
          continue;
        }
        let d = c.value,
          p = d.kind === Fm.Kind.NULL;
        if (d.kind === Fm.Kind.VARIABLE) {
          let v = d.name.value;
          if (r == null || !Cm(r, v)) {
            if (o.defaultValue !== void 0) i[u] = o.defaultValue;
            else if ((0, pi.isNonNullType)(l))
              throw new Mr.GraphQLError(
                `Argument "${u}" of required type "${(0, ci.inspect)(
                  l
                )}" was provided the variable "$${v}" which was not provided a runtime value.`,
                { nodes: d }
              );
            continue;
          }
          p = r[v] == null;
        }
        if (p && (0, pi.isNonNullType)(l))
          throw new Mr.GraphQLError(
            `Argument "${u}" of non-null type "${(0, ci.inspect)(
              l
            )}" must not be null.`,
            { nodes: d }
          );
        let m = (0, Mm.valueFromAST)(d, l, r);
        if (m === void 0)
          throw new Mr.GraphQLError(
            `Argument "${u}" has invalid value ${(0, qm.print)(d)}.`,
            { nodes: d }
          );
        i[u] = m;
      }
      return i;
    }
    function NN(e, t, r) {
      var n;
      let i =
        (n = t.directives) === null || n === void 0
          ? void 0
          : n.find((s) => s.name.value === e.name);
      if (i) return xm(e, i, r);
    }
    function Cm(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }
  });
  var uo = f((oo) => {
    "use strict";
    Object.defineProperty(oo, "__esModule", { value: !0 });
    oo.collectFields = PN;
    oo.collectSubfields = wN;
    var ap = ue(),
      IN = ae(),
      km = Nt(),
      jN = Tr(),
      Gm = di();
    function PN(e, t, r, n, i) {
      let s = new Map();
      return ao(e, t, r, n, i, s, new Set()), s;
    }
    function wN(e, t, r, n, i) {
      let s = new Map(),
        a = new Set();
      for (let o of i) o.selectionSet && ao(e, t, r, n, o.selectionSet, s, a);
      return s;
    }
    function ao(e, t, r, n, i, s, a) {
      for (let o of i.selections)
        switch (o.kind) {
          case ap.Kind.FIELD: {
            if (!op(r, o)) continue;
            let u = DN(o),
              l = s.get(u);
            l !== void 0 ? l.push(o) : s.set(u, [o]);
            break;
          }
          case ap.Kind.INLINE_FRAGMENT: {
            if (!op(r, o) || !Qm(e, o, n)) continue;
            ao(e, t, r, n, o.selectionSet, s, a);
            break;
          }
          case ap.Kind.FRAGMENT_SPREAD: {
            let u = o.name.value;
            if (a.has(u) || !op(r, o)) continue;
            a.add(u);
            let l = t[u];
            if (!l || !Qm(e, l, n)) continue;
            ao(e, t, r, n, l.selectionSet, s, a);
            break;
          }
        }
    }
    function op(e, t) {
      let r = (0, Gm.getDirectiveValues)(km.GraphQLSkipDirective, t, e);
      if ((r == null ? void 0 : r.if) === !0) return !1;
      let n = (0, Gm.getDirectiveValues)(km.GraphQLIncludeDirective, t, e);
      return (n == null ? void 0 : n.if) !== !1;
    }
    function Qm(e, t, r) {
      let n = t.typeCondition;
      if (!n) return !0;
      let i = (0, jN.typeFromAST)(e, n);
      return i === r ? !0 : (0, IN.isAbstractType)(i) ? e.isSubType(i, r) : !1;
    }
    function DN(e) {
      return e.alias ? e.alias.value : e.name.value;
    }
  });
  var lp = f((up) => {
    "use strict";
    Object.defineProperty(up, "__esModule", { value: !0 });
    up.SingleFieldSubscriptionsRule = FN;
    var Um = W(),
      RN = ue(),
      LN = uo();
    function FN(e) {
      return {
        OperationDefinition(t) {
          if (t.operation === "subscription") {
            let r = e.getSchema(),
              n = r.getSubscriptionType();
            if (n) {
              let i = t.name ? t.name.value : null,
                s = Object.create(null),
                a = e.getDocument(),
                o = Object.create(null);
              for (let l of a.definitions)
                l.kind === RN.Kind.FRAGMENT_DEFINITION && (o[l.name.value] = l);
              let u = (0, LN.collectFields)(r, o, s, n, t.selectionSet);
              if (u.size > 1) {
                let d = [...u.values()].slice(1).flat();
                e.reportError(
                  new Um.GraphQLError(
                    i != null
                      ? `Subscription "${i}" must select only one top level field.`
                      : "Anonymous Subscription must select only one top level field.",
                    { nodes: d }
                  )
                );
              }
              for (let l of u.values())
                l[0].name.value.startsWith("__") &&
                  e.reportError(
                    new Um.GraphQLError(
                      i != null
                        ? `Subscription "${i}" must not select an introspection top level field.`
                        : "Anonymous Subscription must not select an introspection top level field.",
                      { nodes: l }
                    )
                  );
            }
          }
        },
      };
    }
  });
  var lo = f((cp) => {
    "use strict";
    Object.defineProperty(cp, "__esModule", { value: !0 });
    cp.groupBy = qN;
    function qN(e, t) {
      let r = new Map();
      for (let n of e) {
        let i = t(n),
          s = r.get(i);
        s === void 0 ? r.set(i, [n]) : s.push(n);
      }
      return r;
    }
  });
  var dp = f((pp) => {
    "use strict";
    Object.defineProperty(pp, "__esModule", { value: !0 });
    pp.UniqueArgumentDefinitionNamesRule = CN;
    var MN = lo(),
      xN = W();
    function CN(e) {
      return {
        DirectiveDefinition(n) {
          var i;
          let s = (i = n.arguments) !== null && i !== void 0 ? i : [];
          return r(`@${n.name.value}`, s);
        },
        InterfaceTypeDefinition: t,
        InterfaceTypeExtension: t,
        ObjectTypeDefinition: t,
        ObjectTypeExtension: t,
      };
      function t(n) {
        var i;
        let s = n.name.value,
          a = (i = n.fields) !== null && i !== void 0 ? i : [];
        for (let u of a) {
          var o;
          let l = u.name.value,
            c = (o = u.arguments) !== null && o !== void 0 ? o : [];
          r(`${s}.${l}`, c);
        }
        return !1;
      }
      function r(n, i) {
        let s = (0, MN.groupBy)(i, (a) => a.name.value);
        for (let [a, o] of s)
          o.length > 1 &&
            e.reportError(
              new xN.GraphQLError(
                `Argument "${n}(${a}:)" can only be defined once.`,
                { nodes: o.map((u) => u.name) }
              )
            );
        return !1;
      }
    }
  });
  var yp = f((fp) => {
    "use strict";
    Object.defineProperty(fp, "__esModule", { value: !0 });
    fp.UniqueArgumentNamesRule = QN;
    var kN = lo(),
      GN = W();
    function QN(e) {
      return { Field: t, Directive: t };
      function t(r) {
        var n;
        let i = (n = r.arguments) !== null && n !== void 0 ? n : [],
          s = (0, kN.groupBy)(i, (a) => a.name.value);
        for (let [a, o] of s)
          o.length > 1 &&
            e.reportError(
              new GN.GraphQLError(
                `There can be only one argument named "${a}".`,
                { nodes: o.map((u) => u.name) }
              )
            );
      }
    }
  });
  var mp = f((hp) => {
    "use strict";
    Object.defineProperty(hp, "__esModule", { value: !0 });
    hp.UniqueDirectiveNamesRule = UN;
    var Vm = W();
    function UN(e) {
      let t = Object.create(null),
        r = e.getSchema();
      return {
        DirectiveDefinition(n) {
          let i = n.name.value;
          if (r != null && r.getDirective(i)) {
            e.reportError(
              new Vm.GraphQLError(
                `Directive "@${i}" already exists in the schema. It cannot be redefined.`,
                { nodes: n.name }
              )
            );
            return;
          }
          return (
            t[i]
              ? e.reportError(
                  new Vm.GraphQLError(
                    `There can be only one directive named "@${i}".`,
                    { nodes: [t[i], n.name] }
                  )
                )
              : (t[i] = n.name),
            !1
          );
        },
      };
    }
  });
  var bp = f((vp) => {
    "use strict";
    Object.defineProperty(vp, "__esModule", { value: !0 });
    vp.UniqueDirectivesPerLocationRule = $N;
    var VN = W(),
      gp = ue(),
      Km = jn(),
      KN = Nt();
    function $N(e) {
      let t = Object.create(null),
        r = e.getSchema(),
        n = r ? r.getDirectives() : KN.specifiedDirectives;
      for (let o of n) t[o.name] = !o.isRepeatable;
      let i = e.getDocument().definitions;
      for (let o of i)
        o.kind === gp.Kind.DIRECTIVE_DEFINITION &&
          (t[o.name.value] = !o.repeatable);
      let s = Object.create(null),
        a = Object.create(null);
      return {
        enter(o) {
          if (!("directives" in o) || !o.directives) return;
          let u;
          if (
            o.kind === gp.Kind.SCHEMA_DEFINITION ||
            o.kind === gp.Kind.SCHEMA_EXTENSION
          )
            u = s;
          else if (
            (0, Km.isTypeDefinitionNode)(o) ||
            (0, Km.isTypeExtensionNode)(o)
          ) {
            let l = o.name.value;
            (u = a[l]), u === void 0 && (a[l] = u = Object.create(null));
          } else u = Object.create(null);
          for (let l of o.directives) {
            let c = l.name.value;
            t[c] &&
              (u[c]
                ? e.reportError(
                    new VN.GraphQLError(
                      `The directive "@${c}" can only be used once at this location.`,
                      { nodes: [u[c], l] }
                    )
                  )
                : (u[c] = l));
          }
        },
      };
    }
  });
  var Sp = f((Op) => {
    "use strict";
    Object.defineProperty(Op, "__esModule", { value: !0 });
    Op.UniqueEnumValueNamesRule = zN;
    var $m = W(),
      BN = ae();
    function zN(e) {
      let t = e.getSchema(),
        r = t ? t.getTypeMap() : Object.create(null),
        n = Object.create(null);
      return { EnumTypeDefinition: i, EnumTypeExtension: i };
      function i(s) {
        var a;
        let o = s.name.value;
        n[o] || (n[o] = Object.create(null));
        let u = (a = s.values) !== null && a !== void 0 ? a : [],
          l = n[o];
        for (let c of u) {
          let d = c.name.value,
            p = r[o];
          (0, BN.isEnumType)(p) && p.getValue(d)
            ? e.reportError(
                new $m.GraphQLError(
                  `Enum value "${o}.${d}" already exists in the schema. It cannot also be defined in this type extension.`,
                  { nodes: c.name }
                )
              )
            : l[d]
            ? e.reportError(
                new $m.GraphQLError(
                  `Enum value "${o}.${d}" can only be defined once.`,
                  { nodes: [l[d], c.name] }
                )
              )
            : (l[d] = c.name);
        }
        return !1;
      }
    }
  });
  var Ap = f((_p) => {
    "use strict";
    Object.defineProperty(_p, "__esModule", { value: !0 });
    _p.UniqueFieldDefinitionNamesRule = WN;
    var Bm = W(),
      Tp = ae();
    function WN(e) {
      let t = e.getSchema(),
        r = t ? t.getTypeMap() : Object.create(null),
        n = Object.create(null);
      return {
        InputObjectTypeDefinition: i,
        InputObjectTypeExtension: i,
        InterfaceTypeDefinition: i,
        InterfaceTypeExtension: i,
        ObjectTypeDefinition: i,
        ObjectTypeExtension: i,
      };
      function i(s) {
        var a;
        let o = s.name.value;
        n[o] || (n[o] = Object.create(null));
        let u = (a = s.fields) !== null && a !== void 0 ? a : [],
          l = n[o];
        for (let c of u) {
          let d = c.name.value;
          YN(r[o], d)
            ? e.reportError(
                new Bm.GraphQLError(
                  `Field "${o}.${d}" already exists in the schema. It cannot also be defined in this type extension.`,
                  { nodes: c.name }
                )
              )
            : l[d]
            ? e.reportError(
                new Bm.GraphQLError(
                  `Field "${o}.${d}" can only be defined once.`,
                  { nodes: [l[d], c.name] }
                )
              )
            : (l[d] = c.name);
        }
        return !1;
      }
    }
    function YN(e, t) {
      return (0, Tp.isObjectType)(e) ||
        (0, Tp.isInterfaceType)(e) ||
        (0, Tp.isInputObjectType)(e)
        ? e.getFields()[t] != null
        : !1;
    }
  });
  var Np = f((Ep) => {
    "use strict";
    Object.defineProperty(Ep, "__esModule", { value: !0 });
    Ep.UniqueFragmentNamesRule = JN;
    var HN = W();
    function JN(e) {
      let t = Object.create(null);
      return {
        OperationDefinition: () => !1,
        FragmentDefinition(r) {
          let n = r.name.value;
          return (
            t[n]
              ? e.reportError(
                  new HN.GraphQLError(
                    `There can be only one fragment named "${n}".`,
                    { nodes: [t[n], r.name] }
                  )
                )
              : (t[n] = r.name),
            !1
          );
        },
      };
    }
  });
  var jp = f((Ip) => {
    "use strict";
    Object.defineProperty(Ip, "__esModule", { value: !0 });
    Ip.UniqueInputFieldNamesRule = eI;
    var XN = ct(),
      ZN = W();
    function eI(e) {
      let t = [],
        r = Object.create(null);
      return {
        ObjectValue: {
          enter() {
            t.push(r), (r = Object.create(null));
          },
          leave() {
            let n = t.pop();
            n || (0, XN.invariant)(!1), (r = n);
          },
        },
        ObjectField(n) {
          let i = n.name.value;
          r[i]
            ? e.reportError(
                new ZN.GraphQLError(
                  `There can be only one input field named "${i}".`,
                  { nodes: [r[i], n.name] }
                )
              )
            : (r[i] = n.name);
        },
      };
    }
  });
  var wp = f((Pp) => {
    "use strict";
    Object.defineProperty(Pp, "__esModule", { value: !0 });
    Pp.UniqueOperationNamesRule = rI;
    var tI = W();
    function rI(e) {
      let t = Object.create(null);
      return {
        OperationDefinition(r) {
          let n = r.name;
          return (
            n &&
              (t[n.value]
                ? e.reportError(
                    new tI.GraphQLError(
                      `There can be only one operation named "${n.value}".`,
                      { nodes: [t[n.value], n] }
                    )
                  )
                : (t[n.value] = n)),
            !1
          );
        },
        FragmentDefinition: () => !1,
      };
    }
  });
  var Rp = f((Dp) => {
    "use strict";
    Object.defineProperty(Dp, "__esModule", { value: !0 });
    Dp.UniqueOperationTypesRule = nI;
    var zm = W();
    function nI(e) {
      let t = e.getSchema(),
        r = Object.create(null),
        n = t
          ? {
              query: t.getQueryType(),
              mutation: t.getMutationType(),
              subscription: t.getSubscriptionType(),
            }
          : {};
      return { SchemaDefinition: i, SchemaExtension: i };
      function i(s) {
        var a;
        let o = (a = s.operationTypes) !== null && a !== void 0 ? a : [];
        for (let u of o) {
          let l = u.operation,
            c = r[l];
          n[l]
            ? e.reportError(
                new zm.GraphQLError(
                  `Type for ${l} already defined in the schema. It cannot be redefined.`,
                  { nodes: u }
                )
              )
            : c
            ? e.reportError(
                new zm.GraphQLError(
                  `There can be only one ${l} type in schema.`,
                  { nodes: [c, u] }
                )
              )
            : (r[l] = u);
        }
        return !1;
      }
    }
  });
  var Fp = f((Lp) => {
    "use strict";
    Object.defineProperty(Lp, "__esModule", { value: !0 });
    Lp.UniqueTypeNamesRule = iI;
    var Wm = W();
    function iI(e) {
      let t = Object.create(null),
        r = e.getSchema();
      return {
        ScalarTypeDefinition: n,
        ObjectTypeDefinition: n,
        InterfaceTypeDefinition: n,
        UnionTypeDefinition: n,
        EnumTypeDefinition: n,
        InputObjectTypeDefinition: n,
      };
      function n(i) {
        let s = i.name.value;
        if (r != null && r.getType(s)) {
          e.reportError(
            new Wm.GraphQLError(
              `Type "${s}" already exists in the schema. It cannot also be defined in this type definition.`,
              { nodes: i.name }
            )
          );
          return;
        }
        return (
          t[s]
            ? e.reportError(
                new Wm.GraphQLError(
                  `There can be only one type named "${s}".`,
                  { nodes: [t[s], i.name] }
                )
              )
            : (t[s] = i.name),
          !1
        );
      }
    }
  });
  var Mp = f((qp) => {
    "use strict";
    Object.defineProperty(qp, "__esModule", { value: !0 });
    qp.UniqueVariableNamesRule = oI;
    var sI = lo(),
      aI = W();
    function oI(e) {
      return {
        OperationDefinition(t) {
          var r;
          let n = (r = t.variableDefinitions) !== null && r !== void 0 ? r : [],
            i = (0, sI.groupBy)(n, (s) => s.variable.name.value);
          for (let [s, a] of i)
            a.length > 1 &&
              e.reportError(
                new aI.GraphQLError(
                  `There can be only one variable named "$${s}".`,
                  { nodes: a.map((o) => o.variable.name) }
                )
              );
        },
      };
    }
  });
  var Cp = f((xp) => {
    "use strict";
    Object.defineProperty(xp, "__esModule", { value: !0 });
    xp.ValuesOfCorrectTypeRule = pI;
    var uI = Hr(),
      Ls = he(),
      lI = Jr(),
      cI = Xr(),
      Dn = W(),
      co = kt(),
      _r = ae();
    function pI(e) {
      return {
        ListValue(t) {
          let r = (0, _r.getNullableType)(e.getParentInputType());
          if (!(0, _r.isListType)(r)) return Rn(e, t), !1;
        },
        ObjectValue(t) {
          let r = (0, _r.getNamedType)(e.getInputType());
          if (!(0, _r.isInputObjectType)(r)) return Rn(e, t), !1;
          let n = (0, lI.keyMap)(t.fields, (i) => i.name.value);
          for (let i of Object.values(r.getFields()))
            if (!n[i.name] && (0, _r.isRequiredInputField)(i)) {
              let a = (0, Ls.inspect)(i.type);
              e.reportError(
                new Dn.GraphQLError(
                  `Field "${r.name}.${i.name}" of required type "${a}" was not provided.`,
                  { nodes: t }
                )
              );
            }
        },
        ObjectField(t) {
          let r = (0, _r.getNamedType)(e.getParentInputType());
          if (!e.getInputType() && (0, _r.isInputObjectType)(r)) {
            let i = (0, cI.suggestionList)(
              t.name.value,
              Object.keys(r.getFields())
            );
            e.reportError(
              new Dn.GraphQLError(
                `Field "${t.name.value}" is not defined by type "${r.name}".` +
                  (0, uI.didYouMean)(i),
                { nodes: t }
              )
            );
          }
        },
        NullValue(t) {
          let r = e.getInputType();
          (0, _r.isNonNullType)(r) &&
            e.reportError(
              new Dn.GraphQLError(
                `Expected value of type "${(0, Ls.inspect)(r)}", found ${(0,
                co.print)(t)}.`,
                { nodes: t }
              )
            );
        },
        EnumValue: (t) => Rn(e, t),
        IntValue: (t) => Rn(e, t),
        FloatValue: (t) => Rn(e, t),
        StringValue: (t) => Rn(e, t),
        BooleanValue: (t) => Rn(e, t),
      };
    }
    function Rn(e, t) {
      let r = e.getInputType();
      if (!r) return;
      let n = (0, _r.getNamedType)(r);
      if (!(0, _r.isLeafType)(n)) {
        let i = (0, Ls.inspect)(r);
        e.reportError(
          new Dn.GraphQLError(
            `Expected value of type "${i}", found ${(0, co.print)(t)}.`,
            { nodes: t }
          )
        );
        return;
      }
      try {
        if (n.parseLiteral(t, void 0) === void 0) {
          let s = (0, Ls.inspect)(r);
          e.reportError(
            new Dn.GraphQLError(
              `Expected value of type "${s}", found ${(0, co.print)(t)}.`,
              { nodes: t }
            )
          );
        }
      } catch (i) {
        let s = (0, Ls.inspect)(r);
        i instanceof Dn.GraphQLError
          ? e.reportError(i)
          : e.reportError(
              new Dn.GraphQLError(
                `Expected value of type "${s}", found ${(0, co.print)(t)}; ` +
                  i.message,
                { nodes: t, originalError: i }
              )
            );
      }
    }
  });
  var Gp = f((kp) => {
    "use strict";
    Object.defineProperty(kp, "__esModule", { value: !0 });
    kp.VariablesAreInputTypesRule = mI;
    var dI = W(),
      fI = kt(),
      yI = ae(),
      hI = Tr();
    function mI(e) {
      return {
        VariableDefinition(t) {
          let r = (0, hI.typeFromAST)(e.getSchema(), t.type);
          if (r !== void 0 && !(0, yI.isInputType)(r)) {
            let n = t.variable.name.value,
              i = (0, fI.print)(t.type);
            e.reportError(
              new dI.GraphQLError(
                `Variable "$${n}" cannot be non-input type "${i}".`,
                { nodes: t.type }
              )
            );
          }
        },
      };
    }
  });
  var Up = f((Qp) => {
    "use strict";
    Object.defineProperty(Qp, "__esModule", { value: !0 });
    Qp.VariablesInAllowedPositionRule = OI;
    var Ym = he(),
      gI = W(),
      vI = ue(),
      Hm = ae(),
      Jm = fs(),
      bI = Tr();
    function OI(e) {
      let t = Object.create(null);
      return {
        OperationDefinition: {
          enter() {
            t = Object.create(null);
          },
          leave(r) {
            let n = e.getRecursiveVariableUsages(r);
            for (let { node: i, type: s, defaultValue: a } of n) {
              let o = i.name.value,
                u = t[o];
              if (u && s) {
                let l = e.getSchema(),
                  c = (0, bI.typeFromAST)(l, u.type);
                if (c && !SI(l, c, u.defaultValue, s, a)) {
                  let d = (0, Ym.inspect)(c),
                    p = (0, Ym.inspect)(s);
                  e.reportError(
                    new gI.GraphQLError(
                      `Variable "$${o}" of type "${d}" used in position expecting type "${p}".`,
                      { nodes: [u, i] }
                    )
                  );
                }
              }
            }
          },
        },
        VariableDefinition(r) {
          t[r.variable.name.value] = r;
        },
      };
    }
    function SI(e, t, r, n, i) {
      if ((0, Hm.isNonNullType)(n) && !(0, Hm.isNonNullType)(t)) {
        if (!(r != null && r.kind !== vI.Kind.NULL) && !(i !== void 0))
          return !1;
        let o = n.ofType;
        return (0, Jm.isTypeSubTypeOf)(e, t, o);
      }
      return (0, Jm.isTypeSubTypeOf)(e, t, n);
    }
  });
  var Vp = f((fi) => {
    "use strict";
    Object.defineProperty(fi, "__esModule", { value: !0 });
    fi.specifiedSDLRules = fi.specifiedRules = void 0;
    var TI = pc(),
      _I = fc(),
      AI = hc(),
      Xm = mc(),
      Zm = Oc(),
      EI = Tc(),
      eg = Ec(),
      NI = Ic(),
      II = Pc(),
      jI = Dc(),
      PI = Lc(),
      wI = qc(),
      DI = xc(),
      RI = $c(),
      LI = Wc(),
      FI = Hc(),
      tg = Xc(),
      qI = ep(),
      MI = lp(),
      xI = dp(),
      rg = yp(),
      CI = mp(),
      ng = bp(),
      kI = Sp(),
      GI = Ap(),
      QI = Np(),
      ig = jp(),
      UI = wp(),
      VI = Rp(),
      KI = Fp(),
      $I = Mp(),
      BI = Cp(),
      zI = Gp(),
      WI = Up(),
      YI = Object.freeze([
        TI.ExecutableDefinitionsRule,
        UI.UniqueOperationNamesRule,
        NI.LoneAnonymousOperationRule,
        MI.SingleFieldSubscriptionsRule,
        eg.KnownTypeNamesRule,
        AI.FragmentsOnCompositeTypesRule,
        zI.VariablesAreInputTypesRule,
        qI.ScalarLeafsRule,
        _I.FieldsOnCorrectTypeRule,
        QI.UniqueFragmentNamesRule,
        EI.KnownFragmentNamesRule,
        wI.NoUnusedFragmentsRule,
        LI.PossibleFragmentSpreadsRule,
        jI.NoFragmentCyclesRule,
        $I.UniqueVariableNamesRule,
        PI.NoUndefinedVariablesRule,
        DI.NoUnusedVariablesRule,
        Zm.KnownDirectivesRule,
        ng.UniqueDirectivesPerLocationRule,
        Xm.KnownArgumentNamesRule,
        rg.UniqueArgumentNamesRule,
        BI.ValuesOfCorrectTypeRule,
        tg.ProvidedRequiredArgumentsRule,
        WI.VariablesInAllowedPositionRule,
        RI.OverlappingFieldsCanBeMergedRule,
        ig.UniqueInputFieldNamesRule,
      ]);
    fi.specifiedRules = YI;
    var HI = Object.freeze([
      II.LoneSchemaDefinitionRule,
      VI.UniqueOperationTypesRule,
      KI.UniqueTypeNamesRule,
      kI.UniqueEnumValueNamesRule,
      GI.UniqueFieldDefinitionNamesRule,
      xI.UniqueArgumentDefinitionNamesRule,
      CI.UniqueDirectiveNamesRule,
      eg.KnownTypeNamesRule,
      Zm.KnownDirectivesRule,
      ng.UniqueDirectivesPerLocationRule,
      FI.PossibleTypeExtensionsRule,
      Xm.KnownArgumentNamesOnDirectivesRule,
      rg.UniqueArgumentNamesRule,
      ig.UniqueInputFieldNamesRule,
      tg.ProvidedRequiredArgumentsOnDirectivesRule,
    ]);
    fi.specifiedSDLRules = HI;
  });
  var Kp = f((rn) => {
    "use strict";
    Object.defineProperty(rn, "__esModule", { value: !0 });
    rn.ValidationContext =
      rn.SDLValidationContext =
      rn.ASTValidationContext =
        void 0;
    var sg = ue(),
      JI = bn(),
      ag = Ja(),
      po = class {
        constructor(t, r) {
          (this._ast = t),
            (this._fragments = void 0),
            (this._fragmentSpreads = new Map()),
            (this._recursivelyReferencedFragments = new Map()),
            (this._onError = r);
        }
        get [Symbol.toStringTag]() {
          return "ASTValidationContext";
        }
        reportError(t) {
          this._onError(t);
        }
        getDocument() {
          return this._ast;
        }
        getFragment(t) {
          let r;
          if (this._fragments) r = this._fragments;
          else {
            r = Object.create(null);
            for (let n of this.getDocument().definitions)
              n.kind === sg.Kind.FRAGMENT_DEFINITION && (r[n.name.value] = n);
            this._fragments = r;
          }
          return r[t];
        }
        getFragmentSpreads(t) {
          let r = this._fragmentSpreads.get(t);
          if (!r) {
            r = [];
            let n = [t],
              i;
            for (; (i = n.pop()); )
              for (let s of i.selections)
                s.kind === sg.Kind.FRAGMENT_SPREAD
                  ? r.push(s)
                  : s.selectionSet && n.push(s.selectionSet);
            this._fragmentSpreads.set(t, r);
          }
          return r;
        }
        getRecursivelyReferencedFragments(t) {
          let r = this._recursivelyReferencedFragments.get(t);
          if (!r) {
            r = [];
            let n = Object.create(null),
              i = [t.selectionSet],
              s;
            for (; (s = i.pop()); )
              for (let a of this.getFragmentSpreads(s)) {
                let o = a.name.value;
                if (n[o] !== !0) {
                  n[o] = !0;
                  let u = this.getFragment(o);
                  u && (r.push(u), i.push(u.selectionSet));
                }
              }
            this._recursivelyReferencedFragments.set(t, r);
          }
          return r;
        }
      };
    rn.ASTValidationContext = po;
    var og = class extends po {
      constructor(t, r, n) {
        super(t, n);
        this._schema = r;
      }
      get [Symbol.toStringTag]() {
        return "SDLValidationContext";
      }
      getSchema() {
        return this._schema;
      }
    };
    rn.SDLValidationContext = og;
    var ug = class extends po {
      constructor(t, r, n, i) {
        super(r, i);
        (this._schema = t),
          (this._typeInfo = n),
          (this._variableUsages = new Map()),
          (this._recursiveVariableUsages = new Map());
      }
      get [Symbol.toStringTag]() {
        return "ValidationContext";
      }
      getSchema() {
        return this._schema;
      }
      getVariableUsages(t) {
        let r = this._variableUsages.get(t);
        if (!r) {
          let n = [],
            i = new ag.TypeInfo(this._schema);
          (0, JI.visit)(
            t,
            (0, ag.visitWithTypeInfo)(i, {
              VariableDefinition: () => !1,
              Variable(s) {
                n.push({
                  node: s,
                  type: i.getInputType(),
                  defaultValue: i.getDefaultValue(),
                });
              },
            })
          ),
            (r = n),
            this._variableUsages.set(t, r);
        }
        return r;
      }
      getRecursiveVariableUsages(t) {
        let r = this._recursiveVariableUsages.get(t);
        if (!r) {
          r = this.getVariableUsages(t);
          for (let n of this.getRecursivelyReferencedFragments(t))
            r = r.concat(this.getVariableUsages(n));
          this._recursiveVariableUsages.set(t, r);
        }
        return r;
      }
      getType() {
        return this._typeInfo.getType();
      }
      getParentType() {
        return this._typeInfo.getParentType();
      }
      getInputType() {
        return this._typeInfo.getInputType();
      }
      getParentInputType() {
        return this._typeInfo.getParentInputType();
      }
      getFieldDef() {
        return this._typeInfo.getFieldDef();
      }
      getDirective() {
        return this._typeInfo.getDirective();
      }
      getArgument() {
        return this._typeInfo.getArgument();
      }
      getEnumValue() {
        return this._typeInfo.getEnumValue();
      }
    };
    rn.ValidationContext = ug;
  });
  var Fs = f((yi) => {
    "use strict";
    Object.defineProperty(yi, "__esModule", { value: !0 });
    yi.assertValidSDL = rj;
    yi.assertValidSDLExtension = nj;
    yi.validate = tj;
    yi.validateSDL = $p;
    var XI = Tt(),
      ZI = W(),
      fo = bn(),
      ej = _s(),
      lg = Ja(),
      cg = Vp(),
      pg = Kp();
    function tj(e, t, r = cg.specifiedRules, n, i = new lg.TypeInfo(e)) {
      var s;
      let a =
        (s = n == null ? void 0 : n.maxErrors) !== null && s !== void 0
          ? s
          : 100;
      t || (0, XI.devAssert)(!1, "Must provide document."),
        (0, ej.assertValidSchema)(e);
      let o = Object.freeze({}),
        u = [],
        l = new pg.ValidationContext(e, t, i, (d) => {
          if (u.length >= a)
            throw (
              (u.push(
                new ZI.GraphQLError(
                  "Too many validation errors, error limit reached. Validation aborted."
                )
              ),
              o)
            );
          u.push(d);
        }),
        c = (0, fo.visitInParallel)(r.map((d) => d(l)));
      try {
        (0, fo.visit)(t, (0, lg.visitWithTypeInfo)(i, c));
      } catch (d) {
        if (d !== o) throw d;
      }
      return u;
    }
    function $p(e, t, r = cg.specifiedSDLRules) {
      let n = [],
        i = new pg.SDLValidationContext(e, t, (a) => {
          n.push(a);
        }),
        s = r.map((a) => a(i));
      return (0, fo.visit)(e, (0, fo.visitInParallel)(s)), n;
    }
    function rj(e) {
      let t = $p(e);
      if (t.length !== 0)
        throw new Error(
          t.map((r) => r.message).join(`

`)
        );
    }
    function nj(e, t) {
      let r = $p(e, t);
      if (r.length !== 0)
        throw new Error(
          r.map((n) => n.message).join(`

`)
        );
    }
  });
  var dg = f((Bp) => {
    "use strict";
    Object.defineProperty(Bp, "__esModule", { value: !0 });
    Bp.memoize3 = ij;
    function ij(e) {
      let t;
      return function (n, i, s) {
        t === void 0 && (t = new WeakMap());
        let a = t.get(n);
        a === void 0 && ((a = new WeakMap()), t.set(n, a));
        let o = a.get(i);
        o === void 0 && ((o = new WeakMap()), a.set(i, o));
        let u = o.get(s);
        return u === void 0 && ((u = e(n, i, s)), o.set(s, u)), u;
      };
    }
  });
  var fg = f((zp) => {
    "use strict";
    Object.defineProperty(zp, "__esModule", { value: !0 });
    zp.promiseForObject = sj;
    function sj(e) {
      return Promise.all(Object.values(e)).then((t) => {
        let r = Object.create(null);
        for (let [n, i] of Object.keys(e).entries()) r[i] = t[n];
        return r;
      });
    }
  });
  var yg = f((Wp) => {
    "use strict";
    Object.defineProperty(Wp, "__esModule", { value: !0 });
    Wp.promiseReduce = oj;
    var aj = Ta();
    function oj(e, t, r) {
      let n = r;
      for (let i of e)
        n = (0, aj.isPromise)(n) ? n.then((s) => t(s, i)) : t(n, i);
      return n;
    }
  });
  var mg = f((Yp) => {
    "use strict";
    Object.defineProperty(Yp, "__esModule", { value: !0 });
    Yp.toError = lj;
    var uj = he();
    function lj(e) {
      return e instanceof Error ? e : new hg(e);
    }
    var hg = class extends Error {
      constructor(t) {
        super("Unexpected error value: " + (0, uj.inspect)(t));
        (this.name = "NonErrorThrown"), (this.thrownValue = t);
      }
    };
  });
  var yo = f((Hp) => {
    "use strict";
    Object.defineProperty(Hp, "__esModule", { value: !0 });
    Hp.locatedError = dj;
    var cj = mg(),
      pj = W();
    function dj(e, t, r) {
      var n;
      let i = (0, cj.toError)(e);
      return fj(i)
        ? i
        : new pj.GraphQLError(i.message, {
            nodes: (n = i.nodes) !== null && n !== void 0 ? n : t,
            source: i.source,
            positions: i.positions,
            path: r,
            originalError: i,
          });
    }
    function fj(e) {
      return Array.isArray(e.path);
    }
  });
  var Ms = f((Ht) => {
    "use strict";
    Object.defineProperty(Ht, "__esModule", { value: !0 });
    Ht.assertValidExecutionArguments = Sg;
    Ht.buildExecutionContext = Tg;
    Ht.buildResolveInfo = Ag;
    Ht.defaultTypeResolver = Ht.defaultFieldResolver = void 0;
    Ht.execute = Og;
    Ht.executeSync = Sj;
    Ht.getFieldDef = jg;
    var Jp = Tt(),
      Ln = he(),
      yj = ct(),
      hj = Wa(),
      Xp = gr(),
      dr = Ta(),
      mj = dg(),
      Fn = Is(),
      gj = fg(),
      vj = yg(),
      Yt = W(),
      ho = yo(),
      Zp = vr(),
      gg = ue(),
      nn = ae(),
      hi = zt(),
      bj = _s(),
      vg = uo(),
      bg = di(),
      Oj = (0, mj.memoize3)((e, t, r) =>
        (0, vg.collectSubfields)(e.schema, e.fragments, e.variableValues, t, r)
      );
    function Og(e) {
      arguments.length < 2 ||
        (0, Jp.devAssert)(
          !1,
          "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
        );
      let { schema: t, document: r, variableValues: n, rootValue: i } = e;
      Sg(t, r, n);
      let s = Tg(e);
      if (!("schema" in s)) return { errors: s };
      try {
        let { operation: a } = s,
          o = Tj(s, a, i);
        return (0, dr.isPromise)(o)
          ? o.then(
              (u) => mo(u, s.errors),
              (u) => (s.errors.push(u), mo(null, s.errors))
            )
          : mo(o, s.errors);
      } catch (a) {
        return s.errors.push(a), mo(null, s.errors);
      }
    }
    function Sj(e) {
      let t = Og(e);
      if ((0, dr.isPromise)(t))
        throw new Error("GraphQL execution failed to complete synchronously.");
      return t;
    }
    function mo(e, t) {
      return t.length === 0 ? { data: e } : { errors: t, data: e };
    }
    function Sg(e, t, r) {
      t || (0, Jp.devAssert)(!1, "Must provide document."),
        (0, bj.assertValidSchema)(e),
        r == null ||
          (0, Xp.isObjectLike)(r) ||
          (0, Jp.devAssert)(
            !1,
            "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided."
          );
    }
    function Tg(e) {
      var t, r;
      let {
          schema: n,
          document: i,
          rootValue: s,
          contextValue: a,
          variableValues: o,
          operationName: u,
          fieldResolver: l,
          typeResolver: c,
          subscribeFieldResolver: d,
        } = e,
        p,
        m = Object.create(null);
      for (let L of i.definitions)
        switch (L.kind) {
          case gg.Kind.OPERATION_DEFINITION:
            if (u == null) {
              if (p !== void 0)
                return [
                  new Yt.GraphQLError(
                    "Must provide operation name if query contains multiple operations."
                  ),
                ];
              p = L;
            } else
              ((t = L.name) === null || t === void 0 ? void 0 : t.value) ===
                u && (p = L);
            break;
          case gg.Kind.FRAGMENT_DEFINITION:
            m[L.name.value] = L;
            break;
          default:
        }
      if (!p)
        return u != null
          ? [new Yt.GraphQLError(`Unknown operation named "${u}".`)]
          : [new Yt.GraphQLError("Must provide an operation.")];
      let v = (r = p.variableDefinitions) !== null && r !== void 0 ? r : [],
        E = (0, bg.getVariableValues)(n, v, o != null ? o : {}, {
          maxErrors: 50,
        });
      return E.errors
        ? E.errors
        : {
            schema: n,
            fragments: m,
            rootValue: s,
            contextValue: a,
            operation: p,
            variableValues: E.coerced,
            fieldResolver: l != null ? l : td,
            typeResolver: c != null ? c : Ig,
            subscribeFieldResolver: d != null ? d : td,
            errors: [],
          };
    }
    function Tj(e, t, r) {
      let n = e.schema.getRootType(t.operation);
      if (n == null)
        throw new Yt.GraphQLError(
          `Schema is not configured to execute ${t.operation} operation.`,
          { nodes: t }
        );
      let i = (0, vg.collectFields)(
          e.schema,
          e.fragments,
          e.variableValues,
          n,
          t.selectionSet
        ),
        s = void 0;
      switch (t.operation) {
        case Zp.OperationTypeNode.QUERY:
          return go(e, n, r, s, i);
        case Zp.OperationTypeNode.MUTATION:
          return _j(e, n, r, s, i);
        case Zp.OperationTypeNode.SUBSCRIPTION:
          return go(e, n, r, s, i);
      }
    }
    function _j(e, t, r, n, i) {
      return (0, vj.promiseReduce)(
        i.entries(),
        (s, [a, o]) => {
          let u = (0, Fn.addPath)(n, a, t.name),
            l = _g(e, t, r, o, u);
          return l === void 0
            ? s
            : (0, dr.isPromise)(l)
            ? l.then((c) => ((s[a] = c), s))
            : ((s[a] = l), s);
        },
        Object.create(null)
      );
    }
    function go(e, t, r, n, i) {
      let s = Object.create(null),
        a = !1;
      for (let [o, u] of i.entries()) {
        let l = (0, Fn.addPath)(n, o, t.name),
          c = _g(e, t, r, u, l);
        c !== void 0 && ((s[o] = c), (0, dr.isPromise)(c) && (a = !0));
      }
      return a ? (0, gj.promiseForObject)(s) : s;
    }
    function _g(e, t, r, n, i) {
      var s;
      let a = jg(e.schema, t, n[0]);
      if (!a) return;
      let o = a.type,
        u = (s = a.resolve) !== null && s !== void 0 ? s : e.fieldResolver,
        l = Ag(e, a, n, t, i);
      try {
        let c = (0, bg.getArgumentValues)(a, n[0], e.variableValues),
          d = e.contextValue,
          p = u(r, c, d, l),
          m;
        return (
          (0, dr.isPromise)(p)
            ? (m = p.then((v) => qs(e, o, n, l, i, v)))
            : (m = qs(e, o, n, l, i, p)),
          (0, dr.isPromise)(m)
            ? m.then(void 0, (v) => {
                let E = (0, ho.locatedError)(v, n, (0, Fn.pathToArray)(i));
                return vo(E, o, e);
              })
            : m
        );
      } catch (c) {
        let d = (0, ho.locatedError)(c, n, (0, Fn.pathToArray)(i));
        return vo(d, o, e);
      }
    }
    function Ag(e, t, r, n, i) {
      return {
        fieldName: t.name,
        fieldNodes: r,
        returnType: t.type,
        parentType: n,
        path: i,
        schema: e.schema,
        fragments: e.fragments,
        rootValue: e.rootValue,
        operation: e.operation,
        variableValues: e.variableValues,
      };
    }
    function vo(e, t, r) {
      if ((0, nn.isNonNullType)(t)) throw e;
      return r.errors.push(e), null;
    }
    function qs(e, t, r, n, i, s) {
      if (s instanceof Error) throw s;
      if ((0, nn.isNonNullType)(t)) {
        let a = qs(e, t.ofType, r, n, i, s);
        if (a === null)
          throw new Error(
            `Cannot return null for non-nullable field ${n.parentType.name}.${n.fieldName}.`
          );
        return a;
      }
      if (s == null) return null;
      if ((0, nn.isListType)(t)) return Aj(e, t, r, n, i, s);
      if ((0, nn.isLeafType)(t)) return Ej(t, s);
      if ((0, nn.isAbstractType)(t)) return Nj(e, t, r, n, i, s);
      if ((0, nn.isObjectType)(t)) return ed(e, t, r, n, i, s);
      (0, yj.invariant)(
        !1,
        "Cannot complete value of unexpected output type: " + (0, Ln.inspect)(t)
      );
    }
    function Aj(e, t, r, n, i, s) {
      if (!(0, hj.isIterableObject)(s))
        throw new Yt.GraphQLError(
          `Expected Iterable, but did not find one for field "${n.parentType.name}.${n.fieldName}".`
        );
      let a = t.ofType,
        o = !1,
        u = Array.from(s, (l, c) => {
          let d = (0, Fn.addPath)(i, c, void 0);
          try {
            let p;
            return (
              (0, dr.isPromise)(l)
                ? (p = l.then((m) => qs(e, a, r, n, d, m)))
                : (p = qs(e, a, r, n, d, l)),
              (0, dr.isPromise)(p)
                ? ((o = !0),
                  p.then(void 0, (m) => {
                    let v = (0, ho.locatedError)(m, r, (0, Fn.pathToArray)(d));
                    return vo(v, a, e);
                  }))
                : p
            );
          } catch (p) {
            let m = (0, ho.locatedError)(p, r, (0, Fn.pathToArray)(d));
            return vo(m, a, e);
          }
        });
      return o ? Promise.all(u) : u;
    }
    function Ej(e, t) {
      let r = e.serialize(t);
      if (r == null)
        throw new Error(
          `Expected \`${(0, Ln.inspect)(e)}.serialize(${(0, Ln.inspect)(
            t
          )})\` to return non-nullable value, returned: ${(0, Ln.inspect)(r)}`
        );
      return r;
    }
    function Nj(e, t, r, n, i, s) {
      var a;
      let o = (a = t.resolveType) !== null && a !== void 0 ? a : e.typeResolver,
        u = e.contextValue,
        l = o(s, u, n, t);
      return (0, dr.isPromise)(l)
        ? l.then((c) => ed(e, Eg(c, e, t, r, n, s), r, n, i, s))
        : ed(e, Eg(l, e, t, r, n, s), r, n, i, s);
    }
    function Eg(e, t, r, n, i, s) {
      if (e == null)
        throw new Yt.GraphQLError(
          `Abstract type "${r.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}". Either the "${r.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,
          n
        );
      if ((0, nn.isObjectType)(e))
        throw new Yt.GraphQLError(
          "Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead."
        );
      if (typeof e != "string")
        throw new Yt.GraphQLError(
          `Abstract type "${
            r.name
          }" must resolve to an Object type at runtime for field "${
            i.parentType.name
          }.${i.fieldName}" with value ${(0, Ln.inspect)(s)}, received "${(0,
          Ln.inspect)(e)}".`
        );
      let a = t.schema.getType(e);
      if (a == null)
        throw new Yt.GraphQLError(
          `Abstract type "${r.name}" was resolved to a type "${e}" that does not exist inside the schema.`,
          { nodes: n }
        );
      if (!(0, nn.isObjectType)(a))
        throw new Yt.GraphQLError(
          `Abstract type "${r.name}" was resolved to a non-object type "${e}".`,
          { nodes: n }
        );
      if (!t.schema.isSubType(r, a))
        throw new Yt.GraphQLError(
          `Runtime Object type "${a.name}" is not a possible type for "${r.name}".`,
          { nodes: n }
        );
      return a;
    }
    function ed(e, t, r, n, i, s) {
      let a = Oj(e, t, r);
      if (t.isTypeOf) {
        let o = t.isTypeOf(s, e.contextValue, n);
        if ((0, dr.isPromise)(o))
          return o.then((u) => {
            if (!u) throw Ng(t, s, r);
            return go(e, t, s, i, a);
          });
        if (!o) throw Ng(t, s, r);
      }
      return go(e, t, s, i, a);
    }
    function Ng(e, t, r) {
      return new Yt.GraphQLError(
        `Expected value of type "${e.name}" but got: ${(0, Ln.inspect)(t)}.`,
        { nodes: r }
      );
    }
    var Ig = function (e, t, r, n) {
      if ((0, Xp.isObjectLike)(e) && typeof e.__typename == "string")
        return e.__typename;
      let i = r.schema.getPossibleTypes(n),
        s = [];
      for (let a = 0; a < i.length; a++) {
        let o = i[a];
        if (o.isTypeOf) {
          let u = o.isTypeOf(e, t, r);
          if ((0, dr.isPromise)(u)) s[a] = u;
          else if (u) return o.name;
        }
      }
      if (s.length)
        return Promise.all(s).then((a) => {
          for (let o = 0; o < a.length; o++) if (a[o]) return i[o].name;
        });
    };
    Ht.defaultTypeResolver = Ig;
    var td = function (e, t, r, n) {
      if ((0, Xp.isObjectLike)(e) || typeof e == "function") {
        let i = e[n.fieldName];
        return typeof i == "function" ? e[n.fieldName](t, r, n) : i;
      }
    };
    Ht.defaultFieldResolver = td;
    function jg(e, t, r) {
      let n = r.name.value;
      return n === hi.SchemaMetaFieldDef.name && e.getQueryType() === t
        ? hi.SchemaMetaFieldDef
        : n === hi.TypeMetaFieldDef.name && e.getQueryType() === t
        ? hi.TypeMetaFieldDef
        : n === hi.TypeNameMetaFieldDef.name
        ? hi.TypeNameMetaFieldDef
        : t.getFields()[n];
    }
  });
  var wg = f((bo) => {
    "use strict";
    Object.defineProperty(bo, "__esModule", { value: !0 });
    bo.graphql = Lj;
    bo.graphqlSync = Fj;
    var Ij = Tt(),
      jj = Ta(),
      Pj = ri(),
      wj = _s(),
      Dj = Fs(),
      Rj = Ms();
    function Lj(e) {
      return new Promise((t) => t(Pg(e)));
    }
    function Fj(e) {
      let t = Pg(e);
      if ((0, jj.isPromise)(t))
        throw new Error("GraphQL execution failed to complete synchronously.");
      return t;
    }
    function Pg(e) {
      arguments.length < 2 ||
        (0, Ij.devAssert)(
          !1,
          "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
        );
      let {
          schema: t,
          source: r,
          rootValue: n,
          contextValue: i,
          variableValues: s,
          operationName: a,
          fieldResolver: o,
          typeResolver: u,
        } = e,
        l = (0, wj.validateSchema)(t);
      if (l.length > 0) return { errors: l };
      let c;
      try {
        c = (0, Pj.parse)(r);
      } catch (p) {
        return { errors: [p] };
      }
      let d = (0, Dj.validate)(t, c);
      return d.length > 0
        ? { errors: d }
        : (0, Rj.execute)({
            schema: t,
            document: c,
            rootValue: n,
            contextValue: i,
            variableValues: s,
            operationName: a,
            fieldResolver: o,
            typeResolver: u,
          });
    }
  });
  var Lg = f((P) => {
    "use strict";
    Object.defineProperty(P, "__esModule", { value: !0 });
    Object.defineProperty(P, "DEFAULT_DEPRECATION_REASON", {
      enumerable: !0,
      get: function () {
        return Ar.DEFAULT_DEPRECATION_REASON;
      },
    });
    Object.defineProperty(P, "GRAPHQL_MAX_INT", {
      enumerable: !0,
      get: function () {
        return xr.GRAPHQL_MAX_INT;
      },
    });
    Object.defineProperty(P, "GRAPHQL_MIN_INT", {
      enumerable: !0,
      get: function () {
        return xr.GRAPHQL_MIN_INT;
      },
    });
    Object.defineProperty(P, "GraphQLBoolean", {
      enumerable: !0,
      get: function () {
        return xr.GraphQLBoolean;
      },
    });
    Object.defineProperty(P, "GraphQLDeprecatedDirective", {
      enumerable: !0,
      get: function () {
        return Ar.GraphQLDeprecatedDirective;
      },
    });
    Object.defineProperty(P, "GraphQLDirective", {
      enumerable: !0,
      get: function () {
        return Ar.GraphQLDirective;
      },
    });
    Object.defineProperty(P, "GraphQLEnumType", {
      enumerable: !0,
      get: function () {
        return J.GraphQLEnumType;
      },
    });
    Object.defineProperty(P, "GraphQLFloat", {
      enumerable: !0,
      get: function () {
        return xr.GraphQLFloat;
      },
    });
    Object.defineProperty(P, "GraphQLID", {
      enumerable: !0,
      get: function () {
        return xr.GraphQLID;
      },
    });
    Object.defineProperty(P, "GraphQLIncludeDirective", {
      enumerable: !0,
      get: function () {
        return Ar.GraphQLIncludeDirective;
      },
    });
    Object.defineProperty(P, "GraphQLInputObjectType", {
      enumerable: !0,
      get: function () {
        return J.GraphQLInputObjectType;
      },
    });
    Object.defineProperty(P, "GraphQLInt", {
      enumerable: !0,
      get: function () {
        return xr.GraphQLInt;
      },
    });
    Object.defineProperty(P, "GraphQLInterfaceType", {
      enumerable: !0,
      get: function () {
        return J.GraphQLInterfaceType;
      },
    });
    Object.defineProperty(P, "GraphQLList", {
      enumerable: !0,
      get: function () {
        return J.GraphQLList;
      },
    });
    Object.defineProperty(P, "GraphQLNonNull", {
      enumerable: !0,
      get: function () {
        return J.GraphQLNonNull;
      },
    });
    Object.defineProperty(P, "GraphQLObjectType", {
      enumerable: !0,
      get: function () {
        return J.GraphQLObjectType;
      },
    });
    Object.defineProperty(P, "GraphQLScalarType", {
      enumerable: !0,
      get: function () {
        return J.GraphQLScalarType;
      },
    });
    Object.defineProperty(P, "GraphQLSchema", {
      enumerable: !0,
      get: function () {
        return rd.GraphQLSchema;
      },
    });
    Object.defineProperty(P, "GraphQLSkipDirective", {
      enumerable: !0,
      get: function () {
        return Ar.GraphQLSkipDirective;
      },
    });
    Object.defineProperty(P, "GraphQLSpecifiedByDirective", {
      enumerable: !0,
      get: function () {
        return Ar.GraphQLSpecifiedByDirective;
      },
    });
    Object.defineProperty(P, "GraphQLString", {
      enumerable: !0,
      get: function () {
        return xr.GraphQLString;
      },
    });
    Object.defineProperty(P, "GraphQLUnionType", {
      enumerable: !0,
      get: function () {
        return J.GraphQLUnionType;
      },
    });
    Object.defineProperty(P, "SchemaMetaFieldDef", {
      enumerable: !0,
      get: function () {
        return jt.SchemaMetaFieldDef;
      },
    });
    Object.defineProperty(P, "TypeKind", {
      enumerable: !0,
      get: function () {
        return jt.TypeKind;
      },
    });
    Object.defineProperty(P, "TypeMetaFieldDef", {
      enumerable: !0,
      get: function () {
        return jt.TypeMetaFieldDef;
      },
    });
    Object.defineProperty(P, "TypeNameMetaFieldDef", {
      enumerable: !0,
      get: function () {
        return jt.TypeNameMetaFieldDef;
      },
    });
    Object.defineProperty(P, "__Directive", {
      enumerable: !0,
      get: function () {
        return jt.__Directive;
      },
    });
    Object.defineProperty(P, "__DirectiveLocation", {
      enumerable: !0,
      get: function () {
        return jt.__DirectiveLocation;
      },
    });
    Object.defineProperty(P, "__EnumValue", {
      enumerable: !0,
      get: function () {
        return jt.__EnumValue;
      },
    });
    Object.defineProperty(P, "__Field", {
      enumerable: !0,
      get: function () {
        return jt.__Field;
      },
    });
    Object.defineProperty(P, "__InputValue", {
      enumerable: !0,
      get: function () {
        return jt.__InputValue;
      },
    });
    Object.defineProperty(P, "__Schema", {
      enumerable: !0,
      get: function () {
        return jt.__Schema;
      },
    });
    Object.defineProperty(P, "__Type", {
      enumerable: !0,
      get: function () {
        return jt.__Type;
      },
    });
    Object.defineProperty(P, "__TypeKind", {
      enumerable: !0,
      get: function () {
        return jt.__TypeKind;
      },
    });
    Object.defineProperty(P, "assertAbstractType", {
      enumerable: !0,
      get: function () {
        return J.assertAbstractType;
      },
    });
    Object.defineProperty(P, "assertCompositeType", {
      enumerable: !0,
      get: function () {
        return J.assertCompositeType;
      },
    });
    Object.defineProperty(P, "assertDirective", {
      enumerable: !0,
      get: function () {
        return Ar.assertDirective;
      },
    });
    Object.defineProperty(P, "assertEnumType", {
      enumerable: !0,
      get: function () {
        return J.assertEnumType;
      },
    });
    Object.defineProperty(P, "assertEnumValueName", {
      enumerable: !0,
      get: function () {
        return Rg.assertEnumValueName;
      },
    });
    Object.defineProperty(P, "assertInputObjectType", {
      enumerable: !0,
      get: function () {
        return J.assertInputObjectType;
      },
    });
    Object.defineProperty(P, "assertInputType", {
      enumerable: !0,
      get: function () {
        return J.assertInputType;
      },
    });
    Object.defineProperty(P, "assertInterfaceType", {
      enumerable: !0,
      get: function () {
        return J.assertInterfaceType;
      },
    });
    Object.defineProperty(P, "assertLeafType", {
      enumerable: !0,
      get: function () {
        return J.assertLeafType;
      },
    });
    Object.defineProperty(P, "assertListType", {
      enumerable: !0,
      get: function () {
        return J.assertListType;
      },
    });
    Object.defineProperty(P, "assertName", {
      enumerable: !0,
      get: function () {
        return Rg.assertName;
      },
    });
    Object.defineProperty(P, "assertNamedType", {
      enumerable: !0,
      get: function () {
        return J.assertNamedType;
      },
    });
    Object.defineProperty(P, "assertNonNullType", {
      enumerable: !0,
      get: function () {
        return J.assertNonNullType;
      },
    });
    Object.defineProperty(P, "assertNullableType", {
      enumerable: !0,
      get: function () {
        return J.assertNullableType;
      },
    });
    Object.defineProperty(P, "assertObjectType", {
      enumerable: !0,
      get: function () {
        return J.assertObjectType;
      },
    });
    Object.defineProperty(P, "assertOutputType", {
      enumerable: !0,
      get: function () {
        return J.assertOutputType;
      },
    });
    Object.defineProperty(P, "assertScalarType", {
      enumerable: !0,
      get: function () {
        return J.assertScalarType;
      },
    });
    Object.defineProperty(P, "assertSchema", {
      enumerable: !0,
      get: function () {
        return rd.assertSchema;
      },
    });
    Object.defineProperty(P, "assertType", {
      enumerable: !0,
      get: function () {
        return J.assertType;
      },
    });
    Object.defineProperty(P, "assertUnionType", {
      enumerable: !0,
      get: function () {
        return J.assertUnionType;
      },
    });
    Object.defineProperty(P, "assertValidSchema", {
      enumerable: !0,
      get: function () {
        return Dg.assertValidSchema;
      },
    });
    Object.defineProperty(P, "assertWrappingType", {
      enumerable: !0,
      get: function () {
        return J.assertWrappingType;
      },
    });
    Object.defineProperty(P, "getNamedType", {
      enumerable: !0,
      get: function () {
        return J.getNamedType;
      },
    });
    Object.defineProperty(P, "getNullableType", {
      enumerable: !0,
      get: function () {
        return J.getNullableType;
      },
    });
    Object.defineProperty(P, "introspectionTypes", {
      enumerable: !0,
      get: function () {
        return jt.introspectionTypes;
      },
    });
    Object.defineProperty(P, "isAbstractType", {
      enumerable: !0,
      get: function () {
        return J.isAbstractType;
      },
    });
    Object.defineProperty(P, "isCompositeType", {
      enumerable: !0,
      get: function () {
        return J.isCompositeType;
      },
    });
    Object.defineProperty(P, "isDirective", {
      enumerable: !0,
      get: function () {
        return Ar.isDirective;
      },
    });
    Object.defineProperty(P, "isEnumType", {
      enumerable: !0,
      get: function () {
        return J.isEnumType;
      },
    });
    Object.defineProperty(P, "isInputObjectType", {
      enumerable: !0,
      get: function () {
        return J.isInputObjectType;
      },
    });
    Object.defineProperty(P, "isInputType", {
      enumerable: !0,
      get: function () {
        return J.isInputType;
      },
    });
    Object.defineProperty(P, "isInterfaceType", {
      enumerable: !0,
      get: function () {
        return J.isInterfaceType;
      },
    });
    Object.defineProperty(P, "isIntrospectionType", {
      enumerable: !0,
      get: function () {
        return jt.isIntrospectionType;
      },
    });
    Object.defineProperty(P, "isLeafType", {
      enumerable: !0,
      get: function () {
        return J.isLeafType;
      },
    });
    Object.defineProperty(P, "isListType", {
      enumerable: !0,
      get: function () {
        return J.isListType;
      },
    });
    Object.defineProperty(P, "isNamedType", {
      enumerable: !0,
      get: function () {
        return J.isNamedType;
      },
    });
    Object.defineProperty(P, "isNonNullType", {
      enumerable: !0,
      get: function () {
        return J.isNonNullType;
      },
    });
    Object.defineProperty(P, "isNullableType", {
      enumerable: !0,
      get: function () {
        return J.isNullableType;
      },
    });
    Object.defineProperty(P, "isObjectType", {
      enumerable: !0,
      get: function () {
        return J.isObjectType;
      },
    });
    Object.defineProperty(P, "isOutputType", {
      enumerable: !0,
      get: function () {
        return J.isOutputType;
      },
    });
    Object.defineProperty(P, "isRequiredArgument", {
      enumerable: !0,
      get: function () {
        return J.isRequiredArgument;
      },
    });
    Object.defineProperty(P, "isRequiredInputField", {
      enumerable: !0,
      get: function () {
        return J.isRequiredInputField;
      },
    });
    Object.defineProperty(P, "isScalarType", {
      enumerable: !0,
      get: function () {
        return J.isScalarType;
      },
    });
    Object.defineProperty(P, "isSchema", {
      enumerable: !0,
      get: function () {
        return rd.isSchema;
      },
    });
    Object.defineProperty(P, "isSpecifiedDirective", {
      enumerable: !0,
      get: function () {
        return Ar.isSpecifiedDirective;
      },
    });
    Object.defineProperty(P, "isSpecifiedScalarType", {
      enumerable: !0,
      get: function () {
        return xr.isSpecifiedScalarType;
      },
    });
    Object.defineProperty(P, "isType", {
      enumerable: !0,
      get: function () {
        return J.isType;
      },
    });
    Object.defineProperty(P, "isUnionType", {
      enumerable: !0,
      get: function () {
        return J.isUnionType;
      },
    });
    Object.defineProperty(P, "isWrappingType", {
      enumerable: !0,
      get: function () {
        return J.isWrappingType;
      },
    });
    Object.defineProperty(P, "resolveObjMapThunk", {
      enumerable: !0,
      get: function () {
        return J.resolveObjMapThunk;
      },
    });
    Object.defineProperty(P, "resolveReadonlyArrayThunk", {
      enumerable: !0,
      get: function () {
        return J.resolveReadonlyArrayThunk;
      },
    });
    Object.defineProperty(P, "specifiedDirectives", {
      enumerable: !0,
      get: function () {
        return Ar.specifiedDirectives;
      },
    });
    Object.defineProperty(P, "specifiedScalarTypes", {
      enumerable: !0,
      get: function () {
        return xr.specifiedScalarTypes;
      },
    });
    Object.defineProperty(P, "validateSchema", {
      enumerable: !0,
      get: function () {
        return Dg.validateSchema;
      },
    });
    var rd = Nn(),
      J = ae(),
      Ar = Nt(),
      xr = Sr(),
      jt = zt(),
      Dg = _s(),
      Rg = us();
  });
  var qg = f((le) => {
    "use strict";
    Object.defineProperty(le, "__esModule", { value: !0 });
    Object.defineProperty(le, "BREAK", {
      enumerable: !0,
      get: function () {
        return xs.BREAK;
      },
    });
    Object.defineProperty(le, "DirectiveLocation", {
      enumerable: !0,
      get: function () {
        return Qj.DirectiveLocation;
      },
    });
    Object.defineProperty(le, "Kind", {
      enumerable: !0,
      get: function () {
        return xj.Kind;
      },
    });
    Object.defineProperty(le, "Lexer", {
      enumerable: !0,
      get: function () {
        return kj.Lexer;
      },
    });
    Object.defineProperty(le, "Location", {
      enumerable: !0,
      get: function () {
        return nd.Location;
      },
    });
    Object.defineProperty(le, "OperationTypeNode", {
      enumerable: !0,
      get: function () {
        return nd.OperationTypeNode;
      },
    });
    Object.defineProperty(le, "Source", {
      enumerable: !0,
      get: function () {
        return qj.Source;
      },
    });
    Object.defineProperty(le, "Token", {
      enumerable: !0,
      get: function () {
        return nd.Token;
      },
    });
    Object.defineProperty(le, "TokenKind", {
      enumerable: !0,
      get: function () {
        return Cj.TokenKind;
      },
    });
    Object.defineProperty(le, "getEnterLeaveForKind", {
      enumerable: !0,
      get: function () {
        return xs.getEnterLeaveForKind;
      },
    });
    Object.defineProperty(le, "getLocation", {
      enumerable: !0,
      get: function () {
        return Mj.getLocation;
      },
    });
    Object.defineProperty(le, "getVisitFn", {
      enumerable: !0,
      get: function () {
        return xs.getVisitFn;
      },
    });
    Object.defineProperty(le, "isConstValueNode", {
      enumerable: !0,
      get: function () {
        return Er.isConstValueNode;
      },
    });
    Object.defineProperty(le, "isDefinitionNode", {
      enumerable: !0,
      get: function () {
        return Er.isDefinitionNode;
      },
    });
    Object.defineProperty(le, "isExecutableDefinitionNode", {
      enumerable: !0,
      get: function () {
        return Er.isExecutableDefinitionNode;
      },
    });
    Object.defineProperty(le, "isSelectionNode", {
      enumerable: !0,
      get: function () {
        return Er.isSelectionNode;
      },
    });
    Object.defineProperty(le, "isTypeDefinitionNode", {
      enumerable: !0,
      get: function () {
        return Er.isTypeDefinitionNode;
      },
    });
    Object.defineProperty(le, "isTypeExtensionNode", {
      enumerable: !0,
      get: function () {
        return Er.isTypeExtensionNode;
      },
    });
    Object.defineProperty(le, "isTypeNode", {
      enumerable: !0,
      get: function () {
        return Er.isTypeNode;
      },
    });
    Object.defineProperty(le, "isTypeSystemDefinitionNode", {
      enumerable: !0,
      get: function () {
        return Er.isTypeSystemDefinitionNode;
      },
    });
    Object.defineProperty(le, "isTypeSystemExtensionNode", {
      enumerable: !0,
      get: function () {
        return Er.isTypeSystemExtensionNode;
      },
    });
    Object.defineProperty(le, "isValueNode", {
      enumerable: !0,
      get: function () {
        return Er.isValueNode;
      },
    });
    Object.defineProperty(le, "parse", {
      enumerable: !0,
      get: function () {
        return Oo.parse;
      },
    });
    Object.defineProperty(le, "parseConstValue", {
      enumerable: !0,
      get: function () {
        return Oo.parseConstValue;
      },
    });
    Object.defineProperty(le, "parseType", {
      enumerable: !0,
      get: function () {
        return Oo.parseType;
      },
    });
    Object.defineProperty(le, "parseValue", {
      enumerable: !0,
      get: function () {
        return Oo.parseValue;
      },
    });
    Object.defineProperty(le, "print", {
      enumerable: !0,
      get: function () {
        return Gj.print;
      },
    });
    Object.defineProperty(le, "printLocation", {
      enumerable: !0,
      get: function () {
        return Fg.printLocation;
      },
    });
    Object.defineProperty(le, "printSourceLocation", {
      enumerable: !0,
      get: function () {
        return Fg.printSourceLocation;
      },
    });
    Object.defineProperty(le, "visit", {
      enumerable: !0,
      get: function () {
        return xs.visit;
      },
    });
    Object.defineProperty(le, "visitInParallel", {
      enumerable: !0,
      get: function () {
        return xs.visitInParallel;
      },
    });
    var qj = Ra(),
      Mj = _a(),
      Fg = il(),
      xj = ue(),
      Cj = es(),
      kj = Pa(),
      Oo = ri(),
      Gj = kt(),
      xs = bn(),
      nd = vr(),
      Er = jn(),
      Qj = Xn();
  });
  var Mg = f((id) => {
    "use strict";
    Object.defineProperty(id, "__esModule", { value: !0 });
    id.isAsyncIterable = Uj;
    function Uj(e) {
      return (
        typeof (e == null ? void 0 : e[Symbol.asyncIterator]) == "function"
      );
    }
  });
  var xg = f((sd) => {
    "use strict";
    Object.defineProperty(sd, "__esModule", { value: !0 });
    sd.mapAsyncIterator = Vj;
    function Vj(e, t) {
      let r = e[Symbol.asyncIterator]();
      function n(i) {
        return y(this, null, function* () {
          if (i.done) return i;
          try {
            return { value: yield t(i.value), done: !1 };
          } catch (s) {
            if (typeof r.return == "function")
              try {
                yield r.return();
              } catch (a) {}
            throw s;
          }
        });
      }
      return {
        next() {
          return y(this, null, function* () {
            return n(yield r.next());
          });
        },
        return() {
          return y(this, null, function* () {
            return typeof r.return == "function"
              ? n(yield r.return())
              : { value: void 0, done: !0 };
          });
        },
        throw(i) {
          return y(this, null, function* () {
            if (typeof r.throw == "function") return n(yield r.throw(i));
            throw i;
          });
        },
        [Symbol.asyncIterator]() {
          return this;
        },
      };
    }
  });
  var Qg = f((So) => {
    "use strict";
    Object.defineProperty(So, "__esModule", { value: !0 });
    So.createSourceEventStream = Gg;
    So.subscribe = Hj;
    var Kj = Tt(),
      $j = he(),
      Cg = Mg(),
      kg = Is(),
      ad = W(),
      Bj = yo(),
      zj = uo(),
      Cs = Ms(),
      Wj = xg(),
      Yj = di();
    function Hj(t) {
      return y(this, arguments, function* (e) {
        arguments.length < 2 ||
          (0, Kj.devAssert)(
            !1,
            "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead."
          );
        let {
            schema: r,
            document: n,
            rootValue: i,
            contextValue: s,
            variableValues: a,
            operationName: o,
            fieldResolver: u,
            subscribeFieldResolver: l,
          } = e,
          c = yield Gg(r, n, i, s, a, o, l);
        if (!(0, Cg.isAsyncIterable)(c)) return c;
        let d = (p) =>
          (0, Cs.execute)({
            schema: r,
            document: n,
            rootValue: p,
            contextValue: s,
            variableValues: a,
            operationName: o,
            fieldResolver: u,
          });
        return (0, Wj.mapAsyncIterator)(c, d);
      });
    }
    function Gg(e, t, r, n, i, s, a) {
      return y(this, null, function* () {
        (0, Cs.assertValidExecutionArguments)(e, t, i);
        let o = (0, Cs.buildExecutionContext)({
          schema: e,
          document: t,
          rootValue: r,
          contextValue: n,
          variableValues: i,
          operationName: s,
          subscribeFieldResolver: a,
        });
        if (!("schema" in o)) return { errors: o };
        try {
          let u = yield Jj(o);
          if (!(0, Cg.isAsyncIterable)(u))
            throw new Error(
              `Subscription field must return Async Iterable. Received: ${(0,
              $j.inspect)(u)}.`
            );
          return u;
        } catch (u) {
          if (u instanceof ad.GraphQLError) return { errors: [u] };
          throw u;
        }
      });
    }
    function Jj(e) {
      return y(this, null, function* () {
        let {
            schema: t,
            fragments: r,
            operation: n,
            variableValues: i,
            rootValue: s,
          } = e,
          a = t.getSubscriptionType();
        if (a == null)
          throw new ad.GraphQLError(
            "Schema is not configured to execute subscription operation.",
            { nodes: n }
          );
        let o = (0, zj.collectFields)(t, r, i, a, n.selectionSet),
          [u, l] = [...o.entries()][0],
          c = (0, Cs.getFieldDef)(t, a, l[0]);
        if (!c) {
          let v = l[0].name.value;
          throw new ad.GraphQLError(
            `The subscription field "${v}" is not defined.`,
            { nodes: l }
          );
        }
        let d = (0, kg.addPath)(void 0, u, a.name),
          p = (0, Cs.buildResolveInfo)(e, c, l, a, d);
        try {
          var m;
          let v = (0, Yj.getArgumentValues)(c, l[0], i),
            E = e.contextValue,
            C = yield (
              (m = c.subscribe) !== null && m !== void 0
                ? m
                : e.subscribeFieldResolver
            )(s, v, E, p);
          if (C instanceof Error) throw C;
          return C;
        } catch (v) {
          throw (0, Bj.locatedError)(v, l, (0, kg.pathToArray)(d));
        }
      });
    }
  });
  var Vg = f((Jt) => {
    "use strict";
    Object.defineProperty(Jt, "__esModule", { value: !0 });
    Object.defineProperty(Jt, "createSourceEventStream", {
      enumerable: !0,
      get: function () {
        return Ug.createSourceEventStream;
      },
    });
    Object.defineProperty(Jt, "defaultFieldResolver", {
      enumerable: !0,
      get: function () {
        return To.defaultFieldResolver;
      },
    });
    Object.defineProperty(Jt, "defaultTypeResolver", {
      enumerable: !0,
      get: function () {
        return To.defaultTypeResolver;
      },
    });
    Object.defineProperty(Jt, "execute", {
      enumerable: !0,
      get: function () {
        return To.execute;
      },
    });
    Object.defineProperty(Jt, "executeSync", {
      enumerable: !0,
      get: function () {
        return To.executeSync;
      },
    });
    Object.defineProperty(Jt, "getArgumentValues", {
      enumerable: !0,
      get: function () {
        return od.getArgumentValues;
      },
    });
    Object.defineProperty(Jt, "getDirectiveValues", {
      enumerable: !0,
      get: function () {
        return od.getDirectiveValues;
      },
    });
    Object.defineProperty(Jt, "getVariableValues", {
      enumerable: !0,
      get: function () {
        return od.getVariableValues;
      },
    });
    Object.defineProperty(Jt, "responsePathAsArray", {
      enumerable: !0,
      get: function () {
        return Xj.pathToArray;
      },
    });
    Object.defineProperty(Jt, "subscribe", {
      enumerable: !0,
      get: function () {
        return Ug.subscribe;
      },
    });
    var Xj = Is(),
      To = Ms(),
      Ug = Qg(),
      od = di();
  });
  var Kg = f((cd) => {
    "use strict";
    Object.defineProperty(cd, "__esModule", { value: !0 });
    cd.NoDeprecatedCustomRule = Zj;
    var ud = ct(),
      ks = W(),
      ld = ae();
    function Zj(e) {
      return {
        Field(t) {
          let r = e.getFieldDef(),
            n = r == null ? void 0 : r.deprecationReason;
          if (r && n != null) {
            let i = e.getParentType();
            i != null || (0, ud.invariant)(!1),
              e.reportError(
                new ks.GraphQLError(
                  `The field ${i.name}.${r.name} is deprecated. ${n}`,
                  { nodes: t }
                )
              );
          }
        },
        Argument(t) {
          let r = e.getArgument(),
            n = r == null ? void 0 : r.deprecationReason;
          if (r && n != null) {
            let i = e.getDirective();
            if (i != null)
              e.reportError(
                new ks.GraphQLError(
                  `Directive "@${i.name}" argument "${r.name}" is deprecated. ${n}`,
                  { nodes: t }
                )
              );
            else {
              let s = e.getParentType(),
                a = e.getFieldDef();
              (s != null && a != null) || (0, ud.invariant)(!1),
                e.reportError(
                  new ks.GraphQLError(
                    `Field "${s.name}.${a.name}" argument "${r.name}" is deprecated. ${n}`,
                    { nodes: t }
                  )
                );
            }
          }
        },
        ObjectField(t) {
          let r = (0, ld.getNamedType)(e.getParentInputType());
          if ((0, ld.isInputObjectType)(r)) {
            let n = r.getFields()[t.name.value],
              i = n == null ? void 0 : n.deprecationReason;
            i != null &&
              e.reportError(
                new ks.GraphQLError(
                  `The input field ${r.name}.${n.name} is deprecated. ${i}`,
                  { nodes: t }
                )
              );
          }
        },
        EnumValue(t) {
          let r = e.getEnumValue(),
            n = r == null ? void 0 : r.deprecationReason;
          if (r && n != null) {
            let i = (0, ld.getNamedType)(e.getInputType());
            i != null || (0, ud.invariant)(!1),
              e.reportError(
                new ks.GraphQLError(
                  `The enum value "${i.name}.${r.name}" is deprecated. ${n}`,
                  { nodes: t }
                )
              );
          }
        },
      };
    }
  });
  var $g = f((pd) => {
    "use strict";
    Object.defineProperty(pd, "__esModule", { value: !0 });
    pd.NoSchemaIntrospectionCustomRule = nP;
    var eP = W(),
      tP = ae(),
      rP = zt();
    function nP(e) {
      return {
        Field(t) {
          let r = (0, tP.getNamedType)(e.getType());
          r &&
            (0, rP.isIntrospectionType)(r) &&
            e.reportError(
              new eP.GraphQLError(
                `GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,
                { nodes: t }
              )
            );
        },
      };
    }
  });
  var Bg = f((Z) => {
    "use strict";
    Object.defineProperty(Z, "__esModule", { value: !0 });
    Object.defineProperty(Z, "ExecutableDefinitionsRule", {
      enumerable: !0,
      get: function () {
        return oP.ExecutableDefinitionsRule;
      },
    });
    Object.defineProperty(Z, "FieldsOnCorrectTypeRule", {
      enumerable: !0,
      get: function () {
        return uP.FieldsOnCorrectTypeRule;
      },
    });
    Object.defineProperty(Z, "FragmentsOnCompositeTypesRule", {
      enumerable: !0,
      get: function () {
        return lP.FragmentsOnCompositeTypesRule;
      },
    });
    Object.defineProperty(Z, "KnownArgumentNamesRule", {
      enumerable: !0,
      get: function () {
        return cP.KnownArgumentNamesRule;
      },
    });
    Object.defineProperty(Z, "KnownDirectivesRule", {
      enumerable: !0,
      get: function () {
        return pP.KnownDirectivesRule;
      },
    });
    Object.defineProperty(Z, "KnownFragmentNamesRule", {
      enumerable: !0,
      get: function () {
        return dP.KnownFragmentNamesRule;
      },
    });
    Object.defineProperty(Z, "KnownTypeNamesRule", {
      enumerable: !0,
      get: function () {
        return fP.KnownTypeNamesRule;
      },
    });
    Object.defineProperty(Z, "LoneAnonymousOperationRule", {
      enumerable: !0,
      get: function () {
        return yP.LoneAnonymousOperationRule;
      },
    });
    Object.defineProperty(Z, "LoneSchemaDefinitionRule", {
      enumerable: !0,
      get: function () {
        return LP.LoneSchemaDefinitionRule;
      },
    });
    Object.defineProperty(Z, "NoDeprecatedCustomRule", {
      enumerable: !0,
      get: function () {
        return QP.NoDeprecatedCustomRule;
      },
    });
    Object.defineProperty(Z, "NoFragmentCyclesRule", {
      enumerable: !0,
      get: function () {
        return hP.NoFragmentCyclesRule;
      },
    });
    Object.defineProperty(Z, "NoSchemaIntrospectionCustomRule", {
      enumerable: !0,
      get: function () {
        return UP.NoSchemaIntrospectionCustomRule;
      },
    });
    Object.defineProperty(Z, "NoUndefinedVariablesRule", {
      enumerable: !0,
      get: function () {
        return mP.NoUndefinedVariablesRule;
      },
    });
    Object.defineProperty(Z, "NoUnusedFragmentsRule", {
      enumerable: !0,
      get: function () {
        return gP.NoUnusedFragmentsRule;
      },
    });
    Object.defineProperty(Z, "NoUnusedVariablesRule", {
      enumerable: !0,
      get: function () {
        return vP.NoUnusedVariablesRule;
      },
    });
    Object.defineProperty(Z, "OverlappingFieldsCanBeMergedRule", {
      enumerable: !0,
      get: function () {
        return bP.OverlappingFieldsCanBeMergedRule;
      },
    });
    Object.defineProperty(Z, "PossibleFragmentSpreadsRule", {
      enumerable: !0,
      get: function () {
        return OP.PossibleFragmentSpreadsRule;
      },
    });
    Object.defineProperty(Z, "PossibleTypeExtensionsRule", {
      enumerable: !0,
      get: function () {
        return GP.PossibleTypeExtensionsRule;
      },
    });
    Object.defineProperty(Z, "ProvidedRequiredArgumentsRule", {
      enumerable: !0,
      get: function () {
        return SP.ProvidedRequiredArgumentsRule;
      },
    });
    Object.defineProperty(Z, "ScalarLeafsRule", {
      enumerable: !0,
      get: function () {
        return TP.ScalarLeafsRule;
      },
    });
    Object.defineProperty(Z, "SingleFieldSubscriptionsRule", {
      enumerable: !0,
      get: function () {
        return _P.SingleFieldSubscriptionsRule;
      },
    });
    Object.defineProperty(Z, "UniqueArgumentDefinitionNamesRule", {
      enumerable: !0,
      get: function () {
        return CP.UniqueArgumentDefinitionNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueArgumentNamesRule", {
      enumerable: !0,
      get: function () {
        return AP.UniqueArgumentNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueDirectiveNamesRule", {
      enumerable: !0,
      get: function () {
        return kP.UniqueDirectiveNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueDirectivesPerLocationRule", {
      enumerable: !0,
      get: function () {
        return EP.UniqueDirectivesPerLocationRule;
      },
    });
    Object.defineProperty(Z, "UniqueEnumValueNamesRule", {
      enumerable: !0,
      get: function () {
        return MP.UniqueEnumValueNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueFieldDefinitionNamesRule", {
      enumerable: !0,
      get: function () {
        return xP.UniqueFieldDefinitionNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueFragmentNamesRule", {
      enumerable: !0,
      get: function () {
        return NP.UniqueFragmentNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueInputFieldNamesRule", {
      enumerable: !0,
      get: function () {
        return IP.UniqueInputFieldNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueOperationNamesRule", {
      enumerable: !0,
      get: function () {
        return jP.UniqueOperationNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueOperationTypesRule", {
      enumerable: !0,
      get: function () {
        return FP.UniqueOperationTypesRule;
      },
    });
    Object.defineProperty(Z, "UniqueTypeNamesRule", {
      enumerable: !0,
      get: function () {
        return qP.UniqueTypeNamesRule;
      },
    });
    Object.defineProperty(Z, "UniqueVariableNamesRule", {
      enumerable: !0,
      get: function () {
        return PP.UniqueVariableNamesRule;
      },
    });
    Object.defineProperty(Z, "ValidationContext", {
      enumerable: !0,
      get: function () {
        return sP.ValidationContext;
      },
    });
    Object.defineProperty(Z, "ValuesOfCorrectTypeRule", {
      enumerable: !0,
      get: function () {
        return wP.ValuesOfCorrectTypeRule;
      },
    });
    Object.defineProperty(Z, "VariablesAreInputTypesRule", {
      enumerable: !0,
      get: function () {
        return DP.VariablesAreInputTypesRule;
      },
    });
    Object.defineProperty(Z, "VariablesInAllowedPositionRule", {
      enumerable: !0,
      get: function () {
        return RP.VariablesInAllowedPositionRule;
      },
    });
    Object.defineProperty(Z, "specifiedRules", {
      enumerable: !0,
      get: function () {
        return aP.specifiedRules;
      },
    });
    Object.defineProperty(Z, "validate", {
      enumerable: !0,
      get: function () {
        return iP.validate;
      },
    });
    var iP = Fs(),
      sP = Kp(),
      aP = Vp(),
      oP = pc(),
      uP = fc(),
      lP = hc(),
      cP = mc(),
      pP = Oc(),
      dP = Tc(),
      fP = Ec(),
      yP = Ic(),
      hP = Dc(),
      mP = Lc(),
      gP = qc(),
      vP = xc(),
      bP = $c(),
      OP = Wc(),
      SP = Xc(),
      TP = ep(),
      _P = lp(),
      AP = yp(),
      EP = bp(),
      NP = Np(),
      IP = jp(),
      jP = wp(),
      PP = Mp(),
      wP = Cp(),
      DP = Gp(),
      RP = Up(),
      LP = Pc(),
      FP = Rp(),
      qP = Fp(),
      MP = Sp(),
      xP = Ap(),
      CP = dp(),
      kP = mp(),
      GP = Hc(),
      QP = Kg(),
      UP = $g();
  });
  var zg = f((qn) => {
    "use strict";
    Object.defineProperty(qn, "__esModule", { value: !0 });
    Object.defineProperty(qn, "GraphQLError", {
      enumerable: !0,
      get: function () {
        return dd.GraphQLError;
      },
    });
    Object.defineProperty(qn, "formatError", {
      enumerable: !0,
      get: function () {
        return dd.formatError;
      },
    });
    Object.defineProperty(qn, "locatedError", {
      enumerable: !0,
      get: function () {
        return KP.locatedError;
      },
    });
    Object.defineProperty(qn, "printError", {
      enumerable: !0,
      get: function () {
        return dd.printError;
      },
    });
    Object.defineProperty(qn, "syntaxError", {
      enumerable: !0,
      get: function () {
        return VP.syntaxError;
      },
    });
    var dd = W(),
      VP = Na(),
      KP = yo();
  });
  var yd = f((fd) => {
    "use strict";
    Object.defineProperty(fd, "__esModule", { value: !0 });
    fd.getIntrospectionQuery = $P;
    function $P(e) {
      let t = O(
          {
            descriptions: !0,
            specifiedByUrl: !1,
            directiveIsRepeatable: !1,
            schemaDescription: !1,
            inputValueDeprecation: !1,
          },
          e
        ),
        r = t.descriptions ? "description" : "",
        n = t.specifiedByUrl ? "specifiedByURL" : "",
        i = t.directiveIsRepeatable ? "isRepeatable" : "",
        s = t.schemaDescription ? r : "";
      function a(o) {
        return t.inputValueDeprecation ? o : "";
      }
      return `
    query IntrospectionQuery {
      __schema {
        ${s}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${r}
          ${i}
          locations
          args${a("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${r}
      ${n}
      fields(includeDeprecated: true) {
        name
        ${r}
        args${a("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${a("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${r}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${r}
      type { ...TypeRef }
      defaultValue
      ${a("isDeprecated")}
      ${a("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  `;
    }
  });
  var Wg = f((hd) => {
    "use strict";
    Object.defineProperty(hd, "__esModule", { value: !0 });
    hd.getOperationAST = zP;
    var BP = ue();
    function zP(e, t) {
      let r = null;
      for (let i of e.definitions)
        if (i.kind === BP.Kind.OPERATION_DEFINITION) {
          var n;
          if (t == null) {
            if (r) return null;
            r = i;
          } else if (
            ((n = i.name) === null || n === void 0 ? void 0 : n.value) === t
          )
            return i;
        }
      return r;
    }
  });
  var Yg = f((md) => {
    "use strict";
    Object.defineProperty(md, "__esModule", { value: !0 });
    md.getOperationRootType = WP;
    var _o = W();
    function WP(e, t) {
      if (t.operation === "query") {
        let r = e.getQueryType();
        if (!r)
          throw new _o.GraphQLError(
            "Schema does not define the required query root type.",
            { nodes: t }
          );
        return r;
      }
      if (t.operation === "mutation") {
        let r = e.getMutationType();
        if (!r)
          throw new _o.GraphQLError("Schema is not configured for mutations.", {
            nodes: t,
          });
        return r;
      }
      if (t.operation === "subscription") {
        let r = e.getSubscriptionType();
        if (!r)
          throw new _o.GraphQLError(
            "Schema is not configured for subscriptions.",
            { nodes: t }
          );
        return r;
      }
      throw new _o.GraphQLError(
        "Can only have query, mutation and subscription operations.",
        { nodes: t }
      );
    }
  });
  var Hg = f((gd) => {
    "use strict";
    Object.defineProperty(gd, "__esModule", { value: !0 });
    gd.introspectionFromSchema = ZP;
    var YP = ct(),
      HP = ri(),
      JP = Ms(),
      XP = yd();
    function ZP(e, t) {
      let r = O(
          {
            specifiedByUrl: !0,
            directiveIsRepeatable: !0,
            schemaDescription: !0,
            inputValueDeprecation: !0,
          },
          t
        ),
        n = (0, HP.parse)((0, XP.getIntrospectionQuery)(r)),
        i = (0, JP.executeSync)({ schema: e, document: n });
      return (!i.errors && i.data) || (0, YP.invariant)(!1), i.data;
    }
  });
  var Xg = f((vd) => {
    "use strict";
    Object.defineProperty(vd, "__esModule", { value: !0 });
    vd.buildClientSchema = aw;
    var ew = Tt(),
      Gt = he(),
      Jg = gr(),
      Ao = as(),
      tw = ri(),
      Qt = ae(),
      rw = Nt(),
      Nr = zt(),
      nw = Sr(),
      iw = Nn(),
      sw = Ds();
    function aw(e, t) {
      ((0, Jg.isObjectLike)(e) && (0, Jg.isObjectLike)(e.__schema)) ||
        (0, ew.devAssert)(
          !1,
          `Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0,
          Gt.inspect)(e)}.`
        );
      let r = e.__schema,
        n = (0, Ao.keyValMap)(
          r.types,
          (T) => T.name,
          (T) => p(T)
        );
      for (let T of [...nw.specifiedScalarTypes, ...Nr.introspectionTypes])
        n[T.name] && (n[T.name] = T);
      let i = r.queryType ? c(r.queryType) : null,
        s = r.mutationType ? c(r.mutationType) : null,
        a = r.subscriptionType ? c(r.subscriptionType) : null,
        o = r.directives ? r.directives.map(de) : [];
      return new iw.GraphQLSchema({
        description: r.description,
        query: i,
        mutation: s,
        subscription: a,
        types: Object.values(n),
        directives: o,
        assumeValid: t == null ? void 0 : t.assumeValid,
      });
      function u(T) {
        if (T.kind === Nr.TypeKind.LIST) {
          let g = T.ofType;
          if (!g)
            throw new Error("Decorated type deeper than introspection query.");
          return new Qt.GraphQLList(u(g));
        }
        if (T.kind === Nr.TypeKind.NON_NULL) {
          let g = T.ofType;
          if (!g)
            throw new Error("Decorated type deeper than introspection query.");
          let _ = u(g);
          return new Qt.GraphQLNonNull((0, Qt.assertNullableType)(_));
        }
        return l(T);
      }
      function l(T) {
        let g = T.name;
        if (!g)
          throw new Error(`Unknown type reference: ${(0, Gt.inspect)(T)}.`);
        let _ = n[g];
        if (!_)
          throw new Error(
            `Invalid or incomplete schema, unknown type: ${g}. Ensure that a full introspection query is used in order to build a client schema.`
          );
        return _;
      }
      function c(T) {
        return (0, Qt.assertObjectType)(l(T));
      }
      function d(T) {
        return (0, Qt.assertInterfaceType)(l(T));
      }
      function p(T) {
        if (T != null && T.name != null && T.kind != null)
          switch (T.kind) {
            case Nr.TypeKind.SCALAR:
              return m(T);
            case Nr.TypeKind.OBJECT:
              return E(T);
            case Nr.TypeKind.INTERFACE:
              return L(T);
            case Nr.TypeKind.UNION:
              return C(T);
            case Nr.TypeKind.ENUM:
              return H(T);
            case Nr.TypeKind.INPUT_OBJECT:
              return B(T);
          }
        let g = (0, Gt.inspect)(T);
        throw new Error(
          `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${g}.`
        );
      }
      function m(T) {
        return new Qt.GraphQLScalarType({
          name: T.name,
          description: T.description,
          specifiedByURL: T.specifiedByURL,
        });
      }
      function v(T) {
        if (T.interfaces === null && T.kind === Nr.TypeKind.INTERFACE)
          return [];
        if (!T.interfaces) {
          let g = (0, Gt.inspect)(T);
          throw new Error(`Introspection result missing interfaces: ${g}.`);
        }
        return T.interfaces.map(d);
      }
      function E(T) {
        return new Qt.GraphQLObjectType({
          name: T.name,
          description: T.description,
          interfaces: () => v(T),
          fields: () => S(T),
        });
      }
      function L(T) {
        return new Qt.GraphQLInterfaceType({
          name: T.name,
          description: T.description,
          interfaces: () => v(T),
          fields: () => S(T),
        });
      }
      function C(T) {
        if (!T.possibleTypes) {
          let g = (0, Gt.inspect)(T);
          throw new Error(`Introspection result missing possibleTypes: ${g}.`);
        }
        return new Qt.GraphQLUnionType({
          name: T.name,
          description: T.description,
          types: () => T.possibleTypes.map(c),
        });
      }
      function H(T) {
        if (!T.enumValues) {
          let g = (0, Gt.inspect)(T);
          throw new Error(`Introspection result missing enumValues: ${g}.`);
        }
        return new Qt.GraphQLEnumType({
          name: T.name,
          description: T.description,
          values: (0, Ao.keyValMap)(
            T.enumValues,
            (g) => g.name,
            (g) => ({
              description: g.description,
              deprecationReason: g.deprecationReason,
            })
          ),
        });
      }
      function B(T) {
        if (!T.inputFields) {
          let g = (0, Gt.inspect)(T);
          throw new Error(`Introspection result missing inputFields: ${g}.`);
        }
        return new Qt.GraphQLInputObjectType({
          name: T.name,
          description: T.description,
          fields: () => k(T.inputFields),
        });
      }
      function S(T) {
        if (!T.fields)
          throw new Error(
            `Introspection result missing fields: ${(0, Gt.inspect)(T)}.`
          );
        return (0, Ao.keyValMap)(T.fields, (g) => g.name, $);
      }
      function $(T) {
        let g = u(T.type);
        if (!(0, Qt.isOutputType)(g)) {
          let _ = (0, Gt.inspect)(g);
          throw new Error(
            `Introspection must provide output type for fields, but received: ${_}.`
          );
        }
        if (!T.args) {
          let _ = (0, Gt.inspect)(T);
          throw new Error(`Introspection result missing field args: ${_}.`);
        }
        return {
          description: T.description,
          deprecationReason: T.deprecationReason,
          type: g,
          args: k(T.args),
        };
      }
      function k(T) {
        return (0, Ao.keyValMap)(T, (g) => g.name, M);
      }
      function M(T) {
        let g = u(T.type);
        if (!(0, Qt.isInputType)(g)) {
          let I = (0, Gt.inspect)(g);
          throw new Error(
            `Introspection must provide input type for arguments, but received: ${I}.`
          );
        }
        let _ =
          T.defaultValue != null
            ? (0, sw.valueFromAST)((0, tw.parseValue)(T.defaultValue), g)
            : void 0;
        return {
          description: T.description,
          type: g,
          defaultValue: _,
          deprecationReason: T.deprecationReason,
        };
      }
      function de(T) {
        if (!T.args) {
          let g = (0, Gt.inspect)(T);
          throw new Error(`Introspection result missing directive args: ${g}.`);
        }
        if (!T.locations) {
          let g = (0, Gt.inspect)(T);
          throw new Error(
            `Introspection result missing directive locations: ${g}.`
          );
        }
        return new rw.GraphQLDirective({
          name: T.name,
          description: T.description,
          isRepeatable: T.isRepeatable,
          locations: T.locations.slice(),
          args: k(T.args),
        });
      }
    }
  });
  var bd = f((Io) => {
    "use strict";
    Object.defineProperty(Io, "__esModule", { value: !0 });
    Io.extendSchema = dw;
    Io.extendSchemaImpl = sv;
    var ow = Tt(),
      uw = he(),
      lw = ct(),
      cw = Jr(),
      Gs = Sl(),
      Xt = ue(),
      Zg = jn(),
      Re = ae(),
      Eo = Nt(),
      ev = zt(),
      tv = Sr(),
      rv = Nn(),
      pw = Fs(),
      nv = di(),
      iv = Ds();
    function dw(e, t, r) {
      (0, rv.assertSchema)(e),
        (t != null && t.kind === Xt.Kind.DOCUMENT) ||
          (0, ow.devAssert)(!1, "Must provide valid Document AST."),
        (r == null ? void 0 : r.assumeValid) !== !0 &&
          (r == null ? void 0 : r.assumeValidSDL) !== !0 &&
          (0, pw.assertValidSDLExtension)(t, e);
      let n = e.toConfig(),
        i = sv(n, t, r);
      return n === i ? e : new rv.GraphQLSchema(i);
    }
    function sv(e, t, r) {
      var n, i, s, a;
      let o = [],
        u = Object.create(null),
        l = [],
        c,
        d = [];
      for (let b of t.definitions)
        if (b.kind === Xt.Kind.SCHEMA_DEFINITION) c = b;
        else if (b.kind === Xt.Kind.SCHEMA_EXTENSION) d.push(b);
        else if ((0, Zg.isTypeDefinitionNode)(b)) o.push(b);
        else if ((0, Zg.isTypeExtensionNode)(b)) {
          let j = b.name.value,
            A = u[j];
          u[j] = A ? A.concat([b]) : [b];
        } else b.kind === Xt.Kind.DIRECTIVE_DEFINITION && l.push(b);
      if (
        Object.keys(u).length === 0 &&
        o.length === 0 &&
        l.length === 0 &&
        d.length === 0 &&
        c == null
      )
        return e;
      let p = Object.create(null);
      for (let b of e.types) p[b.name] = H(b);
      for (let b of o) {
        var m;
        let j = b.name.value;
        p[j] = (m = av[j]) !== null && m !== void 0 ? m : mr(b);
      }
      let v = O(
        O(
          {
            query: e.query && L(e.query),
            mutation: e.mutation && L(e.mutation),
            subscription: e.subscription && L(e.subscription),
          },
          c && _([c])
        ),
        _(d)
      );
      return N(
        O(
          {
            description:
              (n = c) === null ||
              n === void 0 ||
              (i = n.description) === null ||
              i === void 0
                ? void 0
                : i.value,
          },
          v
        ),
        {
          types: Object.values(p),
          directives: [...e.directives.map(C), ...l.map(F)],
          extensions: Object.create(null),
          astNode: (s = c) !== null && s !== void 0 ? s : e.astNode,
          extensionASTNodes: e.extensionASTNodes.concat(d),
          assumeValid:
            (a = r == null ? void 0 : r.assumeValid) !== null && a !== void 0
              ? a
              : !1,
        }
      );
      function E(b) {
        return (0, Re.isListType)(b)
          ? new Re.GraphQLList(E(b.ofType))
          : (0, Re.isNonNullType)(b)
          ? new Re.GraphQLNonNull(E(b.ofType))
          : L(b);
      }
      function L(b) {
        return p[b.name];
      }
      function C(b) {
        let j = b.toConfig();
        return new Eo.GraphQLDirective(
          N(O({}, j), { args: (0, Gs.mapValue)(j.args, g) })
        );
      }
      function H(b) {
        if ((0, ev.isIntrospectionType)(b) || (0, tv.isSpecifiedScalarType)(b))
          return b;
        if ((0, Re.isScalarType)(b)) return $(b);
        if ((0, Re.isObjectType)(b)) return k(b);
        if ((0, Re.isInterfaceType)(b)) return M(b);
        if ((0, Re.isUnionType)(b)) return de(b);
        if ((0, Re.isEnumType)(b)) return S(b);
        if ((0, Re.isInputObjectType)(b)) return B(b);
        (0, lw.invariant)(!1, "Unexpected type: " + (0, uw.inspect)(b));
      }
      function B(b) {
        var j;
        let A = b.toConfig(),
          x = (j = u[A.name]) !== null && j !== void 0 ? j : [];
        return new Re.GraphQLInputObjectType(
          N(O({}, A), {
            fields: () =>
              O(
                O(
                  {},
                  (0, Gs.mapValue)(A.fields, (be) =>
                    N(O({}, be), { type: E(be.type) })
                  )
                ),
                ie(x)
              ),
            extensionASTNodes: A.extensionASTNodes.concat(x),
          })
        );
      }
      function S(b) {
        var j;
        let A = b.toConfig(),
          x = (j = u[b.name]) !== null && j !== void 0 ? j : [];
        return new Re.GraphQLEnumType(
          N(O({}, A), {
            values: O(O({}, A.values), ne(x)),
            extensionASTNodes: A.extensionASTNodes.concat(x),
          })
        );
      }
      function $(b) {
        var j;
        let A = b.toConfig(),
          x = (j = u[A.name]) !== null && j !== void 0 ? j : [],
          be = A.specifiedByURL;
        for (let we of x) {
          var Be;
          be = (Be = ov(we)) !== null && Be !== void 0 ? Be : be;
        }
        return new Re.GraphQLScalarType(
          N(O({}, A), {
            specifiedByURL: be,
            extensionASTNodes: A.extensionASTNodes.concat(x),
          })
        );
      }
      function k(b) {
        var j;
        let A = b.toConfig(),
          x = (j = u[A.name]) !== null && j !== void 0 ? j : [];
        return new Re.GraphQLObjectType(
          N(O({}, A), {
            interfaces: () => [...b.getInterfaces().map(L), ...it(x)],
            fields: () => O(O({}, (0, Gs.mapValue)(A.fields, T)), q(x)),
            extensionASTNodes: A.extensionASTNodes.concat(x),
          })
        );
      }
      function M(b) {
        var j;
        let A = b.toConfig(),
          x = (j = u[A.name]) !== null && j !== void 0 ? j : [];
        return new Re.GraphQLInterfaceType(
          N(O({}, A), {
            interfaces: () => [...b.getInterfaces().map(L), ...it(x)],
            fields: () => O(O({}, (0, Gs.mapValue)(A.fields, T)), q(x)),
            extensionASTNodes: A.extensionASTNodes.concat(x),
          })
        );
      }
      function de(b) {
        var j;
        let A = b.toConfig(),
          x = (j = u[A.name]) !== null && j !== void 0 ? j : [];
        return new Re.GraphQLUnionType(
          N(O({}, A), {
            types: () => [...b.getTypes().map(L), ...Ae(x)],
            extensionASTNodes: A.extensionASTNodes.concat(x),
          })
        );
      }
      function T(b) {
        return N(O({}, b), {
          type: E(b.type),
          args: b.args && (0, Gs.mapValue)(b.args, g),
        });
      }
      function g(b) {
        return N(O({}, b), { type: E(b.type) });
      }
      function _(b) {
        let j = {};
        for (let x of b) {
          var A;
          let be = (A = x.operationTypes) !== null && A !== void 0 ? A : [];
          for (let Be of be) j[Be.operation] = I(Be.type);
        }
        return j;
      }
      function I(b) {
        var j;
        let A = b.name.value,
          x = (j = av[A]) !== null && j !== void 0 ? j : p[A];
        if (x === void 0) throw new Error(`Unknown type: "${A}".`);
        return x;
      }
      function z(b) {
        return b.kind === Xt.Kind.LIST_TYPE
          ? new Re.GraphQLList(z(b.type))
          : b.kind === Xt.Kind.NON_NULL_TYPE
          ? new Re.GraphQLNonNull(z(b.type))
          : I(b);
      }
      function F(b) {
        var j;
        return new Eo.GraphQLDirective({
          name: b.name.value,
          description:
            (j = b.description) === null || j === void 0 ? void 0 : j.value,
          locations: b.locations.map(({ value: A }) => A),
          isRepeatable: b.repeatable,
          args: ee(b.arguments),
          astNode: b,
        });
      }
      function q(b) {
        let j = Object.create(null);
        for (let be of b) {
          var A;
          let Be = (A = be.fields) !== null && A !== void 0 ? A : [];
          for (let we of Be) {
            var x;
            j[we.name.value] = {
              type: z(we.type),
              description:
                (x = we.description) === null || x === void 0
                  ? void 0
                  : x.value,
              args: ee(we.arguments),
              deprecationReason: No(we),
              astNode: we,
            };
          }
        }
        return j;
      }
      function ee(b) {
        let j = b != null ? b : [],
          A = Object.create(null);
        for (let be of j) {
          var x;
          let Be = z(be.type);
          A[be.name.value] = {
            type: Be,
            description:
              (x = be.description) === null || x === void 0 ? void 0 : x.value,
            defaultValue: (0, iv.valueFromAST)(be.defaultValue, Be),
            deprecationReason: No(be),
            astNode: be,
          };
        }
        return A;
      }
      function ie(b) {
        let j = Object.create(null);
        for (let be of b) {
          var A;
          let Be = (A = be.fields) !== null && A !== void 0 ? A : [];
          for (let we of Be) {
            var x;
            let Yn = z(we.type);
            j[we.name.value] = {
              type: Yn,
              description:
                (x = we.description) === null || x === void 0
                  ? void 0
                  : x.value,
              defaultValue: (0, iv.valueFromAST)(we.defaultValue, Yn),
              deprecationReason: No(we),
              astNode: we,
            };
          }
        }
        return j;
      }
      function ne(b) {
        let j = Object.create(null);
        for (let be of b) {
          var A;
          let Be = (A = be.values) !== null && A !== void 0 ? A : [];
          for (let we of Be) {
            var x;
            j[we.name.value] = {
              description:
                (x = we.description) === null || x === void 0
                  ? void 0
                  : x.value,
              deprecationReason: No(we),
              astNode: we,
            };
          }
        }
        return j;
      }
      function it(b) {
        return b.flatMap((j) => {
          var A, x;
          return (A =
            (x = j.interfaces) === null || x === void 0 ? void 0 : x.map(I)) !==
            null && A !== void 0
            ? A
            : [];
        });
      }
      function Ae(b) {
        return b.flatMap((j) => {
          var A, x;
          return (A =
            (x = j.types) === null || x === void 0 ? void 0 : x.map(I)) !==
            null && A !== void 0
            ? A
            : [];
        });
      }
      function mr(b) {
        var j;
        let A = b.name.value,
          x = (j = u[A]) !== null && j !== void 0 ? j : [];
        switch (b.kind) {
          case Xt.Kind.OBJECT_TYPE_DEFINITION: {
            var be;
            let sr = [b, ...x];
            return new Re.GraphQLObjectType({
              name: A,
              description:
                (be = b.description) === null || be === void 0
                  ? void 0
                  : be.value,
              interfaces: () => it(sr),
              fields: () => q(sr),
              astNode: b,
              extensionASTNodes: x,
            });
          }
          case Xt.Kind.INTERFACE_TYPE_DEFINITION: {
            var Be;
            let sr = [b, ...x];
            return new Re.GraphQLInterfaceType({
              name: A,
              description:
                (Be = b.description) === null || Be === void 0
                  ? void 0
                  : Be.value,
              interfaces: () => it(sr),
              fields: () => q(sr),
              astNode: b,
              extensionASTNodes: x,
            });
          }
          case Xt.Kind.ENUM_TYPE_DEFINITION: {
            var we;
            let sr = [b, ...x];
            return new Re.GraphQLEnumType({
              name: A,
              description:
                (we = b.description) === null || we === void 0
                  ? void 0
                  : we.value,
              values: ne(sr),
              astNode: b,
              extensionASTNodes: x,
            });
          }
          case Xt.Kind.UNION_TYPE_DEFINITION: {
            var Yn;
            let sr = [b, ...x];
            return new Re.GraphQLUnionType({
              name: A,
              description:
                (Yn = b.description) === null || Yn === void 0
                  ? void 0
                  : Yn.value,
              types: () => Ae(sr),
              astNode: b,
              extensionASTNodes: x,
            });
          }
          case Xt.Kind.SCALAR_TYPE_DEFINITION: {
            var Yu;
            return new Re.GraphQLScalarType({
              name: A,
              description:
                (Yu = b.description) === null || Yu === void 0
                  ? void 0
                  : Yu.value,
              specifiedByURL: ov(b),
              astNode: b,
              extensionASTNodes: x,
            });
          }
          case Xt.Kind.INPUT_OBJECT_TYPE_DEFINITION: {
            var Hu;
            let sr = [b, ...x];
            return new Re.GraphQLInputObjectType({
              name: A,
              description:
                (Hu = b.description) === null || Hu === void 0
                  ? void 0
                  : Hu.value,
              fields: () => ie(sr),
              astNode: b,
              extensionASTNodes: x,
            });
          }
        }
      }
    }
    var av = (0, cw.keyMap)(
      [...tv.specifiedScalarTypes, ...ev.introspectionTypes],
      (e) => e.name
    );
    function No(e) {
      let t = (0, nv.getDirectiveValues)(Eo.GraphQLDeprecatedDirective, e);
      return t == null ? void 0 : t.reason;
    }
    function ov(e) {
      let t = (0, nv.getDirectiveValues)(Eo.GraphQLSpecifiedByDirective, e);
      return t == null ? void 0 : t.url;
    }
  });
  var lv = f((jo) => {
    "use strict";
    Object.defineProperty(jo, "__esModule", { value: !0 });
    jo.buildASTSchema = uv;
    jo.buildSchema = Ow;
    var fw = Tt(),
      yw = ue(),
      hw = ri(),
      mw = Nt(),
      gw = Nn(),
      vw = Fs(),
      bw = bd();
    function uv(e, t) {
      (e != null && e.kind === yw.Kind.DOCUMENT) ||
        (0, fw.devAssert)(!1, "Must provide valid Document AST."),
        (t == null ? void 0 : t.assumeValid) !== !0 &&
          (t == null ? void 0 : t.assumeValidSDL) !== !0 &&
          (0, vw.assertValidSDL)(e);
      let r = {
          description: void 0,
          types: [],
          directives: [],
          extensions: Object.create(null),
          extensionASTNodes: [],
          assumeValid: !1,
        },
        n = (0, bw.extendSchemaImpl)(r, e, t);
      if (n.astNode == null)
        for (let s of n.types)
          switch (s.name) {
            case "Query":
              n.query = s;
              break;
            case "Mutation":
              n.mutation = s;
              break;
            case "Subscription":
              n.subscription = s;
              break;
          }
      let i = [
        ...n.directives,
        ...mw.specifiedDirectives.filter((s) =>
          n.directives.every((a) => a.name !== s.name)
        ),
      ];
      return new gw.GraphQLSchema(N(O({}, n), { directives: i }));
    }
    function Ow(e, t) {
      let r = (0, hw.parse)(e, {
        noLocation: t == null ? void 0 : t.noLocation,
        allowLegacyFragmentVariables:
          t == null ? void 0 : t.allowLegacyFragmentVariables,
      });
      return uv(r, {
        assumeValidSDL: t == null ? void 0 : t.assumeValidSDL,
        assumeValid: t == null ? void 0 : t.assumeValid,
      });
    }
  });
  var dv = f((Sd) => {
    "use strict";
    Object.defineProperty(Sd, "__esModule", { value: !0 });
    Sd.lexicographicSortSchema = Iw;
    var Sw = he(),
      Tw = ct(),
      _w = as(),
      cv = os(),
      _t = ae(),
      Aw = Nt(),
      Ew = zt(),
      Nw = Nn();
    function Iw(e) {
      let t = e.toConfig(),
        r = (0, _w.keyValMap)(Od(t.types), (p) => p.name, d);
      return new Nw.GraphQLSchema(
        N(O({}, t), {
          types: Object.values(r),
          directives: Od(t.directives).map(a),
          query: s(t.query),
          mutation: s(t.mutation),
          subscription: s(t.subscription),
        })
      );
      function n(p) {
        return (0, _t.isListType)(p)
          ? new _t.GraphQLList(n(p.ofType))
          : (0, _t.isNonNullType)(p)
          ? new _t.GraphQLNonNull(n(p.ofType))
          : i(p);
      }
      function i(p) {
        return r[p.name];
      }
      function s(p) {
        return p && i(p);
      }
      function a(p) {
        let m = p.toConfig();
        return new Aw.GraphQLDirective(
          N(O({}, m), { locations: pv(m.locations, (v) => v), args: o(m.args) })
        );
      }
      function o(p) {
        return Po(p, (m) => N(O({}, m), { type: n(m.type) }));
      }
      function u(p) {
        return Po(p, (m) =>
          N(O({}, m), { type: n(m.type), args: m.args && o(m.args) })
        );
      }
      function l(p) {
        return Po(p, (m) => N(O({}, m), { type: n(m.type) }));
      }
      function c(p) {
        return Od(p).map(i);
      }
      function d(p) {
        if ((0, _t.isScalarType)(p) || (0, Ew.isIntrospectionType)(p)) return p;
        if ((0, _t.isObjectType)(p)) {
          let m = p.toConfig();
          return new _t.GraphQLObjectType(
            N(O({}, m), {
              interfaces: () => c(m.interfaces),
              fields: () => u(m.fields),
            })
          );
        }
        if ((0, _t.isInterfaceType)(p)) {
          let m = p.toConfig();
          return new _t.GraphQLInterfaceType(
            N(O({}, m), {
              interfaces: () => c(m.interfaces),
              fields: () => u(m.fields),
            })
          );
        }
        if ((0, _t.isUnionType)(p)) {
          let m = p.toConfig();
          return new _t.GraphQLUnionType(
            N(O({}, m), { types: () => c(m.types) })
          );
        }
        if ((0, _t.isEnumType)(p)) {
          let m = p.toConfig();
          return new _t.GraphQLEnumType(
            N(O({}, m), { values: Po(m.values, (v) => v) })
          );
        }
        if ((0, _t.isInputObjectType)(p)) {
          let m = p.toConfig();
          return new _t.GraphQLInputObjectType(
            N(O({}, m), { fields: () => l(m.fields) })
          );
        }
        (0, Tw.invariant)(!1, "Unexpected type: " + (0, Sw.inspect)(p));
      }
    }
    function Po(e, t) {
      let r = Object.create(null);
      for (let n of Object.keys(e).sort(cv.naturalCompare)) r[n] = t(e[n]);
      return r;
    }
    function Od(e) {
      return pv(e, (t) => t.name);
    }
    function pv(e, t) {
      return e.slice().sort((r, n) => {
        let i = t(r),
          s = t(n);
        return (0, cv.naturalCompare)(i, s);
      });
    }
  });
  var bv = f((Qs) => {
    "use strict";
    Object.defineProperty(Qs, "__esModule", { value: !0 });
    Qs.printIntrospectionSchema = Fw;
    Qs.printSchema = Lw;
    Qs.printType = hv;
    var jw = he(),
      Pw = ct(),
      ww = Xi(),
      Td = ue(),
      wo = kt(),
      mi = ae(),
      _d = Nt(),
      fv = zt(),
      Dw = Sr(),
      Rw = Os();
    function Lw(e) {
      return yv(e, (t) => !(0, _d.isSpecifiedDirective)(t), qw);
    }
    function Fw(e) {
      return yv(e, _d.isSpecifiedDirective, fv.isIntrospectionType);
    }
    function qw(e) {
      return (
        !(0, Dw.isSpecifiedScalarType)(e) && !(0, fv.isIntrospectionType)(e)
      );
    }
    function yv(e, t, r) {
      let n = e.getDirectives().filter(t),
        i = Object.values(e.getTypeMap()).filter(r);
      return [Mw(e), ...n.map((s) => Kw(s)), ...i.map((s) => hv(s))].filter(
        Boolean
      ).join(`

`);
    }
    function Mw(e) {
      if (e.description == null && xw(e)) return;
      let t = [],
        r = e.getQueryType();
      r && t.push(`  query: ${r.name}`);
      let n = e.getMutationType();
      n && t.push(`  mutation: ${n.name}`);
      let i = e.getSubscriptionType();
      return (
        i && t.push(`  subscription: ${i.name}`),
        Zt(e) +
          `schema {
${t.join(`
`)}
}`
      );
    }
    function xw(e) {
      let t = e.getQueryType();
      if (t && t.name !== "Query") return !1;
      let r = e.getMutationType();
      if (r && r.name !== "Mutation") return !1;
      let n = e.getSubscriptionType();
      return !(n && n.name !== "Subscription");
    }
    function hv(e) {
      if ((0, mi.isScalarType)(e)) return Cw(e);
      if ((0, mi.isObjectType)(e)) return kw(e);
      if ((0, mi.isInterfaceType)(e)) return Gw(e);
      if ((0, mi.isUnionType)(e)) return Qw(e);
      if ((0, mi.isEnumType)(e)) return Uw(e);
      if ((0, mi.isInputObjectType)(e)) return Vw(e);
      (0, Pw.invariant)(!1, "Unexpected type: " + (0, jw.inspect)(e));
    }
    function Cw(e) {
      return Zt(e) + `scalar ${e.name}` + $w(e);
    }
    function mv(e) {
      let t = e.getInterfaces();
      return t.length ? " implements " + t.map((r) => r.name).join(" & ") : "";
    }
    function kw(e) {
      return Zt(e) + `type ${e.name}` + mv(e) + gv(e);
    }
    function Gw(e) {
      return Zt(e) + `interface ${e.name}` + mv(e) + gv(e);
    }
    function Qw(e) {
      let t = e.getTypes(),
        r = t.length ? " = " + t.join(" | ") : "";
      return Zt(e) + "union " + e.name + r;
    }
    function Uw(e) {
      let t = e
        .getValues()
        .map(
          (r, n) => Zt(r, "  ", !n) + "  " + r.name + Nd(r.deprecationReason)
        );
      return Zt(e) + `enum ${e.name}` + Ad(t);
    }
    function Vw(e) {
      let t = Object.values(e.getFields()).map(
        (r, n) => Zt(r, "  ", !n) + "  " + Ed(r)
      );
      return Zt(e) + `input ${e.name}` + Ad(t);
    }
    function gv(e) {
      let t = Object.values(e.getFields()).map(
        (r, n) =>
          Zt(r, "  ", !n) +
          "  " +
          r.name +
          vv(r.args, "  ") +
          ": " +
          String(r.type) +
          Nd(r.deprecationReason)
      );
      return Ad(t);
    }
    function Ad(e) {
      return e.length !== 0
        ? ` {
` +
            e.join(`
`) +
            `
}`
        : "";
    }
    function vv(e, t = "") {
      return e.length === 0
        ? ""
        : e.every((r) => !r.description)
        ? "(" + e.map(Ed).join(", ") + ")"
        : `(
` +
          e.map((r, n) => Zt(r, "  " + t, !n) + "  " + t + Ed(r)).join(`
`) +
          `
` +
          t +
          ")";
    }
    function Ed(e) {
      let t = (0, Rw.astFromValue)(e.defaultValue, e.type),
        r = e.name + ": " + String(e.type);
      return t && (r += ` = ${(0, wo.print)(t)}`), r + Nd(e.deprecationReason);
    }
    function Kw(e) {
      return (
        Zt(e) +
        "directive @" +
        e.name +
        vv(e.args) +
        (e.isRepeatable ? " repeatable" : "") +
        " on " +
        e.locations.join(" | ")
      );
    }
    function Nd(e) {
      return e == null
        ? ""
        : e !== _d.DEFAULT_DEPRECATION_REASON
        ? ` @deprecated(reason: ${(0, wo.print)({
            kind: Td.Kind.STRING,
            value: e,
          })})`
        : " @deprecated";
    }
    function $w(e) {
      return e.specifiedByURL == null
        ? ""
        : ` @specifiedBy(url: ${(0, wo.print)({
            kind: Td.Kind.STRING,
            value: e.specifiedByURL,
          })})`;
    }
    function Zt(e, t = "", r = !0) {
      let { description: n } = e;
      if (n == null) return "";
      let i = (0, wo.print)({
        kind: Td.Kind.STRING,
        value: n,
        block: (0, ww.isPrintableAsBlockString)(n),
      });
      return (
        (t && !r
          ? `
` + t
          : t) +
        i.replace(
          /\n/g,
          `
` + t
        ) +
        `
`
      );
    }
  });
  var Ov = f((Id) => {
    "use strict";
    Object.defineProperty(Id, "__esModule", { value: !0 });
    Id.concatAST = zw;
    var Bw = ue();
    function zw(e) {
      let t = [];
      for (let r of e) t.push(...r.definitions);
      return { kind: Bw.Kind.DOCUMENT, definitions: t };
    }
  });
  var _v = f((jd) => {
    "use strict";
    Object.defineProperty(jd, "__esModule", { value: !0 });
    jd.separateOperations = Yw;
    var Do = ue(),
      Ww = bn();
    function Yw(e) {
      let t = [],
        r = Object.create(null);
      for (let i of e.definitions)
        switch (i.kind) {
          case Do.Kind.OPERATION_DEFINITION:
            t.push(i);
            break;
          case Do.Kind.FRAGMENT_DEFINITION:
            r[i.name.value] = Tv(i.selectionSet);
            break;
          default:
        }
      let n = Object.create(null);
      for (let i of t) {
        let s = new Set();
        for (let o of Tv(i.selectionSet)) Sv(s, r, o);
        let a = i.name ? i.name.value : "";
        n[a] = {
          kind: Do.Kind.DOCUMENT,
          definitions: e.definitions.filter(
            (o) =>
              o === i ||
              (o.kind === Do.Kind.FRAGMENT_DEFINITION && s.has(o.name.value))
          ),
        };
      }
      return n;
    }
    function Sv(e, t, r) {
      if (!e.has(r)) {
        e.add(r);
        let n = t[r];
        if (n !== void 0) for (let i of n) Sv(e, t, i);
      }
    }
    function Tv(e) {
      let t = [];
      return (
        (0, Ww.visit)(e, {
          FragmentSpread(r) {
            t.push(r.name.value);
          },
        }),
        t
      );
    }
  });
  var Nv = f((wd) => {
    "use strict";
    Object.defineProperty(wd, "__esModule", { value: !0 });
    wd.stripIgnoredCharacters = Jw;
    var Hw = Xi(),
      Av = Pa(),
      Ev = Ra(),
      Pd = es();
    function Jw(e) {
      let t = (0, Ev.isSource)(e) ? e : new Ev.Source(e),
        r = t.body,
        n = new Av.Lexer(t),
        i = "",
        s = !1;
      for (; n.advance().kind !== Pd.TokenKind.EOF; ) {
        let a = n.token,
          o = a.kind,
          u = !(0, Av.isPunctuatorTokenKind)(a.kind);
        s && (u || a.kind === Pd.TokenKind.SPREAD) && (i += " ");
        let l = r.slice(a.start, a.end);
        o === Pd.TokenKind.BLOCK_STRING
          ? (i += (0, Hw.printBlockString)(a.value, { minimize: !0 }))
          : (i += l),
          (s = u);
      }
      return i;
    }
  });
  var jv = f((Ro) => {
    "use strict";
    Object.defineProperty(Ro, "__esModule", { value: !0 });
    Ro.assertValidName = tD;
    Ro.isValidNameError = Iv;
    var Xw = Tt(),
      Zw = W(),
      eD = us();
    function tD(e) {
      let t = Iv(e);
      if (t) throw t;
      return e;
    }
    function Iv(e) {
      if (
        (typeof e == "string" ||
          (0, Xw.devAssert)(!1, "Expected name to be a string."),
        e.startsWith("__"))
      )
        return new Zw.GraphQLError(
          `Name "${e}" must not begin with "__", which is reserved by GraphQL introspection.`
        );
      try {
        (0, eD.assertName)(e);
      } catch (t) {
        return t;
      }
    }
  });
  var Mv = f((Ir) => {
    "use strict";
    Object.defineProperty(Ir, "__esModule", { value: !0 });
    Ir.DangerousChangeType = Ir.BreakingChangeType = void 0;
    Ir.findBreakingChanges = oD;
    Ir.findDangerousChanges = uD;
    var rD = he(),
      Pv = ct(),
      wv = Jr(),
      nD = kt(),
      pe = ae(),
      iD = Sr(),
      sD = Os(),
      aD = Gc(),
      Me;
    Ir.BreakingChangeType = Me;
    (function (e) {
      (e.TYPE_REMOVED = "TYPE_REMOVED"),
        (e.TYPE_CHANGED_KIND = "TYPE_CHANGED_KIND"),
        (e.TYPE_REMOVED_FROM_UNION = "TYPE_REMOVED_FROM_UNION"),
        (e.VALUE_REMOVED_FROM_ENUM = "VALUE_REMOVED_FROM_ENUM"),
        (e.REQUIRED_INPUT_FIELD_ADDED = "REQUIRED_INPUT_FIELD_ADDED"),
        (e.IMPLEMENTED_INTERFACE_REMOVED = "IMPLEMENTED_INTERFACE_REMOVED"),
        (e.FIELD_REMOVED = "FIELD_REMOVED"),
        (e.FIELD_CHANGED_KIND = "FIELD_CHANGED_KIND"),
        (e.REQUIRED_ARG_ADDED = "REQUIRED_ARG_ADDED"),
        (e.ARG_REMOVED = "ARG_REMOVED"),
        (e.ARG_CHANGED_KIND = "ARG_CHANGED_KIND"),
        (e.DIRECTIVE_REMOVED = "DIRECTIVE_REMOVED"),
        (e.DIRECTIVE_ARG_REMOVED = "DIRECTIVE_ARG_REMOVED"),
        (e.REQUIRED_DIRECTIVE_ARG_ADDED = "REQUIRED_DIRECTIVE_ARG_ADDED"),
        (e.DIRECTIVE_REPEATABLE_REMOVED = "DIRECTIVE_REPEATABLE_REMOVED"),
        (e.DIRECTIVE_LOCATION_REMOVED = "DIRECTIVE_LOCATION_REMOVED");
    })(Me || (Ir.BreakingChangeType = Me = {}));
    var fr;
    Ir.DangerousChangeType = fr;
    (function (e) {
      (e.VALUE_ADDED_TO_ENUM = "VALUE_ADDED_TO_ENUM"),
        (e.TYPE_ADDED_TO_UNION = "TYPE_ADDED_TO_UNION"),
        (e.OPTIONAL_INPUT_FIELD_ADDED = "OPTIONAL_INPUT_FIELD_ADDED"),
        (e.OPTIONAL_ARG_ADDED = "OPTIONAL_ARG_ADDED"),
        (e.IMPLEMENTED_INTERFACE_ADDED = "IMPLEMENTED_INTERFACE_ADDED"),
        (e.ARG_DEFAULT_VALUE_CHANGE = "ARG_DEFAULT_VALUE_CHANGE");
    })(fr || (Ir.DangerousChangeType = fr = {}));
    function oD(e, t) {
      return Dv(e, t).filter((r) => r.type in Me);
    }
    function uD(e, t) {
      return Dv(e, t).filter((r) => r.type in fr);
    }
    function Dv(e, t) {
      return [...cD(e, t), ...lD(e, t)];
    }
    function lD(e, t) {
      let r = [],
        n = Cr(e.getDirectives(), t.getDirectives());
      for (let i of n.removed)
        r.push({
          type: Me.DIRECTIVE_REMOVED,
          description: `${i.name} was removed.`,
        });
      for (let [i, s] of n.persisted) {
        let a = Cr(i.args, s.args);
        for (let o of a.added)
          (0, pe.isRequiredArgument)(o) &&
            r.push({
              type: Me.REQUIRED_DIRECTIVE_ARG_ADDED,
              description: `A required arg ${o.name} on directive ${i.name} was added.`,
            });
        for (let o of a.removed)
          r.push({
            type: Me.DIRECTIVE_ARG_REMOVED,
            description: `${o.name} was removed from ${i.name}.`,
          });
        i.isRepeatable &&
          !s.isRepeatable &&
          r.push({
            type: Me.DIRECTIVE_REPEATABLE_REMOVED,
            description: `Repeatable flag was removed from ${i.name}.`,
          });
        for (let o of i.locations)
          s.locations.includes(o) ||
            r.push({
              type: Me.DIRECTIVE_LOCATION_REMOVED,
              description: `${o} was removed from ${i.name}.`,
            });
      }
      return r;
    }
    function cD(e, t) {
      let r = [],
        n = Cr(Object.values(e.getTypeMap()), Object.values(t.getTypeMap()));
      for (let i of n.removed)
        r.push({
          type: Me.TYPE_REMOVED,
          description: (0, iD.isSpecifiedScalarType)(i)
            ? `Standard scalar ${i.name} was removed because it is not referenced anymore.`
            : `${i.name} was removed.`,
        });
      for (let [i, s] of n.persisted)
        (0, pe.isEnumType)(i) && (0, pe.isEnumType)(s)
          ? r.push(...fD(i, s))
          : (0, pe.isUnionType)(i) && (0, pe.isUnionType)(s)
          ? r.push(...dD(i, s))
          : (0, pe.isInputObjectType)(i) && (0, pe.isInputObjectType)(s)
          ? r.push(...pD(i, s))
          : (0, pe.isObjectType)(i) && (0, pe.isObjectType)(s)
          ? r.push(...Lv(i, s), ...Rv(i, s))
          : (0, pe.isInterfaceType)(i) && (0, pe.isInterfaceType)(s)
          ? r.push(...Lv(i, s), ...Rv(i, s))
          : i.constructor !== s.constructor &&
            r.push({
              type: Me.TYPE_CHANGED_KIND,
              description: `${i.name} changed from ${Fv(i)} to ${Fv(s)}.`,
            });
      return r;
    }
    function pD(e, t) {
      let r = [],
        n = Cr(Object.values(e.getFields()), Object.values(t.getFields()));
      for (let i of n.added)
        (0, pe.isRequiredInputField)(i)
          ? r.push({
              type: Me.REQUIRED_INPUT_FIELD_ADDED,
              description: `A required field ${i.name} on input type ${e.name} was added.`,
            })
          : r.push({
              type: fr.OPTIONAL_INPUT_FIELD_ADDED,
              description: `An optional field ${i.name} on input type ${e.name} was added.`,
            });
      for (let i of n.removed)
        r.push({
          type: Me.FIELD_REMOVED,
          description: `${e.name}.${i.name} was removed.`,
        });
      for (let [i, s] of n.persisted)
        Vs(i.type, s.type) ||
          r.push({
            type: Me.FIELD_CHANGED_KIND,
            description: `${e.name}.${i.name} changed type from ${String(
              i.type
            )} to ${String(s.type)}.`,
          });
      return r;
    }
    function dD(e, t) {
      let r = [],
        n = Cr(e.getTypes(), t.getTypes());
      for (let i of n.added)
        r.push({
          type: fr.TYPE_ADDED_TO_UNION,
          description: `${i.name} was added to union type ${e.name}.`,
        });
      for (let i of n.removed)
        r.push({
          type: Me.TYPE_REMOVED_FROM_UNION,
          description: `${i.name} was removed from union type ${e.name}.`,
        });
      return r;
    }
    function fD(e, t) {
      let r = [],
        n = Cr(e.getValues(), t.getValues());
      for (let i of n.added)
        r.push({
          type: fr.VALUE_ADDED_TO_ENUM,
          description: `${i.name} was added to enum type ${e.name}.`,
        });
      for (let i of n.removed)
        r.push({
          type: Me.VALUE_REMOVED_FROM_ENUM,
          description: `${i.name} was removed from enum type ${e.name}.`,
        });
      return r;
    }
    function Rv(e, t) {
      let r = [],
        n = Cr(e.getInterfaces(), t.getInterfaces());
      for (let i of n.added)
        r.push({
          type: fr.IMPLEMENTED_INTERFACE_ADDED,
          description: `${i.name} added to interfaces implemented by ${e.name}.`,
        });
      for (let i of n.removed)
        r.push({
          type: Me.IMPLEMENTED_INTERFACE_REMOVED,
          description: `${e.name} no longer implements interface ${i.name}.`,
        });
      return r;
    }
    function Lv(e, t) {
      let r = [],
        n = Cr(Object.values(e.getFields()), Object.values(t.getFields()));
      for (let i of n.removed)
        r.push({
          type: Me.FIELD_REMOVED,
          description: `${e.name}.${i.name} was removed.`,
        });
      for (let [i, s] of n.persisted)
        r.push(...yD(e, i, s)),
          Us(i.type, s.type) ||
            r.push({
              type: Me.FIELD_CHANGED_KIND,
              description: `${e.name}.${i.name} changed type from ${String(
                i.type
              )} to ${String(s.type)}.`,
            });
      return r;
    }
    function yD(e, t, r) {
      let n = [],
        i = Cr(t.args, r.args);
      for (let s of i.removed)
        n.push({
          type: Me.ARG_REMOVED,
          description: `${e.name}.${t.name} arg ${s.name} was removed.`,
        });
      for (let [s, a] of i.persisted)
        if (!Vs(s.type, a.type))
          n.push({
            type: Me.ARG_CHANGED_KIND,
            description: `${e.name}.${t.name} arg ${
              s.name
            } has changed type from ${String(s.type)} to ${String(a.type)}.`,
          });
        else if (s.defaultValue !== void 0)
          if (a.defaultValue === void 0)
            n.push({
              type: fr.ARG_DEFAULT_VALUE_CHANGE,
              description: `${e.name}.${t.name} arg ${s.name} defaultValue was removed.`,
            });
          else {
            let u = qv(s.defaultValue, s.type),
              l = qv(a.defaultValue, a.type);
            u !== l &&
              n.push({
                type: fr.ARG_DEFAULT_VALUE_CHANGE,
                description: `${e.name}.${t.name} arg ${s.name} has changed defaultValue from ${u} to ${l}.`,
              });
          }
      for (let s of i.added)
        (0, pe.isRequiredArgument)(s)
          ? n.push({
              type: Me.REQUIRED_ARG_ADDED,
              description: `A required arg ${s.name} on ${e.name}.${t.name} was added.`,
            })
          : n.push({
              type: fr.OPTIONAL_ARG_ADDED,
              description: `An optional arg ${s.name} on ${e.name}.${t.name} was added.`,
            });
      return n;
    }
    function Us(e, t) {
      return (0, pe.isListType)(e)
        ? ((0, pe.isListType)(t) && Us(e.ofType, t.ofType)) ||
            ((0, pe.isNonNullType)(t) && Us(e, t.ofType))
        : (0, pe.isNonNullType)(e)
        ? (0, pe.isNonNullType)(t) && Us(e.ofType, t.ofType)
        : ((0, pe.isNamedType)(t) && e.name === t.name) ||
          ((0, pe.isNonNullType)(t) && Us(e, t.ofType));
    }
    function Vs(e, t) {
      return (0, pe.isListType)(e)
        ? (0, pe.isListType)(t) && Vs(e.ofType, t.ofType)
        : (0, pe.isNonNullType)(e)
        ? ((0, pe.isNonNullType)(t) && Vs(e.ofType, t.ofType)) ||
          (!(0, pe.isNonNullType)(t) && Vs(e.ofType, t))
        : (0, pe.isNamedType)(t) && e.name === t.name;
    }
    function Fv(e) {
      if ((0, pe.isScalarType)(e)) return "a Scalar type";
      if ((0, pe.isObjectType)(e)) return "an Object type";
      if ((0, pe.isInterfaceType)(e)) return "an Interface type";
      if ((0, pe.isUnionType)(e)) return "a Union type";
      if ((0, pe.isEnumType)(e)) return "an Enum type";
      if ((0, pe.isInputObjectType)(e)) return "an Input type";
      (0, Pv.invariant)(!1, "Unexpected type: " + (0, rD.inspect)(e));
    }
    function qv(e, t) {
      let r = (0, sD.astFromValue)(e, t);
      return (
        r != null || (0, Pv.invariant)(!1),
        (0, nD.print)((0, aD.sortValueNode)(r))
      );
    }
    function Cr(e, t) {
      let r = [],
        n = [],
        i = [],
        s = (0, wv.keyMap)(e, ({ name: o }) => o),
        a = (0, wv.keyMap)(t, ({ name: o }) => o);
      for (let o of e) {
        let u = a[o.name];
        u === void 0 ? n.push(o) : i.push([o, u]);
      }
      for (let o of t) s[o.name] === void 0 && r.push(o);
      return { added: r, persisted: i, removed: n };
    }
  });
  var Gv = f((ce) => {
    "use strict";
    Object.defineProperty(ce, "__esModule", { value: !0 });
    Object.defineProperty(ce, "BreakingChangeType", {
      enumerable: !0,
      get: function () {
        return Lo.BreakingChangeType;
      },
    });
    Object.defineProperty(ce, "DangerousChangeType", {
      enumerable: !0,
      get: function () {
        return Lo.DangerousChangeType;
      },
    });
    Object.defineProperty(ce, "TypeInfo", {
      enumerable: !0,
      get: function () {
        return Cv.TypeInfo;
      },
    });
    Object.defineProperty(ce, "assertValidName", {
      enumerable: !0,
      get: function () {
        return kv.assertValidName;
      },
    });
    Object.defineProperty(ce, "astFromValue", {
      enumerable: !0,
      get: function () {
        return ED.astFromValue;
      },
    });
    Object.defineProperty(ce, "buildASTSchema", {
      enumerable: !0,
      get: function () {
        return xv.buildASTSchema;
      },
    });
    Object.defineProperty(ce, "buildClientSchema", {
      enumerable: !0,
      get: function () {
        return bD.buildClientSchema;
      },
    });
    Object.defineProperty(ce, "buildSchema", {
      enumerable: !0,
      get: function () {
        return xv.buildSchema;
      },
    });
    Object.defineProperty(ce, "coerceInputValue", {
      enumerable: !0,
      get: function () {
        return ND.coerceInputValue;
      },
    });
    Object.defineProperty(ce, "concatAST", {
      enumerable: !0,
      get: function () {
        return ID.concatAST;
      },
    });
    Object.defineProperty(ce, "doTypesOverlap", {
      enumerable: !0,
      get: function () {
        return Rd.doTypesOverlap;
      },
    });
    Object.defineProperty(ce, "extendSchema", {
      enumerable: !0,
      get: function () {
        return OD.extendSchema;
      },
    });
    Object.defineProperty(ce, "findBreakingChanges", {
      enumerable: !0,
      get: function () {
        return Lo.findBreakingChanges;
      },
    });
    Object.defineProperty(ce, "findDangerousChanges", {
      enumerable: !0,
      get: function () {
        return Lo.findDangerousChanges;
      },
    });
    Object.defineProperty(ce, "getIntrospectionQuery", {
      enumerable: !0,
      get: function () {
        return hD.getIntrospectionQuery;
      },
    });
    Object.defineProperty(ce, "getOperationAST", {
      enumerable: !0,
      get: function () {
        return mD.getOperationAST;
      },
    });
    Object.defineProperty(ce, "getOperationRootType", {
      enumerable: !0,
      get: function () {
        return gD.getOperationRootType;
      },
    });
    Object.defineProperty(ce, "introspectionFromSchema", {
      enumerable: !0,
      get: function () {
        return vD.introspectionFromSchema;
      },
    });
    Object.defineProperty(ce, "isEqualType", {
      enumerable: !0,
      get: function () {
        return Rd.isEqualType;
      },
    });
    Object.defineProperty(ce, "isTypeSubTypeOf", {
      enumerable: !0,
      get: function () {
        return Rd.isTypeSubTypeOf;
      },
    });
    Object.defineProperty(ce, "isValidNameError", {
      enumerable: !0,
      get: function () {
        return kv.isValidNameError;
      },
    });
    Object.defineProperty(ce, "lexicographicSortSchema", {
      enumerable: !0,
      get: function () {
        return SD.lexicographicSortSchema;
      },
    });
    Object.defineProperty(ce, "printIntrospectionSchema", {
      enumerable: !0,
      get: function () {
        return Dd.printIntrospectionSchema;
      },
    });
    Object.defineProperty(ce, "printSchema", {
      enumerable: !0,
      get: function () {
        return Dd.printSchema;
      },
    });
    Object.defineProperty(ce, "printType", {
      enumerable: !0,
      get: function () {
        return Dd.printType;
      },
    });
    Object.defineProperty(ce, "separateOperations", {
      enumerable: !0,
      get: function () {
        return jD.separateOperations;
      },
    });
    Object.defineProperty(ce, "stripIgnoredCharacters", {
      enumerable: !0,
      get: function () {
        return PD.stripIgnoredCharacters;
      },
    });
    Object.defineProperty(ce, "typeFromAST", {
      enumerable: !0,
      get: function () {
        return TD.typeFromAST;
      },
    });
    Object.defineProperty(ce, "valueFromAST", {
      enumerable: !0,
      get: function () {
        return _D.valueFromAST;
      },
    });
    Object.defineProperty(ce, "valueFromASTUntyped", {
      enumerable: !0,
      get: function () {
        return AD.valueFromASTUntyped;
      },
    });
    Object.defineProperty(ce, "visitWithTypeInfo", {
      enumerable: !0,
      get: function () {
        return Cv.visitWithTypeInfo;
      },
    });
    var hD = yd(),
      mD = Wg(),
      gD = Yg(),
      vD = Hg(),
      bD = Xg(),
      xv = lv(),
      OD = bd(),
      SD = dv(),
      Dd = bv(),
      TD = Tr(),
      _D = Ds(),
      AD = Dl(),
      ED = Os(),
      Cv = Ja(),
      ND = ip(),
      ID = Ov(),
      jD = _v(),
      PD = Nv(),
      Rd = fs(),
      kv = jv(),
      Lo = Mv();
  });
  var Fo = f((h) => {
    "use strict";
    Object.defineProperty(h, "__esModule", { value: !0 });
    Object.defineProperty(h, "BREAK", {
      enumerable: !0,
      get: function () {
        return fe.BREAK;
      },
    });
    Object.defineProperty(h, "BreakingChangeType", {
      enumerable: !0,
      get: function () {
        return ye.BreakingChangeType;
      },
    });
    Object.defineProperty(h, "DEFAULT_DEPRECATION_REASON", {
      enumerable: !0,
      get: function () {
        return w.DEFAULT_DEPRECATION_REASON;
      },
    });
    Object.defineProperty(h, "DangerousChangeType", {
      enumerable: !0,
      get: function () {
        return ye.DangerousChangeType;
      },
    });
    Object.defineProperty(h, "DirectiveLocation", {
      enumerable: !0,
      get: function () {
        return fe.DirectiveLocation;
      },
    });
    Object.defineProperty(h, "ExecutableDefinitionsRule", {
      enumerable: !0,
      get: function () {
        return re.ExecutableDefinitionsRule;
      },
    });
    Object.defineProperty(h, "FieldsOnCorrectTypeRule", {
      enumerable: !0,
      get: function () {
        return re.FieldsOnCorrectTypeRule;
      },
    });
    Object.defineProperty(h, "FragmentsOnCompositeTypesRule", {
      enumerable: !0,
      get: function () {
        return re.FragmentsOnCompositeTypesRule;
      },
    });
    Object.defineProperty(h, "GRAPHQL_MAX_INT", {
      enumerable: !0,
      get: function () {
        return w.GRAPHQL_MAX_INT;
      },
    });
    Object.defineProperty(h, "GRAPHQL_MIN_INT", {
      enumerable: !0,
      get: function () {
        return w.GRAPHQL_MIN_INT;
      },
    });
    Object.defineProperty(h, "GraphQLBoolean", {
      enumerable: !0,
      get: function () {
        return w.GraphQLBoolean;
      },
    });
    Object.defineProperty(h, "GraphQLDeprecatedDirective", {
      enumerable: !0,
      get: function () {
        return w.GraphQLDeprecatedDirective;
      },
    });
    Object.defineProperty(h, "GraphQLDirective", {
      enumerable: !0,
      get: function () {
        return w.GraphQLDirective;
      },
    });
    Object.defineProperty(h, "GraphQLEnumType", {
      enumerable: !0,
      get: function () {
        return w.GraphQLEnumType;
      },
    });
    Object.defineProperty(h, "GraphQLError", {
      enumerable: !0,
      get: function () {
        return Ks.GraphQLError;
      },
    });
    Object.defineProperty(h, "GraphQLFloat", {
      enumerable: !0,
      get: function () {
        return w.GraphQLFloat;
      },
    });
    Object.defineProperty(h, "GraphQLID", {
      enumerable: !0,
      get: function () {
        return w.GraphQLID;
      },
    });
    Object.defineProperty(h, "GraphQLIncludeDirective", {
      enumerable: !0,
      get: function () {
        return w.GraphQLIncludeDirective;
      },
    });
    Object.defineProperty(h, "GraphQLInputObjectType", {
      enumerable: !0,
      get: function () {
        return w.GraphQLInputObjectType;
      },
    });
    Object.defineProperty(h, "GraphQLInt", {
      enumerable: !0,
      get: function () {
        return w.GraphQLInt;
      },
    });
    Object.defineProperty(h, "GraphQLInterfaceType", {
      enumerable: !0,
      get: function () {
        return w.GraphQLInterfaceType;
      },
    });
    Object.defineProperty(h, "GraphQLList", {
      enumerable: !0,
      get: function () {
        return w.GraphQLList;
      },
    });
    Object.defineProperty(h, "GraphQLNonNull", {
      enumerable: !0,
      get: function () {
        return w.GraphQLNonNull;
      },
    });
    Object.defineProperty(h, "GraphQLObjectType", {
      enumerable: !0,
      get: function () {
        return w.GraphQLObjectType;
      },
    });
    Object.defineProperty(h, "GraphQLScalarType", {
      enumerable: !0,
      get: function () {
        return w.GraphQLScalarType;
      },
    });
    Object.defineProperty(h, "GraphQLSchema", {
      enumerable: !0,
      get: function () {
        return w.GraphQLSchema;
      },
    });
    Object.defineProperty(h, "GraphQLSkipDirective", {
      enumerable: !0,
      get: function () {
        return w.GraphQLSkipDirective;
      },
    });
    Object.defineProperty(h, "GraphQLSpecifiedByDirective", {
      enumerable: !0,
      get: function () {
        return w.GraphQLSpecifiedByDirective;
      },
    });
    Object.defineProperty(h, "GraphQLString", {
      enumerable: !0,
      get: function () {
        return w.GraphQLString;
      },
    });
    Object.defineProperty(h, "GraphQLUnionType", {
      enumerable: !0,
      get: function () {
        return w.GraphQLUnionType;
      },
    });
    Object.defineProperty(h, "Kind", {
      enumerable: !0,
      get: function () {
        return fe.Kind;
      },
    });
    Object.defineProperty(h, "KnownArgumentNamesRule", {
      enumerable: !0,
      get: function () {
        return re.KnownArgumentNamesRule;
      },
    });
    Object.defineProperty(h, "KnownDirectivesRule", {
      enumerable: !0,
      get: function () {
        return re.KnownDirectivesRule;
      },
    });
    Object.defineProperty(h, "KnownFragmentNamesRule", {
      enumerable: !0,
      get: function () {
        return re.KnownFragmentNamesRule;
      },
    });
    Object.defineProperty(h, "KnownTypeNamesRule", {
      enumerable: !0,
      get: function () {
        return re.KnownTypeNamesRule;
      },
    });
    Object.defineProperty(h, "Lexer", {
      enumerable: !0,
      get: function () {
        return fe.Lexer;
      },
    });
    Object.defineProperty(h, "Location", {
      enumerable: !0,
      get: function () {
        return fe.Location;
      },
    });
    Object.defineProperty(h, "LoneAnonymousOperationRule", {
      enumerable: !0,
      get: function () {
        return re.LoneAnonymousOperationRule;
      },
    });
    Object.defineProperty(h, "LoneSchemaDefinitionRule", {
      enumerable: !0,
      get: function () {
        return re.LoneSchemaDefinitionRule;
      },
    });
    Object.defineProperty(h, "NoDeprecatedCustomRule", {
      enumerable: !0,
      get: function () {
        return re.NoDeprecatedCustomRule;
      },
    });
    Object.defineProperty(h, "NoFragmentCyclesRule", {
      enumerable: !0,
      get: function () {
        return re.NoFragmentCyclesRule;
      },
    });
    Object.defineProperty(h, "NoSchemaIntrospectionCustomRule", {
      enumerable: !0,
      get: function () {
        return re.NoSchemaIntrospectionCustomRule;
      },
    });
    Object.defineProperty(h, "NoUndefinedVariablesRule", {
      enumerable: !0,
      get: function () {
        return re.NoUndefinedVariablesRule;
      },
    });
    Object.defineProperty(h, "NoUnusedFragmentsRule", {
      enumerable: !0,
      get: function () {
        return re.NoUnusedFragmentsRule;
      },
    });
    Object.defineProperty(h, "NoUnusedVariablesRule", {
      enumerable: !0,
      get: function () {
        return re.NoUnusedVariablesRule;
      },
    });
    Object.defineProperty(h, "OperationTypeNode", {
      enumerable: !0,
      get: function () {
        return fe.OperationTypeNode;
      },
    });
    Object.defineProperty(h, "OverlappingFieldsCanBeMergedRule", {
      enumerable: !0,
      get: function () {
        return re.OverlappingFieldsCanBeMergedRule;
      },
    });
    Object.defineProperty(h, "PossibleFragmentSpreadsRule", {
      enumerable: !0,
      get: function () {
        return re.PossibleFragmentSpreadsRule;
      },
    });
    Object.defineProperty(h, "PossibleTypeExtensionsRule", {
      enumerable: !0,
      get: function () {
        return re.PossibleTypeExtensionsRule;
      },
    });
    Object.defineProperty(h, "ProvidedRequiredArgumentsRule", {
      enumerable: !0,
      get: function () {
        return re.ProvidedRequiredArgumentsRule;
      },
    });
    Object.defineProperty(h, "ScalarLeafsRule", {
      enumerable: !0,
      get: function () {
        return re.ScalarLeafsRule;
      },
    });
    Object.defineProperty(h, "SchemaMetaFieldDef", {
      enumerable: !0,
      get: function () {
        return w.SchemaMetaFieldDef;
      },
    });
    Object.defineProperty(h, "SingleFieldSubscriptionsRule", {
      enumerable: !0,
      get: function () {
        return re.SingleFieldSubscriptionsRule;
      },
    });
    Object.defineProperty(h, "Source", {
      enumerable: !0,
      get: function () {
        return fe.Source;
      },
    });
    Object.defineProperty(h, "Token", {
      enumerable: !0,
      get: function () {
        return fe.Token;
      },
    });
    Object.defineProperty(h, "TokenKind", {
      enumerable: !0,
      get: function () {
        return fe.TokenKind;
      },
    });
    Object.defineProperty(h, "TypeInfo", {
      enumerable: !0,
      get: function () {
        return ye.TypeInfo;
      },
    });
    Object.defineProperty(h, "TypeKind", {
      enumerable: !0,
      get: function () {
        return w.TypeKind;
      },
    });
    Object.defineProperty(h, "TypeMetaFieldDef", {
      enumerable: !0,
      get: function () {
        return w.TypeMetaFieldDef;
      },
    });
    Object.defineProperty(h, "TypeNameMetaFieldDef", {
      enumerable: !0,
      get: function () {
        return w.TypeNameMetaFieldDef;
      },
    });
    Object.defineProperty(h, "UniqueArgumentDefinitionNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueArgumentDefinitionNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueArgumentNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueArgumentNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueDirectiveNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueDirectiveNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueDirectivesPerLocationRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueDirectivesPerLocationRule;
      },
    });
    Object.defineProperty(h, "UniqueEnumValueNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueEnumValueNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueFieldDefinitionNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueFieldDefinitionNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueFragmentNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueFragmentNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueInputFieldNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueInputFieldNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueOperationNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueOperationNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueOperationTypesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueOperationTypesRule;
      },
    });
    Object.defineProperty(h, "UniqueTypeNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueTypeNamesRule;
      },
    });
    Object.defineProperty(h, "UniqueVariableNamesRule", {
      enumerable: !0,
      get: function () {
        return re.UniqueVariableNamesRule;
      },
    });
    Object.defineProperty(h, "ValidationContext", {
      enumerable: !0,
      get: function () {
        return re.ValidationContext;
      },
    });
    Object.defineProperty(h, "ValuesOfCorrectTypeRule", {
      enumerable: !0,
      get: function () {
        return re.ValuesOfCorrectTypeRule;
      },
    });
    Object.defineProperty(h, "VariablesAreInputTypesRule", {
      enumerable: !0,
      get: function () {
        return re.VariablesAreInputTypesRule;
      },
    });
    Object.defineProperty(h, "VariablesInAllowedPositionRule", {
      enumerable: !0,
      get: function () {
        return re.VariablesInAllowedPositionRule;
      },
    });
    Object.defineProperty(h, "__Directive", {
      enumerable: !0,
      get: function () {
        return w.__Directive;
      },
    });
    Object.defineProperty(h, "__DirectiveLocation", {
      enumerable: !0,
      get: function () {
        return w.__DirectiveLocation;
      },
    });
    Object.defineProperty(h, "__EnumValue", {
      enumerable: !0,
      get: function () {
        return w.__EnumValue;
      },
    });
    Object.defineProperty(h, "__Field", {
      enumerable: !0,
      get: function () {
        return w.__Field;
      },
    });
    Object.defineProperty(h, "__InputValue", {
      enumerable: !0,
      get: function () {
        return w.__InputValue;
      },
    });
    Object.defineProperty(h, "__Schema", {
      enumerable: !0,
      get: function () {
        return w.__Schema;
      },
    });
    Object.defineProperty(h, "__Type", {
      enumerable: !0,
      get: function () {
        return w.__Type;
      },
    });
    Object.defineProperty(h, "__TypeKind", {
      enumerable: !0,
      get: function () {
        return w.__TypeKind;
      },
    });
    Object.defineProperty(h, "assertAbstractType", {
      enumerable: !0,
      get: function () {
        return w.assertAbstractType;
      },
    });
    Object.defineProperty(h, "assertCompositeType", {
      enumerable: !0,
      get: function () {
        return w.assertCompositeType;
      },
    });
    Object.defineProperty(h, "assertDirective", {
      enumerable: !0,
      get: function () {
        return w.assertDirective;
      },
    });
    Object.defineProperty(h, "assertEnumType", {
      enumerable: !0,
      get: function () {
        return w.assertEnumType;
      },
    });
    Object.defineProperty(h, "assertEnumValueName", {
      enumerable: !0,
      get: function () {
        return w.assertEnumValueName;
      },
    });
    Object.defineProperty(h, "assertInputObjectType", {
      enumerable: !0,
      get: function () {
        return w.assertInputObjectType;
      },
    });
    Object.defineProperty(h, "assertInputType", {
      enumerable: !0,
      get: function () {
        return w.assertInputType;
      },
    });
    Object.defineProperty(h, "assertInterfaceType", {
      enumerable: !0,
      get: function () {
        return w.assertInterfaceType;
      },
    });
    Object.defineProperty(h, "assertLeafType", {
      enumerable: !0,
      get: function () {
        return w.assertLeafType;
      },
    });
    Object.defineProperty(h, "assertListType", {
      enumerable: !0,
      get: function () {
        return w.assertListType;
      },
    });
    Object.defineProperty(h, "assertName", {
      enumerable: !0,
      get: function () {
        return w.assertName;
      },
    });
    Object.defineProperty(h, "assertNamedType", {
      enumerable: !0,
      get: function () {
        return w.assertNamedType;
      },
    });
    Object.defineProperty(h, "assertNonNullType", {
      enumerable: !0,
      get: function () {
        return w.assertNonNullType;
      },
    });
    Object.defineProperty(h, "assertNullableType", {
      enumerable: !0,
      get: function () {
        return w.assertNullableType;
      },
    });
    Object.defineProperty(h, "assertObjectType", {
      enumerable: !0,
      get: function () {
        return w.assertObjectType;
      },
    });
    Object.defineProperty(h, "assertOutputType", {
      enumerable: !0,
      get: function () {
        return w.assertOutputType;
      },
    });
    Object.defineProperty(h, "assertScalarType", {
      enumerable: !0,
      get: function () {
        return w.assertScalarType;
      },
    });
    Object.defineProperty(h, "assertSchema", {
      enumerable: !0,
      get: function () {
        return w.assertSchema;
      },
    });
    Object.defineProperty(h, "assertType", {
      enumerable: !0,
      get: function () {
        return w.assertType;
      },
    });
    Object.defineProperty(h, "assertUnionType", {
      enumerable: !0,
      get: function () {
        return w.assertUnionType;
      },
    });
    Object.defineProperty(h, "assertValidName", {
      enumerable: !0,
      get: function () {
        return ye.assertValidName;
      },
    });
    Object.defineProperty(h, "assertValidSchema", {
      enumerable: !0,
      get: function () {
        return w.assertValidSchema;
      },
    });
    Object.defineProperty(h, "assertWrappingType", {
      enumerable: !0,
      get: function () {
        return w.assertWrappingType;
      },
    });
    Object.defineProperty(h, "astFromValue", {
      enumerable: !0,
      get: function () {
        return ye.astFromValue;
      },
    });
    Object.defineProperty(h, "buildASTSchema", {
      enumerable: !0,
      get: function () {
        return ye.buildASTSchema;
      },
    });
    Object.defineProperty(h, "buildClientSchema", {
      enumerable: !0,
      get: function () {
        return ye.buildClientSchema;
      },
    });
    Object.defineProperty(h, "buildSchema", {
      enumerable: !0,
      get: function () {
        return ye.buildSchema;
      },
    });
    Object.defineProperty(h, "coerceInputValue", {
      enumerable: !0,
      get: function () {
        return ye.coerceInputValue;
      },
    });
    Object.defineProperty(h, "concatAST", {
      enumerable: !0,
      get: function () {
        return ye.concatAST;
      },
    });
    Object.defineProperty(h, "createSourceEventStream", {
      enumerable: !0,
      get: function () {
        return jr.createSourceEventStream;
      },
    });
    Object.defineProperty(h, "defaultFieldResolver", {
      enumerable: !0,
      get: function () {
        return jr.defaultFieldResolver;
      },
    });
    Object.defineProperty(h, "defaultTypeResolver", {
      enumerable: !0,
      get: function () {
        return jr.defaultTypeResolver;
      },
    });
    Object.defineProperty(h, "doTypesOverlap", {
      enumerable: !0,
      get: function () {
        return ye.doTypesOverlap;
      },
    });
    Object.defineProperty(h, "execute", {
      enumerable: !0,
      get: function () {
        return jr.execute;
      },
    });
    Object.defineProperty(h, "executeSync", {
      enumerable: !0,
      get: function () {
        return jr.executeSync;
      },
    });
    Object.defineProperty(h, "extendSchema", {
      enumerable: !0,
      get: function () {
        return ye.extendSchema;
      },
    });
    Object.defineProperty(h, "findBreakingChanges", {
      enumerable: !0,
      get: function () {
        return ye.findBreakingChanges;
      },
    });
    Object.defineProperty(h, "findDangerousChanges", {
      enumerable: !0,
      get: function () {
        return ye.findDangerousChanges;
      },
    });
    Object.defineProperty(h, "formatError", {
      enumerable: !0,
      get: function () {
        return Ks.formatError;
      },
    });
    Object.defineProperty(h, "getArgumentValues", {
      enumerable: !0,
      get: function () {
        return jr.getArgumentValues;
      },
    });
    Object.defineProperty(h, "getDirectiveValues", {
      enumerable: !0,
      get: function () {
        return jr.getDirectiveValues;
      },
    });
    Object.defineProperty(h, "getEnterLeaveForKind", {
      enumerable: !0,
      get: function () {
        return fe.getEnterLeaveForKind;
      },
    });
    Object.defineProperty(h, "getIntrospectionQuery", {
      enumerable: !0,
      get: function () {
        return ye.getIntrospectionQuery;
      },
    });
    Object.defineProperty(h, "getLocation", {
      enumerable: !0,
      get: function () {
        return fe.getLocation;
      },
    });
    Object.defineProperty(h, "getNamedType", {
      enumerable: !0,
      get: function () {
        return w.getNamedType;
      },
    });
    Object.defineProperty(h, "getNullableType", {
      enumerable: !0,
      get: function () {
        return w.getNullableType;
      },
    });
    Object.defineProperty(h, "getOperationAST", {
      enumerable: !0,
      get: function () {
        return ye.getOperationAST;
      },
    });
    Object.defineProperty(h, "getOperationRootType", {
      enumerable: !0,
      get: function () {
        return ye.getOperationRootType;
      },
    });
    Object.defineProperty(h, "getVariableValues", {
      enumerable: !0,
      get: function () {
        return jr.getVariableValues;
      },
    });
    Object.defineProperty(h, "getVisitFn", {
      enumerable: !0,
      get: function () {
        return fe.getVisitFn;
      },
    });
    Object.defineProperty(h, "graphql", {
      enumerable: !0,
      get: function () {
        return Uv.graphql;
      },
    });
    Object.defineProperty(h, "graphqlSync", {
      enumerable: !0,
      get: function () {
        return Uv.graphqlSync;
      },
    });
    Object.defineProperty(h, "introspectionFromSchema", {
      enumerable: !0,
      get: function () {
        return ye.introspectionFromSchema;
      },
    });
    Object.defineProperty(h, "introspectionTypes", {
      enumerable: !0,
      get: function () {
        return w.introspectionTypes;
      },
    });
    Object.defineProperty(h, "isAbstractType", {
      enumerable: !0,
      get: function () {
        return w.isAbstractType;
      },
    });
    Object.defineProperty(h, "isCompositeType", {
      enumerable: !0,
      get: function () {
        return w.isCompositeType;
      },
    });
    Object.defineProperty(h, "isConstValueNode", {
      enumerable: !0,
      get: function () {
        return fe.isConstValueNode;
      },
    });
    Object.defineProperty(h, "isDefinitionNode", {
      enumerable: !0,
      get: function () {
        return fe.isDefinitionNode;
      },
    });
    Object.defineProperty(h, "isDirective", {
      enumerable: !0,
      get: function () {
        return w.isDirective;
      },
    });
    Object.defineProperty(h, "isEnumType", {
      enumerable: !0,
      get: function () {
        return w.isEnumType;
      },
    });
    Object.defineProperty(h, "isEqualType", {
      enumerable: !0,
      get: function () {
        return ye.isEqualType;
      },
    });
    Object.defineProperty(h, "isExecutableDefinitionNode", {
      enumerable: !0,
      get: function () {
        return fe.isExecutableDefinitionNode;
      },
    });
    Object.defineProperty(h, "isInputObjectType", {
      enumerable: !0,
      get: function () {
        return w.isInputObjectType;
      },
    });
    Object.defineProperty(h, "isInputType", {
      enumerable: !0,
      get: function () {
        return w.isInputType;
      },
    });
    Object.defineProperty(h, "isInterfaceType", {
      enumerable: !0,
      get: function () {
        return w.isInterfaceType;
      },
    });
    Object.defineProperty(h, "isIntrospectionType", {
      enumerable: !0,
      get: function () {
        return w.isIntrospectionType;
      },
    });
    Object.defineProperty(h, "isLeafType", {
      enumerable: !0,
      get: function () {
        return w.isLeafType;
      },
    });
    Object.defineProperty(h, "isListType", {
      enumerable: !0,
      get: function () {
        return w.isListType;
      },
    });
    Object.defineProperty(h, "isNamedType", {
      enumerable: !0,
      get: function () {
        return w.isNamedType;
      },
    });
    Object.defineProperty(h, "isNonNullType", {
      enumerable: !0,
      get: function () {
        return w.isNonNullType;
      },
    });
    Object.defineProperty(h, "isNullableType", {
      enumerable: !0,
      get: function () {
        return w.isNullableType;
      },
    });
    Object.defineProperty(h, "isObjectType", {
      enumerable: !0,
      get: function () {
        return w.isObjectType;
      },
    });
    Object.defineProperty(h, "isOutputType", {
      enumerable: !0,
      get: function () {
        return w.isOutputType;
      },
    });
    Object.defineProperty(h, "isRequiredArgument", {
      enumerable: !0,
      get: function () {
        return w.isRequiredArgument;
      },
    });
    Object.defineProperty(h, "isRequiredInputField", {
      enumerable: !0,
      get: function () {
        return w.isRequiredInputField;
      },
    });
    Object.defineProperty(h, "isScalarType", {
      enumerable: !0,
      get: function () {
        return w.isScalarType;
      },
    });
    Object.defineProperty(h, "isSchema", {
      enumerable: !0,
      get: function () {
        return w.isSchema;
      },
    });
    Object.defineProperty(h, "isSelectionNode", {
      enumerable: !0,
      get: function () {
        return fe.isSelectionNode;
      },
    });
    Object.defineProperty(h, "isSpecifiedDirective", {
      enumerable: !0,
      get: function () {
        return w.isSpecifiedDirective;
      },
    });
    Object.defineProperty(h, "isSpecifiedScalarType", {
      enumerable: !0,
      get: function () {
        return w.isSpecifiedScalarType;
      },
    });
    Object.defineProperty(h, "isType", {
      enumerable: !0,
      get: function () {
        return w.isType;
      },
    });
    Object.defineProperty(h, "isTypeDefinitionNode", {
      enumerable: !0,
      get: function () {
        return fe.isTypeDefinitionNode;
      },
    });
    Object.defineProperty(h, "isTypeExtensionNode", {
      enumerable: !0,
      get: function () {
        return fe.isTypeExtensionNode;
      },
    });
    Object.defineProperty(h, "isTypeNode", {
      enumerable: !0,
      get: function () {
        return fe.isTypeNode;
      },
    });
    Object.defineProperty(h, "isTypeSubTypeOf", {
      enumerable: !0,
      get: function () {
        return ye.isTypeSubTypeOf;
      },
    });
    Object.defineProperty(h, "isTypeSystemDefinitionNode", {
      enumerable: !0,
      get: function () {
        return fe.isTypeSystemDefinitionNode;
      },
    });
    Object.defineProperty(h, "isTypeSystemExtensionNode", {
      enumerable: !0,
      get: function () {
        return fe.isTypeSystemExtensionNode;
      },
    });
    Object.defineProperty(h, "isUnionType", {
      enumerable: !0,
      get: function () {
        return w.isUnionType;
      },
    });
    Object.defineProperty(h, "isValidNameError", {
      enumerable: !0,
      get: function () {
        return ye.isValidNameError;
      },
    });
    Object.defineProperty(h, "isValueNode", {
      enumerable: !0,
      get: function () {
        return fe.isValueNode;
      },
    });
    Object.defineProperty(h, "isWrappingType", {
      enumerable: !0,
      get: function () {
        return w.isWrappingType;
      },
    });
    Object.defineProperty(h, "lexicographicSortSchema", {
      enumerable: !0,
      get: function () {
        return ye.lexicographicSortSchema;
      },
    });
    Object.defineProperty(h, "locatedError", {
      enumerable: !0,
      get: function () {
        return Ks.locatedError;
      },
    });
    Object.defineProperty(h, "parse", {
      enumerable: !0,
      get: function () {
        return fe.parse;
      },
    });
    Object.defineProperty(h, "parseConstValue", {
      enumerable: !0,
      get: function () {
        return fe.parseConstValue;
      },
    });
    Object.defineProperty(h, "parseType", {
      enumerable: !0,
      get: function () {
        return fe.parseType;
      },
    });
    Object.defineProperty(h, "parseValue", {
      enumerable: !0,
      get: function () {
        return fe.parseValue;
      },
    });
    Object.defineProperty(h, "print", {
      enumerable: !0,
      get: function () {
        return fe.print;
      },
    });
    Object.defineProperty(h, "printError", {
      enumerable: !0,
      get: function () {
        return Ks.printError;
      },
    });
    Object.defineProperty(h, "printIntrospectionSchema", {
      enumerable: !0,
      get: function () {
        return ye.printIntrospectionSchema;
      },
    });
    Object.defineProperty(h, "printLocation", {
      enumerable: !0,
      get: function () {
        return fe.printLocation;
      },
    });
    Object.defineProperty(h, "printSchema", {
      enumerable: !0,
      get: function () {
        return ye.printSchema;
      },
    });
    Object.defineProperty(h, "printSourceLocation", {
      enumerable: !0,
      get: function () {
        return fe.printSourceLocation;
      },
    });
    Object.defineProperty(h, "printType", {
      enumerable: !0,
      get: function () {
        return ye.printType;
      },
    });
    Object.defineProperty(h, "resolveObjMapThunk", {
      enumerable: !0,
      get: function () {
        return w.resolveObjMapThunk;
      },
    });
    Object.defineProperty(h, "resolveReadonlyArrayThunk", {
      enumerable: !0,
      get: function () {
        return w.resolveReadonlyArrayThunk;
      },
    });
    Object.defineProperty(h, "responsePathAsArray", {
      enumerable: !0,
      get: function () {
        return jr.responsePathAsArray;
      },
    });
    Object.defineProperty(h, "separateOperations", {
      enumerable: !0,
      get: function () {
        return ye.separateOperations;
      },
    });
    Object.defineProperty(h, "specifiedDirectives", {
      enumerable: !0,
      get: function () {
        return w.specifiedDirectives;
      },
    });
    Object.defineProperty(h, "specifiedRules", {
      enumerable: !0,
      get: function () {
        return re.specifiedRules;
      },
    });
    Object.defineProperty(h, "specifiedScalarTypes", {
      enumerable: !0,
      get: function () {
        return w.specifiedScalarTypes;
      },
    });
    Object.defineProperty(h, "stripIgnoredCharacters", {
      enumerable: !0,
      get: function () {
        return ye.stripIgnoredCharacters;
      },
    });
    Object.defineProperty(h, "subscribe", {
      enumerable: !0,
      get: function () {
        return jr.subscribe;
      },
    });
    Object.defineProperty(h, "syntaxError", {
      enumerable: !0,
      get: function () {
        return Ks.syntaxError;
      },
    });
    Object.defineProperty(h, "typeFromAST", {
      enumerable: !0,
      get: function () {
        return ye.typeFromAST;
      },
    });
    Object.defineProperty(h, "validate", {
      enumerable: !0,
      get: function () {
        return re.validate;
      },
    });
    Object.defineProperty(h, "validateSchema", {
      enumerable: !0,
      get: function () {
        return w.validateSchema;
      },
    });
    Object.defineProperty(h, "valueFromAST", {
      enumerable: !0,
      get: function () {
        return ye.valueFromAST;
      },
    });
    Object.defineProperty(h, "valueFromASTUntyped", {
      enumerable: !0,
      get: function () {
        return ye.valueFromASTUntyped;
      },
    });
    Object.defineProperty(h, "version", {
      enumerable: !0,
      get: function () {
        return Qv.version;
      },
    });
    Object.defineProperty(h, "versionInfo", {
      enumerable: !0,
      get: function () {
        return Qv.versionInfo;
      },
    });
    Object.defineProperty(h, "visit", {
      enumerable: !0,
      get: function () {
        return fe.visit;
      },
    });
    Object.defineProperty(h, "visitInParallel", {
      enumerable: !0,
      get: function () {
        return fe.visitInParallel;
      },
    });
    Object.defineProperty(h, "visitWithTypeInfo", {
      enumerable: !0,
      get: function () {
        return ye.visitWithTypeInfo;
      },
    });
    var Qv = Dy(),
      Uv = wg(),
      w = Lg(),
      fe = qg(),
      jr = Vg(),
      re = Bg(),
      Ks = zg(),
      ye = Gv();
  });
  var qo = f((Y) => {
    Object.defineProperty(Y, "__esModule", { value: !0 });
    var ge = (e) => {};
    function Ne(e) {
      var t = [e];
      return (t.tag = 0), t;
    }
    function at(e) {
      var t = [e];
      return (t.tag = 1), t;
    }
    function $s(e) {
      return (t) => {
        var r = !1,
          n = !1,
          i = !1,
          s = 0;
        t(
          Ne((a) => {
            if (a === 1) r = !0;
            else if (n) i = !0;
            else {
              for (i = n = !0; i && !r; s++)
                s < e.length ? ((i = !1), t(at(e[s]))) : ((r = !0), t(0));
              n = !1;
            }
          })
        );
      };
    }
    var Ld = (e) => e;
    function Vv(e) {
      return (t) => (r) => {
        var n = [],
          i = ge,
          s = ge,
          a = !1,
          o = !1,
          u = !1,
          l = !1;
        function c(d) {
          (u = !0),
            d((p) => {
              p === 0
                ? u &&
                  ((u = !1),
                  n.length ? c(e(n.shift())) : l ? r(0) : a || ((a = !0), i(0)))
                : p.tag === 0
                ? ((o = !1), (s = p[0])(0))
                : u && (r(p), o ? (o = !1) : s(0));
            });
        }
        t((d) => {
          l ||
            (d === 0
              ? ((l = !0), !u && !n.length && r(0))
              : d.tag === 0
              ? (i = d[0])
              : ((a = !1), u ? n.push(d[0]) : c(e(d[0]))));
        }),
          r(
            Ne((d) => {
              d === 1
                ? (l || ((l = !0), i(1)), u && ((u = !1), s(1)))
                : (!l && !a && ((a = !0), i(0)), u && !o && ((o = !0), s(0)));
            })
          );
      };
    }
    function Kv(e) {
      return Vv(Ld)(e);
    }
    function $v(e) {
      return (t) => (r) => {
        var n = [],
          i = ge,
          s = !1,
          a = !1;
        t((o) => {
          a ||
            (o === 0
              ? ((a = !0), n.length || r(0))
              : o.tag === 0
              ? (i = o[0])
              : ((s = !1),
                (function (l) {
                  var c = ge;
                  l((d) => {
                    if (d === 0) {
                      if (n.length) {
                        var p = n.indexOf(c);
                        p > -1 && (n = n.slice()).splice(p, 1),
                          n.length || (a ? r(0) : s || ((s = !0), i(0)));
                      }
                    } else
                      d.tag === 0
                        ? (n.push((c = d[0])), c(0))
                        : n.length && (r(d), c(0));
                  });
                })(e(o[0])),
                s || ((s = !0), i(0))));
        }),
          r(
            Ne((o) => {
              if (o === 1) {
                a || ((a = !0), i(1));
                for (var u = 0, l = n, c = n.length; u < c; u++) l[u](1);
                n.length = 0;
              } else {
                !a && !s ? ((s = !0), i(0)) : (s = !1);
                for (var d = 0, p = n, m = n.length; d < m; d++) p[d](0);
              }
            })
          );
      };
    }
    function Fd(e) {
      return $v(Ld)(e);
    }
    function Bv(e) {
      return (t) => (r) => {
        var n = !1;
        t((i) => {
          if (!n)
            if (i === 0) (n = !0), r(0);
            else if (i.tag === 0) {
              var s = i[0];
              r(
                Ne((a) => {
                  a === 1 && (n = !0), s(a);
                })
              );
            } else e(i[0]), r(i);
        });
      };
    }
    function zv(e) {
      return (t) => (r) => {
        var n = ge,
          i = ge,
          s = !1,
          a = !1,
          o = !1,
          u = !1;
        t((l) => {
          u ||
            (l === 0
              ? ((u = !0), o || r(0))
              : l.tag === 0
              ? (n = l[0])
              : (o && (i(1), (i = ge)),
                s ? (s = !1) : ((s = !0), n(0)),
                (function (d) {
                  (o = !0),
                    d((p) => {
                      o &&
                        (p === 0
                          ? ((o = !1), u ? r(0) : s || ((s = !0), n(0)))
                          : p.tag === 0
                          ? ((a = !1), (i = p[0])(0))
                          : (r(p), a ? (a = !1) : i(0)));
                    });
                })(e(l[0]))));
        }),
          r(
            Ne((l) => {
              l === 1
                ? (u || ((u = !0), n(1)), o && ((o = !1), i(1)))
                : (!u && !s && ((s = !0), n(0)), o && !a && ((a = !0), i(0)));
            })
          );
      };
    }
    function qd(e) {
      return (t) => {
        var r = ge,
          n = !1;
        return (
          t((i) => {
            i === 0
              ? (n = !0)
              : i.tag === 0
              ? (r = i[0])(0)
              : n || (e(i[0]), r(0));
          }),
          {
            unsubscribe() {
              n || ((n = !0), r(1));
            },
          }
        );
      };
    }
    var Md =
      typeof Symbol == "function"
        ? Symbol.observable || (Symbol.observable = Symbol("observable"))
        : "@@observable";
    Y.buffer = function (t) {
      return (r) => (n) => {
        var i = [],
          s = ge,
          a = ge,
          o = !1,
          u = !1;
        r((l) => {
          u ||
            (l === 0
              ? ((u = !0), a(1), i.length && n(at(i)), n(0))
              : l.tag === 0
              ? ((s = l[0]),
                t((c) => {
                  if (!u) {
                    if (c === 0) (u = !0), s(1), i.length && n(at(i)), n(0);
                    else if (c.tag === 0) a = c[0];
                    else if (i.length) {
                      var d = at(i);
                      (i = []), n(d);
                    }
                  }
                }))
              : (i.push(l[0]), o ? (o = !1) : ((o = !0), s(0), a(0))));
        }),
          n(
            Ne((l) => {
              l === 1 && !u
                ? ((u = !0), s(1), a(1))
                : !u && !o && ((o = !0), s(0), a(0));
            })
          );
      };
    };
    Y.combine = function (t, r) {
      return (n) => {
        var i,
          s,
          a = ge,
          o = ge,
          u = !1,
          l = !1,
          c = !1;
        t((d) => {
          d === 0
            ? l
              ? ((c = !0), n(0))
              : (l = !0)
            : d.tag === 0
            ? (a = d[0])
            : s === void 0
            ? ((i = d[0]), u ? (u = !1) : o(0))
            : c || ((u = !1), n(at([(i = d[0]), s])));
        }),
          r((d) => {
            d === 0
              ? l
                ? ((c = !0), n(0))
                : (l = !0)
              : d.tag === 0
              ? (o = d[0])
              : i === void 0
              ? ((s = d[0]), u ? (u = !1) : a(0))
              : c || ((u = !1), n(at([i, (s = d[0])])));
          }),
          n(
            Ne((d) => {
              c ||
                (d === 1
                  ? ((c = !0), a(1), o(1))
                  : u || ((u = !0), a(0), o(0)));
            })
          );
      };
    };
    Y.concat = function (t) {
      return Kv($s(t));
    };
    Y.concatAll = Kv;
    Y.concatMap = Vv;
    Y.debounce = function (t) {
      return (r) => (n) => {
        var i,
          s = !1,
          a = !1;
        r((o) => {
          if (!a)
            if (o === 0) (a = !0), i ? (s = !0) : n(0);
            else if (o.tag === 0) {
              var u = o[0];
              n(
                Ne((l) => {
                  l === 1 && !a
                    ? ((a = !0), (s = !1), i && clearTimeout(i), u(1))
                    : a || u(0);
                })
              );
            } else
              i && clearTimeout(i),
                (i = setTimeout(() => {
                  (i = void 0), n(o), s && n(0);
                }, t(o[0])));
        });
      };
    };
    Y.delay = function (t) {
      return (r) => (n) => {
        var i = 0;
        r((s) => {
          typeof s != "number" && s.tag === 0
            ? n(s)
            : (i++,
              setTimeout(() => {
                i && (i--, n(s));
              }, t));
        });
      };
    };
    Y.empty = (e) => {
      var t = !1;
      e(
        Ne((r) => {
          r === 1 ? (t = !0) : t || ((t = !0), e(0));
        })
      );
    };
    Y.filter = function (t) {
      return (r) => (n) => {
        var i = ge;
        r((s) => {
          s === 0
            ? n(0)
            : s.tag === 0
            ? ((i = s[0]), n(s))
            : t(s[0])
            ? n(s)
            : i(0);
        });
      };
    };
    Y.flatten = Fd;
    Y.forEach = function (t) {
      return (r) => {
        qd(t)(r);
      };
    };
    Y.fromArray = $s;
    Y.fromCallbag = function (t) {
      return (r) => {
        t(0, (n, i) => {
          n === 0
            ? r(
                Ne((s) => {
                  i(s === 0 ? 1 : 2);
                })
              )
            : n === 1
            ? r(at(i))
            : n === 2 && r(0);
        });
      };
    };
    Y.fromDomEvent = function (t, r) {
      return (n) => {
        var i = (s) => {
          n(at(s));
        };
        n(
          Ne((s) => {
            s === 1 && t.removeEventListener(r, i);
          })
        ),
          t.addEventListener(r, i);
      };
    };
    Y.fromObservable = function (t) {
      var r = t[Md] ? t[Md]() : t;
      return (n) => {
        var i = r.subscribe({
          next(s) {
            n(at(s));
          },
          complete() {
            n(0);
          },
          error() {},
        });
        n(
          Ne((s) => {
            s === 1 && i.unsubscribe();
          })
        );
      };
    };
    Y.fromPromise = function (t) {
      return (r) => {
        var n = !1;
        t.then((i) => {
          n || (r(at(i)), r(0));
        }),
          r(
            Ne((i) => {
              i === 1 && (n = !0);
            })
          );
      };
    };
    Y.fromValue = function (t) {
      return (r) => {
        var n = !1;
        r(
          Ne((i) => {
            i === 1 ? (n = !0) : n || ((n = !0), r(at(t)), r(0));
          })
        );
      };
    };
    Y.interval = function (t) {
      return (r) => {
        var n = 0,
          i = setInterval(() => {
            r(at(n++));
          }, t);
        r(
          Ne((s) => {
            s === 1 && clearInterval(i);
          })
        );
      };
    };
    Y.make = function (t) {
      return (r) => {
        var n = !1,
          i = t({
            next(s) {
              n || r(at(s));
            },
            complete() {
              n || ((n = !0), r(0));
            },
          });
        r(
          Ne((s) => {
            s === 1 && !n && ((n = !0), i());
          })
        );
      };
    };
    Y.makeSubject = function () {
      var t = [],
        r = !1;
      return {
        source(n) {
          t.push(n),
            n(
              Ne((i) => {
                if (i === 1) {
                  var s = t.indexOf(n);
                  s > -1 && (t = t.slice()).splice(s, 1);
                }
              })
            );
        },
        next(n) {
          if (!r)
            for (var i = at(n), s = 0, a = t, o = t.length; s < o; s++) a[s](i);
        },
        complete() {
          if (!r) {
            r = !0;
            for (var n = 0, i = t, s = t.length; n < s; n++) i[n](0);
          }
        },
      };
    };
    Y.map = function (t) {
      return (r) => (n) =>
        r((i) => {
          i === 0 || i.tag === 0 ? n(i) : n(at(t(i[0])));
        });
    };
    Y.merge = function (t) {
      return Fd($s(t));
    };
    Y.mergeAll = Fd;
    Y.mergeMap = $v;
    Y.never = (e) => {
      e(Ne(ge));
    };
    Y.onEnd = function (t) {
      return (r) => (n) => {
        var i = !1;
        r((s) => {
          if (!i)
            if (s === 0) (i = !0), n(0), t();
            else if (s.tag === 0) {
              var a = s[0];
              n(
                Ne((o) => {
                  o === 1 ? ((i = !0), a(1), t()) : a(o);
                })
              );
            } else n(s);
        });
      };
    };
    Y.onPush = Bv;
    Y.onStart = function (t) {
      return (r) => (n) =>
        r((i) => {
          i === 0 ? n(0) : i.tag === 0 ? (n(i), t()) : n(i);
        });
    };
    Y.pipe = function () {
      for (var t = arguments[0], r = 1, n = arguments.length; r < n; r++)
        t = arguments[r](t);
      return t;
    };
    Y.publish = function (t) {
      qd((r) => {})(t);
    };
    Y.sample = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = ge,
          a,
          o = !1,
          u = !1;
        r((l) => {
          u ||
            (l === 0
              ? ((u = !0), s(1), n(0))
              : l.tag === 0
              ? (i = l[0])
              : ((a = l[0]), o ? (o = !1) : ((o = !0), s(0), i(0))));
        }),
          t((l) => {
            if (!u) {
              if (l === 0) (u = !0), i(1), n(0);
              else if (l.tag === 0) s = l[0];
              else if (a !== void 0) {
                var c = at(a);
                (a = void 0), n(c);
              }
            }
          }),
          n(
            Ne((l) => {
              l === 1 && !u
                ? ((u = !0), i(1), s(1))
                : !u && !o && ((o = !0), i(0), s(0));
            })
          );
      };
    };
    Y.scan = function (t, r) {
      return (n) => (i) => {
        var s = r;
        n((a) => {
          a === 0 ? i(0) : a.tag === 0 ? i(a) : i(at((s = t(s, a[0]))));
        });
      };
    };
    Y.share = function (t) {
      var r = [],
        n = ge,
        i = !1;
      return (s) => {
        r.push(s),
          r.length === 1 &&
            t((a) => {
              if (a === 0) {
                for (var o = 0, u = r, l = r.length; o < l; o++) u[o](0);
                r.length = 0;
              } else if (a.tag === 0) n = a[0];
              else {
                i = !1;
                for (var c = 0, d = r, p = r.length; c < p; c++) d[c](a);
              }
            }),
          s(
            Ne((a) => {
              if (a === 1) {
                var o = r.indexOf(s);
                o > -1 && (r = r.slice()).splice(o, 1), r.length || n(1);
              } else i || ((i = !0), n(0));
            })
          );
      };
    };
    Y.skip = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = t;
        r((a) => {
          a === 0
            ? n(0)
            : a.tag === 0
            ? ((i = a[0]), n(a))
            : s-- > 0
            ? i(0)
            : n(a);
        });
      };
    };
    Y.skipUntil = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = ge,
          a = !0,
          o = !1,
          u = !1;
        r((l) => {
          u ||
            (l === 0
              ? ((u = !0), a && s(1), n(0))
              : l.tag === 0
              ? ((i = l[0]),
                t((c) => {
                  c === 0
                    ? a && ((u = !0), i(1))
                    : c.tag === 0
                    ? (s = c[0])(0)
                    : ((a = !1), s(1));
                }))
              : a
              ? o
                ? (o = !1)
                : ((o = !0), i(0), s(0))
              : ((o = !1), n(l)));
        }),
          n(
            Ne((l) => {
              l === 1 && !u
                ? ((u = !0), i(1), a && s(1))
                : !u && !o && ((o = !0), a && s(0), i(0));
            })
          );
      };
    };
    Y.skipWhile = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = !0;
        r((a) => {
          a === 0
            ? n(0)
            : a.tag === 0
            ? ((i = a[0]), n(a))
            : s
            ? t(a[0])
              ? i(0)
              : ((s = !1), n(a))
            : n(a);
        });
      };
    };
    Y.subscribe = qd;
    Y.switchAll = function (t) {
      return zv(Ld)(t);
    };
    Y.switchMap = zv;
    Y.take = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = !1,
          a = 0;
        r((o) => {
          s ||
            (o === 0
              ? ((s = !0), n(0))
              : o.tag === 0
              ? t <= 0
                ? ((s = !0), n(0), o[0](1))
                : (i = o[0])
              : a++ < t
              ? (n(o), !s && a >= t && ((s = !0), n(0), i(1)))
              : n(o));
        }),
          n(
            Ne((o) => {
              o === 1 && !s ? ((s = !0), i(1)) : o === 0 && !s && a < t && i(0);
            })
          );
      };
    };
    Y.takeLast = function (t) {
      return (r) => (n) => {
        var i = [],
          s = ge;
        r((a) => {
          a === 0
            ? $s(i)(n)
            : a.tag === 0
            ? t <= 0
              ? (a[0](1), $s(i)(n))
              : (s = a[0])(0)
            : (i.length >= t && t && i.shift(), i.push(a[0]), s(0));
        });
      };
    };
    Y.takeUntil = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = ge,
          a = !1;
        r((o) => {
          a ||
            (o === 0
              ? ((a = !0), s(1), n(0))
              : o.tag === 0
              ? ((i = o[0]),
                t((u) => {
                  u === 0 ||
                    (u.tag === 0 ? (s = u[0])(0) : ((a = !0), i(1), n(0)));
                }))
              : n(o));
        }),
          n(
            Ne((o) => {
              o === 1 && !a ? ((a = !0), i(1), s(1)) : a || i(0);
            })
          );
      };
    };
    Y.takeWhile = function (t) {
      return (r) => (n) => {
        var i = ge,
          s = !1;
        r((a) => {
          s ||
            (a === 0
              ? ((s = !0), n(0))
              : a.tag === 0
              ? ((i = a[0]), n(a))
              : t(a[0])
              ? n(a)
              : ((s = !0), n(0), i(1)));
        });
      };
    };
    Y.tap = Bv;
    Y.throttle = function (t) {
      return (r) => (n) => {
        var i = !1,
          s;
        r((a) => {
          if (a === 0) s && clearTimeout(s), n(0);
          else if (a.tag === 0) {
            var o = a[0];
            n(
              Ne((u) => {
                u === 1 ? (s && clearTimeout(s), o(1)) : o(0);
              })
            );
          } else
            i ||
              ((i = !0),
              s && clearTimeout(s),
              (s = setTimeout(() => {
                (s = void 0), (i = !1);
              }, t(a[0]))),
              n(a));
        });
      };
    };
    Y.toArray = function (t) {
      var r = [],
        n = ge,
        i = !1;
      return (
        t((s) => {
          s === 0
            ? (i = !0)
            : s.tag === 0
            ? (n = s[0])(0)
            : (r.push(s[0]), n(0));
        }),
        i || n(1),
        r
      );
    };
    Y.toCallbag = function (t) {
      return (r, n) => {
        r === 0 &&
          t((i) => {
            i === 0
              ? n(2)
              : i.tag === 0
              ? n(0, (s) => {
                  s === 1 ? i[0](0) : s === 2 && i[0](1);
                })
              : n(1, i[0]);
          });
      };
    };
    Y.toObservable = function (t) {
      var r = {
        subscribe(n) {
          var i = ge,
            s = !1;
          t((o) => {
            s ||
              (o === 0
                ? ((s = !0), n.complete())
                : o.tag === 0
                ? (i = o[0])(0)
                : (n.next(o[0]), i(0)));
          });
          var a = {
            closed: !1,
            unsubscribe() {
              (a.closed = !0), (s = !0), i(1);
            },
          };
          return a;
        },
      };
      return (r[Md] = () => r), r;
    };
    Y.toPromise = function (t) {
      return new Promise((r) => {
        var n = ge,
          i;
        t((s) => {
          s === 0 ? r(i) : s.tag === 0 ? (n = s[0])(0) : ((i = s[0]), n(0));
        });
      });
    };
  });
  var Gd = f((At) => {
    var Mn = Fo(),
      wD = qo(),
      DD = (e, t) => {
        var r = "";
        if (e) return `[Network] ${e.message}`;
        if (t)
          for (var n of t)
            r &&
              (r += `
`),
              (r += `[GraphQL] ${n.message}`);
        return r;
      },
      RD = (e) =>
        typeof e == "string"
          ? new Mn.GraphQLError(e)
          : typeof e == "object" && e.message
          ? new Mn.GraphQLError(
              e.message,
              e.nodes,
              e.source,
              e.positions,
              e.path,
              e,
              e.extensions || {}
            )
          : e,
      Bs = class extends Error {
        constructor(t) {
          var r = (t.graphQLErrors || []).map(RD),
            n = DD(t.networkError, r);
          super(n);
          (this.name = "CombinedError"),
            (this.message = n),
            (this.graphQLErrors = r),
            (this.networkError = t.networkError),
            (this.response = t.response);
        }
        toString() {
          return this.message;
        }
      },
      Wv = (e, t) => {
        for (var r = 0, n = t.length | 0; r < n; r++)
          e = (e << 5) + e + t.charCodeAt(r);
        return e | 0;
      },
      Yv = (e) => Wv(5381 | 0, e) >>> 0,
      Mo = new Set(),
      Hv = new WeakMap(),
      zs = (e) => {
        if (e === null || Mo.has(e)) return "null";
        if (typeof e != "object") return JSON.stringify(e) || "";
        if (e.toJSON) return zs(e.toJSON());
        if (Array.isArray(e)) {
          var t = "[";
          for (var r of e)
            t !== "[" && (t += ","),
              (r = zs(r)),
              (t += r.length > 0 ? r : "null");
          return (t += "]"), t;
        }
        var n = Object.keys(e).sort();
        if (!n.length && e.constructor && e.constructor !== Object) {
          var i = Hv.get(e) || Math.random().toString(36).slice(2);
          return Hv.set(e, i), `{"__key":"${i}"}`;
        }
        Mo.add(e);
        var s = "{";
        for (var a of n) {
          var o = zs(e[a]);
          o && (s.length > 1 && (s += ","), (s += zs(a) + ":" + o));
        }
        return Mo.delete(e), (s += "}"), s;
      },
      xo = (e) => (Mo.clear(), zs(e)),
      LD = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g,
      FD = /([\s,]|#[^\n\r]+)+/g,
      qD = (e, t) => (t % 2 == 0 ? e.replace(FD, " ").trim() : e),
      Co = (e) => {
        var t = (
          typeof e != "string" ? (e.loc && e.loc.source.body) || Mn.print(e) : e
        )
          .split(LD)
          .map(qD)
          .join("");
        if (typeof e != "string") {
          var r = "definitions" in e && Cd(e);
          r &&
            (t = `# ${r}
${t}`),
            e.loc ||
              (e.loc = {
                start: 0,
                end: t.length,
                source: {
                  body: t,
                  name: "gql",
                  locationOffset: { line: 1, column: 1 },
                },
              });
        }
        return t;
      },
      xd = new Map(),
      Jv = (e) => {
        var t, r;
        return (
          typeof e == "string"
            ? ((t = Yv(Co(e))),
              (r = xd.get(t) || Mn.parse(e, { noLocation: !0 })))
            : ((t = e.__key || Yv(Co(e))), (r = xd.get(t) || e)),
          r.loc || Co(r),
          (r.__key = t),
          xd.set(t, r),
          r
        );
      },
      MD = (e, t) => {
        t || (t = {});
        var r = Jv(e);
        return { key: Wv(r.__key, xo(t)) >>> 0, query: r, variables: t };
      },
      Cd = (e) => {
        for (var t of e.definitions)
          if (t.kind === Mn.Kind.OPERATION_DEFINITION && t.name)
            return t.name.value;
      },
      xD = (e) => {
        for (var t of e.definitions)
          if (t.kind === Mn.Kind.OPERATION_DEFINITION) return t.operation;
      },
      ko = (e, t, r) => {
        if ((!("data" in t) && !("errors" in t)) || "path" in t)
          throw new Error("No Content");
        return {
          operation: e,
          data: t.data,
          error: Array.isArray(t.errors)
            ? new Bs({ graphQLErrors: t.errors, response: r })
            : void 0,
          extensions:
            (typeof t.extensions == "object" && t.extensions) || void 0,
          hasNext: !!t.hasNext,
        };
      },
      Xv = (e, t, r) => {
        var n = O({}, e);
        if (((n.hasNext = !!t.hasNext), !("path" in t)))
          return "data" in t && (n.data = t.data), n;
        Array.isArray(t.errors) &&
          (n.error = new Bs({
            graphQLErrors: n.error
              ? [...n.error.graphQLErrors, ...t.errors]
              : t.errors,
            response: r,
          }));
        for (var i = (n.data = O({}, n.data)), s = 0, a; s < t.path.length; )
          (a = t.path[s++]),
            (i = i[a] = Array.isArray(i[a]) ? [...i[a]] : O({}, i[a]));
        return Object.assign(i, t.data), n;
      },
      kd = (e, t, r) => ({
        operation: e,
        data: void 0,
        error: new Bs({ networkError: t, response: r }),
        extensions: void 0,
      });
    function CD(e) {
      return {
        query: Mn.print(e.query),
        operationName: Cd(e.query),
        variables: e.variables || void 0,
        extensions: void 0,
      };
    }
    var kD = (e, t) => {
        var r = e.kind === "query" && e.context.preferGetMethod;
        if (!r || !t) return e.context.url;
        var n = new URL(e.context.url),
          i = n.searchParams;
        t.operationName && i.set("operationName", t.operationName),
          t.query && i.set("query", t.query.replace(/#[^\n\r]+/g, " ").trim()),
          t.variables && i.set("variables", xo(t.variables)),
          t.extensions && i.set("extensions", xo(t.extensions));
        var s = n.toString();
        return s.length > 2047 && r !== "force"
          ? ((e.context.preferGetMethod = !1), e.context.url)
          : s;
      },
      GD = (e, t) => {
        var r = e.kind === "query" && !!e.context.preferGetMethod,
          n = { accept: "application/graphql+json, application/json" };
        r || (n["content-type"] = "application/json");
        var i =
          (typeof e.context.fetchOptions == "function"
            ? e.context.fetchOptions()
            : e.context.fetchOptions) || {};
        if (i.headers)
          for (var s in i.headers) n[s.toLowerCase()] = i.headers[s];
        return N(O({}, i), {
          body: !r && t ? JSON.stringify(t) : void 0,
          method: r ? "GET" : "POST",
          headers: n,
        });
      },
      QD = typeof TextDecoder != "undefined" ? new TextDecoder() : null,
      UD = /content-type:[^\r\n]*application\/json/i,
      VD = /boundary="?([^=";]+)"?/i,
      KD = (e) =>
        e.constructor.name === "Buffer" ? e.toString() : QD.decode(e),
      $D = (e, t, r) => {
        var n = r.redirect === "manual" ? 400 : 300,
          i = e.context.fetch;
        return wD.make(({ next: s, complete: a }) => {
          var o =
            typeof AbortController != "undefined"
              ? new AbortController()
              : null;
          o && (r.signal = o.signal);
          var u = !1,
            l = (m, v, E) => {
              var L = (E.headers && E.headers.get("Content-Type")) || "";
              if (/text\//i.test(L))
                return E.text().then((I) => {
                  m(kd(v, new Error(I), E));
                });
              if (!/multipart\/mixed/i.test(L))
                return E.text().then((I) => {
                  m(ko(v, JSON.parse(I), E));
                });
              var C = "---",
                H = L.match(VD);
              H && (C = "--" + H[1]);
              var B,
                S = () => {};
              if (E[Symbol.asyncIterator]) {
                var $ = E[Symbol.asyncIterator]();
                B = $.next.bind($);
              } else if ("body" in E && E.body) {
                var k = E.body.getReader();
                (S = () => k.cancel()), (B = () => k.read());
              } else throw new TypeError("Streaming requests unsupported");
              var M = "",
                de = !0,
                T = null,
                g = null;
              function _(I) {
                if (I.done) u = !0;
                else {
                  var z = KD(I.value),
                    F = z.indexOf(C);
                  for (
                    F > -1 ? (F += M.length) : (F = M.indexOf(C)), M += z;
                    F > -1;

                  ) {
                    var q = M.slice(0, F),
                      ee = M.slice(F + C.length);
                    if (de) de = !1;
                    else {
                      var ie =
                          q.indexOf(`\r
\r
`) + 4,
                        ne = q.slice(0, ie),
                        it = q.slice(
                          ie,
                          q.lastIndexOf(`\r
`)
                        ),
                        Ae = void 0;
                      if (UD.test(ne))
                        try {
                          (Ae = JSON.parse(it)),
                            (T = g = g ? Xv(g, Ae, E) : ko(v, Ae, E));
                        } catch (mr) {}
                      if (ee.slice(0, 2) === "--" || (Ae && !Ae.hasNext)) {
                        if (!g) return m(ko(v, {}, E));
                        break;
                      }
                    }
                    (M = ee), (F = M.indexOf(C));
                  }
                }
                if ((T && (m(T), (T = null)), !I.done && (!g || g.hasNext)))
                  return B().then(_);
              }
              return B().then(_).finally(S);
            },
            c = !1,
            d = !1,
            p;
          return (
            Promise.resolve()
              .then(() => {
                if (!c) return (i || fetch)(t, r);
              })
              .then((m) => {
                if (!!m)
                  return (
                    (p = m), (d = p.status < 200 || p.status >= n), l(s, e, p)
                  );
              })
              .then(a)
              .catch((m) => {
                if (u) throw m;
                var v = kd(
                  e,
                  d && p.statusText ? new Error(p.statusText) : m,
                  p
                );
                s(v), a();
              }),
            () => {
              (c = !0), o && o.abort();
            }
          );
        });
      };
    At.CombinedError = Bs;
    At.createRequest = MD;
    At.getOperationName = Cd;
    At.getOperationType = xD;
    At.keyDocument = Jv;
    At.makeErrorResult = kd;
    At.makeFetchBody = CD;
    At.makeFetchOptions = GD;
    At.makeFetchSource = $D;
    At.makeFetchURL = kD;
    At.makeResult = ko;
    At.mergeResultPatch = Xv;
    At.stringifyDocument = Co;
    At.stringifyVariables = xo;
  });
  var Kd = f((Ie) => {
    Object.defineProperty(Ie, "__esModule", { value: !0 });
    var xn = Fo(),
      xe = Gd(),
      U = qo(),
      Qd = (e, t) => {
        if (Array.isArray(e)) for (var r of e) Qd(r, t);
        else if (typeof e == "object" && e !== null)
          for (var n in e)
            n === "__typename" && typeof e[n] == "string"
              ? t.add(e[n])
              : Qd(e[n], t);
        return t;
      },
      BD = (e) => [...Qd(e, new Set())],
      Zv = (e) => {
        if (!e.selectionSet) return e;
        for (var t of e.selectionSet.selections)
          if (
            t.kind === xn.Kind.FIELD &&
            t.name.value === "__typename" &&
            !t.alias
          )
            return e;
        return N(O({}, e), {
          selectionSet: N(O({}, e.selectionSet), {
            selections: [
              ...e.selectionSet.selections,
              {
                kind: xn.Kind.FIELD,
                name: { kind: xn.Kind.NAME, value: "__typename" },
              },
            ],
          }),
        });
      },
      eb = new Map(),
      tb = (e) => {
        var t = xe.keyDocument(e),
          r = eb.get(t.__key);
        return (
          r ||
            ((r = xn.visit(t, { Field: Zv, InlineFragment: Zv })),
            Object.defineProperty(r, "__key", {
              value: t.__key,
              enumerable: !1,
            }),
            eb.set(t.__key, r)),
          r
        );
      },
      Go = (e, t) => {
        if (!e || typeof e != "object") return e;
        if (Array.isArray(e)) return e.map((i) => Go(i));
        if (e && typeof e == "object" && (t || "__typename" in e)) {
          var r = {};
          for (var n in e)
            n === "__typename"
              ? Object.defineProperty(r, "__typename", {
                  enumerable: !1,
                  value: e.__typename,
                })
              : (r[n] = Go(e[n]));
          return r;
        } else return e;
      };
    function rb(e) {
      return (
        (e.toPromise = () =>
          new Promise((t) => {
            var r = U.subscribe((n) => {
              !n.stale &&
                !n.hasNext &&
                Promise.resolve().then(() => {
                  r.unsubscribe(), t(n);
                });
            })(e);
          })),
        e
      );
    }
    function Cn(e, t, r) {
      return (
        r || (r = t.context),
        {
          key: t.key,
          query: t.query,
          variables: t.variables,
          kind: e,
          context: r,
        }
      );
    }
    var nb = (e, t) =>
        Cn(
          e.kind,
          e,
          N(O({}, e.context), { meta: O(O({}, e.context.meta), t) })
        ),
      ib = () => {},
      sb = (e, t, r) => {
        for (var n of r)
          if (n.kind === xn.Kind.FRAGMENT_DEFINITION) {
            var i = n.name.value,
              s = xe.stringifyDocument(n);
            e.has(i) || (e.set(i, s), t.push(n));
          } else t.push(n);
      };
    function zD() {
      for (
        var e = new Map(),
          t = [],
          r = [],
          n = Array.isArray(arguments[0])
            ? arguments[0][0]
            : arguments[0] || "",
          i = 1;
        i < arguments.length;
        i++
      ) {
        var s = arguments[i];
        s && s.definitions ? r.push(...s.definitions) : (n += s),
          (n += arguments[0][i]);
      }
      return (
        sb(e, t, xe.keyDocument(n).definitions),
        sb(e, t, r),
        xe.keyDocument({ kind: xn.Kind.DOCUMENT, definitions: t })
      );
    }
    var Ud = ({ kind: e }) => e !== "mutation" && e !== "query",
      ab = ({ forward: e, client: t, dispatchDebug: r }) => {
        var n = new Map(),
          i = new Map(),
          s = (o) => {
            var u = Cn(o.kind, o);
            return (u.query = tb(o.query)), u;
          },
          a = (o) => {
            var {
              key: u,
              kind: l,
              context: { requestPolicy: c },
            } = o;
            return (
              l === "query" &&
              c !== "network-only" &&
              (c === "cache-only" || n.has(u))
            );
          };
        return (o) => {
          var u = U.share(o),
            l = U.map((d) => {
              var p = n.get(d.key),
                m = N(O({}, p), {
                  operation: nb(d, { cacheOutcome: p ? "hit" : "miss" }),
                });
              return (
                d.context.requestPolicy === "cache-and-network" &&
                  ((m.stale = !0), Vd(t, d)),
                m
              );
            })(U.filter((d) => !Ud(d) && a(d))(u)),
            c = U.tap((d) => {
              var { operation: p } = d;
              if (!!p) {
                var m = BD(d.data).concat(p.context.additionalTypenames || []);
                if (d.operation.kind === "mutation") {
                  for (var v = new Set(), E = 0; E < m.length; E++) {
                    var L = m[E],
                      C = i.get(L);
                    C || i.set(L, (C = new Set()));
                    for (var H of C.values()) v.add(H);
                    C.clear();
                  }
                  for (var B of v.values())
                    n.has(B) &&
                      ((p = n.get(B).operation), n.delete(B), Vd(t, p));
                } else if (p.kind === "query" && d.data) {
                  n.set(p.key, d);
                  for (var S = 0; S < m.length; S++) {
                    var $ = m[S],
                      k = i.get($);
                    k || i.set($, (k = new Set())), k.add(p.key);
                  }
                }
              }
            })(
              e(
                U.filter(
                  (d) =>
                    d.kind !== "query" ||
                    d.context.requestPolicy !== "cache-only"
                )(
                  U.map((d) => nb(d, { cacheOutcome: "miss" }))(
                    U.merge([
                      U.map(s)(U.filter((d) => !Ud(d) && !a(d))(u)),
                      U.filter((d) => Ud(d))(u),
                    ])
                  )
                )
              )
            );
          return U.merge([l, c]);
        };
      },
      Vd = (e, t) =>
        e.reexecuteOperation(
          Cn(t.kind, t, N(O({}, t.context), { requestPolicy: "network-only" }))
        ),
      WD = ({ hasNext: e, data: t, extensions: r, error: n }, i) => {
        var s = {};
        return (
          t !== void 0 && (s.data = JSON.stringify(t)),
          i && r !== void 0 && (s.extensions = JSON.stringify(r)),
          e && (s.hasNext = !0),
          n &&
            ((s.error = {
              graphQLErrors: n.graphQLErrors.map((a) =>
                !a.path && !a.extensions
                  ? a.message
                  : {
                      message: a.message,
                      path: a.path,
                      extensions: a.extensions,
                    }
              ),
            }),
            n.networkError && (s.error.networkError = "" + n.networkError)),
          s
        );
      },
      YD = (e, t, r) => ({
        operation: e,
        data: t.data ? JSON.parse(t.data) : void 0,
        extensions: r && t.extensions ? JSON.parse(t.extensions) : void 0,
        error: t.error
          ? new xe.CombinedError({
              networkError: t.error.networkError
                ? new Error(t.error.networkError)
                : void 0,
              graphQLErrors: t.error.graphQLErrors,
            })
          : void 0,
        hasNext: t.hasNext,
      }),
      ob = new Set(),
      HD = (e = {}) => {
        var t = !!e.staleWhileRevalidate,
          r = !!e.includeExtensions,
          n = {},
          i = [],
          s = (o) => {
            i.push(o.operation.key),
              i.length === 1 &&
                Promise.resolve().then(() => {
                  for (var u; (u = i.shift()); ) n[u] = null;
                });
          },
          a =
            ({ client: o, forward: u }) =>
            (l) => {
              var c =
                  e && typeof e.isClient == "boolean"
                    ? !!e.isClient
                    : !o.suspense,
                d = U.share(l),
                p = u(
                  U.filter(
                    (v) =>
                      !n[v.key] ||
                      !!n[v.key].hasNext ||
                      v.context.requestPolicy === "network-only"
                  )(d)
                ),
                m = U.map((v) => {
                  var E = n[v.key],
                    L = YD(v, E, r);
                  return (
                    t &&
                      !ob.has(v.key) &&
                      ((L.stale = !0), ob.add(v.key), Vd(o, v)),
                    L
                  );
                })(
                  U.filter(
                    (v) =>
                      !!n[v.key] && v.context.requestPolicy !== "network-only"
                  )(d)
                );
              return (
                c
                  ? (m = U.tap(s)(m))
                  : (p = U.tap((v) => {
                      var { operation: E } = v;
                      if (E.kind !== "mutation") {
                        var L = WD(v, r);
                        n[E.key] = L;
                      }
                    })(p)),
                U.merge([p, m])
              );
            };
        return (
          (a.restoreData = (o) => {
            for (var u in o) n[u] !== null && (n[u] = o[u]);
          }),
          (a.extractData = () => {
            var o = {};
            for (var u in n) n[u] != null && (o[u] = n[u]);
            return o;
          }),
          e && e.initialState && a.restoreData(e.initialState),
          a
        );
      },
      JD =
        ({
          forwardSubscription: e,
          enableAllOperations: t,
          isSubscriptionOperation: r,
        }) =>
        ({ client: n, forward: i }) => {
          var s = (o) => {
              var u = e({
                key: o.key.toString(36),
                query: xn.print(o.query),
                variables: o.variables,
                context: O({}, o.context),
              });
              return U.make(({ next: l, complete: c }) => {
                var d = !1,
                  p;
                return (
                  Promise.resolve().then(() => {
                    d ||
                      (p = u.subscribe({
                        next: (m) => l(xe.makeResult(o, m)),
                        error: (m) => l(xe.makeErrorResult(o, m)),
                        complete: () => {
                          d ||
                            ((d = !0),
                            o.kind === "subscription" &&
                              n.reexecuteOperation(
                                Cn("teardown", o, o.context)
                              ),
                            c());
                        },
                      }));
                  }),
                  () => {
                    (d = !0), p && p.unsubscribe();
                  }
                );
              });
            },
            a =
              r ||
              ((o) => {
                var { kind: u } = o;
                return (
                  u === "subscription" ||
                  (!!t && (u === "query" || u === "mutation"))
                );
              });
          return (o) => {
            var u = U.share(o),
              l = U.mergeMap((d) => {
                var { key: p } = d,
                  m = U.filter((v) => v.kind === "teardown" && v.key === p)(u);
                return U.takeUntil(m)(s(d));
              })(U.filter(a)(u)),
              c = i(U.filter((d) => !a(d))(u));
            return U.merge([l, c]);
          };
        },
      XD =
        ({ forward: e }) =>
        (t) =>
          e(t),
      ub = ({ forward: e, dispatchDebug: t }) => {
        var r = new Set(),
          n = (s) => {
            var { key: a, kind: o } = s;
            if (o === "teardown" || o === "mutation") return r.delete(a), !0;
            var u = r.has(a);
            return r.add(a), !u;
          },
          i = ({ operation: s, hasNext: a }) => {
            a || r.delete(s.key);
          };
        return (s) => {
          var a = U.filter(n)(s);
          return U.tap(i)(e(a));
        };
      },
      lb =
        ({ forward: e, dispatchDebug: t }) =>
        (r) => {
          var n = U.share(r),
            i = U.mergeMap((a) => {
              var { key: o } = a,
                u = xe.makeFetchBody(a),
                l = xe.makeFetchURL(a, u),
                c = xe.makeFetchOptions(a, u),
                d = U.takeUntil(
                  U.filter((p) => p.kind === "teardown" && p.key === o)(n)
                )(xe.makeFetchSource(a, l, c));
              return d;
            })(U.filter((a) => a.kind === "query" || a.kind === "mutation")(n)),
            s = e(
              U.filter((a) => a.kind !== "query" && a.kind !== "mutation")(n)
            );
          return U.merge([i, s]);
        },
      cb =
        ({ dispatchDebug: e }) =>
        (t) =>
          U.filter(() => !1)(
            U.tap((r) => {
              if (r.kind !== "teardown" && !1) var n;
            })(t)
          ),
      ZD = cb({ dispatchDebug: ib }),
      pb =
        (e) =>
        ({ client: t, forward: r, dispatchDebug: n }) =>
          e.reduceRight(
            (i, s) => s({ client: t, forward: i, dispatchDebug(a) {} }),
            r
          ),
      eR =
        ({ onError: e }) =>
        ({ forward: t }) =>
        (r) =>
          U.tap(({ error: n, operation: i }) => {
            n && e(n, i);
          })(t(r)),
      db = [ub, ab, lb],
      fb = function e(t) {
        var r = 0,
          n = new Map(),
          i = new Map(),
          s = [],
          a = {
            url: t.url,
            fetchOptions: t.fetchOptions,
            fetch: t.fetch,
            preferGetMethod: !!t.preferGetMethod,
            requestPolicy: t.requestPolicy || "cache-first",
          },
          { source: o, next: u } = U.makeSubject(),
          l = !1;
        function c(S) {
          if ((S && u(S), !l)) {
            for (l = !0; l && (S = s.shift()); ) u(S);
            l = !1;
          }
        }
        var d = (S) => {
            var $ = U.filter(
              (M) =>
                M.operation.kind === S.kind &&
                M.operation.key === S.key &&
                (!M.operation.context._instance ||
                  M.operation.context._instance === S.context._instance)
            )(B);
            if (
              (t.maskTypename &&
                ($ = U.map((M) => N(O({}, M), { data: Go(M.data, !0) }))($)),
              S.kind === "mutation")
            )
              return U.take(1)(U.onStart(() => u(S))($));
            var k = U.share(
              U.onEnd(() => {
                n.delete(S.key), i.delete(S.key);
                for (var M = s.length - 1; M >= 0; M--)
                  s[M].key === S.key && s.splice(M, 1);
                u(Cn("teardown", S, S.context));
              })(
                U.onPush((M) => {
                  n.set(S.key, M);
                })(
                  U.switchMap((M) =>
                    S.kind !== "query" || M.stale
                      ? U.fromValue(M)
                      : U.merge([
                          U.fromValue(M),
                          U.map(() => N(O({}, M), { stale: !0 }))(
                            U.take(1)(
                              U.filter(
                                (de) =>
                                  de.kind === "query" &&
                                  de.key === S.key &&
                                  de.context.requestPolicy !== "cache-only"
                              )(o)
                            )
                          ),
                        ])
                  )(
                    U.takeUntil(
                      U.filter((M) => M.kind === "teardown" && M.key === S.key)(
                        o
                      )
                    )($)
                  )
                )
              )
            );
            return k;
          },
          p = this instanceof e ? this : Object.create(e.prototype),
          m = Object.assign(p, {
            suspense: !!t.suspense,
            operations$: o,
            reexecuteOperation(S) {
              (S.kind === "mutation" || i.has(S.key)) &&
                (s.push(S), Promise.resolve().then(c));
            },
            createRequestOperation(S, $, k) {
              k || (k = {});
              var M = xe.getOperationType($.query);
              return Cn(
                S,
                $,
                N(
                  O(
                    O(
                      {
                        _instance:
                          S === "mutation" ? (r = (r + 1) | 0) : void 0,
                      },
                      a
                    ),
                    k
                  ),
                  {
                    requestPolicy: k.requestPolicy || a.requestPolicy,
                    suspense: k.suspense || (k.suspense !== !1 && m.suspense),
                  }
                )
              );
            },
            executeRequestOperation(S) {
              return S.kind === "mutation"
                ? d(S)
                : U.make(($) => {
                    var k = i.get(S.key);
                    k || i.set(S.key, (k = d(S)));
                    var M =
                      S.context.requestPolicy === "cache-and-network" ||
                      S.context.requestPolicy === "network-only";
                    return U.subscribe($.next)(
                      U.onEnd(() => {
                        (l = !1), $.complete();
                      })(
                        U.onStart(() => {
                          var de = n.get(S.key);
                          if (S.kind === "subscription") return c(S);
                          M && c(S),
                            de != null && de === n.get(S.key)
                              ? $.next(M ? N(O({}, de), { stale: !0 }) : de)
                              : M || c(S);
                        })(k)
                      )
                    ).unsubscribe;
                  });
            },
            executeQuery(S, $) {
              var k = m.createRequestOperation("query", S, $);
              return m.executeRequestOperation(k);
            },
            executeSubscription(S, $) {
              var k = m.createRequestOperation("subscription", S, $);
              return m.executeRequestOperation(k);
            },
            executeMutation(S, $) {
              var k = m.createRequestOperation("mutation", S, $);
              return m.executeRequestOperation(k);
            },
            query(S, $, k) {
              return (
                (!k || typeof k.suspense != "boolean") &&
                  (k = N(O({}, k), { suspense: !1 })),
                rb(m.executeQuery(xe.createRequest(S, $), k))
              );
            },
            readQuery(S, $, k) {
              var M = null;
              return (
                U.subscribe((de) => {
                  M = de;
                })(m.query(S, $, k)).unsubscribe(),
                M
              );
            },
            subscription(S, $, k) {
              return m.executeSubscription(xe.createRequest(S, $), k);
            },
            mutation(S, $, k) {
              return rb(m.executeMutation(xe.createRequest(S, $), k));
            },
          }),
          v = ib;
        if (!1) var E, L;
        var C = t.exchanges !== void 0 ? t.exchanges : db,
          H = pb(C),
          B = U.share(
            H({
              client: m,
              dispatchDebug: v,
              forward: cb({ dispatchDebug: v }),
            })(o)
          );
        return U.publish(B), m;
      },
      tR = fb;
    Ie.CombinedError = xe.CombinedError;
    Ie.createRequest = xe.createRequest;
    Ie.getOperationName = xe.getOperationName;
    Ie.makeErrorResult = xe.makeErrorResult;
    Ie.makeResult = xe.makeResult;
    Ie.mergeResultPatch = xe.mergeResultPatch;
    Ie.stringifyVariables = xe.stringifyVariables;
    Ie.Client = fb;
    Ie.cacheExchange = ab;
    Ie.composeExchanges = pb;
    Ie.createClient = tR;
    Ie.debugExchange = XD;
    Ie.dedupExchange = ub;
    Ie.defaultExchanges = db;
    Ie.errorExchange = eR;
    Ie.fallbackExchangeIO = ZD;
    Ie.fetchExchange = lb;
    Ie.formatDocument = tb;
    Ie.gql = zD;
    Ie.makeOperation = Cn;
    Ie.maskTypename = Go;
    Ie.ssrExchange = HD;
    Ie.subscriptionExchange = JD;
  });
  var $d = f((VG, yb) => {
    "use strict";
    yb.exports = class {
      constructor({ uri: t, name: r, type: n }) {
        (this.uri = t), (this.name = r), (this.type = n);
      }
    };
  });
  var Bd = f((KG, hb) => {
    "use strict";
    var rR = $d();
    hb.exports = function (t) {
      return (
        (typeof File != "undefined" && t instanceof File) ||
        (typeof Blob != "undefined" && t instanceof Blob) ||
        t instanceof rR
      );
    };
  });
  var gb = f(($G, mb) => {
    "use strict";
    var nR = Bd();
    mb.exports = function (t, r = "", n = nR) {
      let i = new Map(),
        s = new Map();
      function a(o, u, l) {
        let c = o;
        if (n(o)) {
          c = null;
          let d = i.get(o);
          d ? d.push(u) : i.set(o, [u]);
        } else {
          let d =
              Array.isArray(o) ||
              (typeof FileList != "undefined" && o instanceof FileList),
            p = o && o.constructor === Object;
          if (d || p) {
            let m = s.has(o);
            if (
              (m ? (c = s.get(o)) : ((c = d ? [] : {}), s.set(o, c)), !l.has(o))
            ) {
              let v = u ? `${u}.` : "",
                E = new Set(l).add(o);
              if (d) {
                let L = 0;
                for (let C of o) {
                  let H = a(C, v + L++, E);
                  m || c.push(H);
                }
              } else
                for (let L in o) {
                  let C = a(o[L], v + L, E);
                  m || (c[L] = C);
                }
            }
          }
        }
        return c;
      }
      return { clone: a(t, r, new Set()), files: i };
    };
  });
  var vb = f((Qo) => {
    "use strict";
    Qo.ReactNativeFile = $d();
    Qo.extractFiles = gb();
    Qo.isExtractableFile = Bd();
  });
  var bb = f((gi) => {
    Object.defineProperty(gi, "__esModule", { value: !0 });
    var Uo = Gd();
    gi.makeFetchBody = Uo.makeFetchBody;
    gi.makeFetchOptions = Uo.makeFetchOptions;
    gi.makeFetchSource = Uo.makeFetchSource;
    gi.makeFetchURL = Uo.makeFetchURL;
  });
  var Ob = f((zd) => {
    Object.defineProperty(zd, "__esModule", { value: !0 });
    var sn = qo(),
      iR = vb(),
      vi = bb(),
      sR =
        ({ forward: e, dispatchDebug: t }) =>
        (r) => {
          var n = sn.share(r),
            i = sn.mergeMap((a) => {
              var o = sn.filter(
                  (E) => E.kind === "teardown" && E.key === a.key
                )(n),
                { files: u, clone: l } = iR.extractFiles(O({}, a.variables)),
                c = vi.makeFetchBody({ query: a.query, variables: l }),
                d,
                p;
              if (u.size) {
                (d = vi.makeFetchURL(a)),
                  (p = vi.makeFetchOptions(a)),
                  p.headers["content-type"] === "application/json" &&
                    delete p.headers["content-type"],
                  (p.method = "POST"),
                  (p.body = new FormData()),
                  p.body.append("operations", JSON.stringify(c));
                var m = {},
                  v = 0;
                u.forEach((E) => {
                  m[++v] = E.map((L) => `variables.${L}`);
                }),
                  p.body.append("map", JSON.stringify(m)),
                  (v = 0),
                  u.forEach((E, L) => {
                    p.body.append(`${++v}`, L, L.name);
                  });
              } else
                (d = vi.makeFetchURL(a, c)), (p = vi.makeFetchOptions(a, c));
              return sn.onPush((E) => {
                var L = E.data ? void 0 : E.error;
              })(sn.takeUntil(o)(vi.makeFetchSource(a, d, p)));
            })(
              sn.filter((a) => a.kind === "query" || a.kind === "mutation")(n)
            ),
            s = e(
              sn.filter((a) => a.kind !== "query" && a.kind !== "mutation")(n)
            );
          return sn.merge([i, s]);
        };
    zd.multipartFetchExchange = sR;
  });
  var _b = f((kr, Tb) => {
    var Sb = typeof self != "undefined" ? self : kr,
      Vo = (function () {
        function e() {
          (this.fetch = !1), (this.DOMException = Sb.DOMException);
        }
        return (e.prototype = Sb), new e();
      })();
    (function (e) {
      var t = (function (r) {
        var n = {
          searchParams: "URLSearchParams" in e,
          iterable: "Symbol" in e && "iterator" in Symbol,
          blob:
            "FileReader" in e &&
            "Blob" in e &&
            (function () {
              try {
                return new Blob(), !0;
              } catch (g) {
                return !1;
              }
            })(),
          formData: "FormData" in e,
          arrayBuffer: "ArrayBuffer" in e,
        };
        function i(g) {
          return g && DataView.prototype.isPrototypeOf(g);
        }
        if (n.arrayBuffer)
          var s = [
              "[object Int8Array]",
              "[object Uint8Array]",
              "[object Uint8ClampedArray]",
              "[object Int16Array]",
              "[object Uint16Array]",
              "[object Int32Array]",
              "[object Uint32Array]",
              "[object Float32Array]",
              "[object Float64Array]",
            ],
            a =
              ArrayBuffer.isView ||
              function (g) {
                return g && s.indexOf(Object.prototype.toString.call(g)) > -1;
              };
        function o(g) {
          if (
            (typeof g != "string" && (g = String(g)),
            /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(g))
          )
            throw new TypeError("Invalid character in header field name");
          return g.toLowerCase();
        }
        function u(g) {
          return typeof g != "string" && (g = String(g)), g;
        }
        function l(g) {
          var _ = {
            next: function () {
              var I = g.shift();
              return { done: I === void 0, value: I };
            },
          };
          return (
            n.iterable &&
              (_[Symbol.iterator] = function () {
                return _;
              }),
            _
          );
        }
        function c(g) {
          (this.map = {}),
            g instanceof c
              ? g.forEach(function (_, I) {
                  this.append(I, _);
                }, this)
              : Array.isArray(g)
              ? g.forEach(function (_) {
                  this.append(_[0], _[1]);
                }, this)
              : g &&
                Object.getOwnPropertyNames(g).forEach(function (_) {
                  this.append(_, g[_]);
                }, this);
        }
        (c.prototype.append = function (g, _) {
          (g = o(g)), (_ = u(_));
          var I = this.map[g];
          this.map[g] = I ? I + ", " + _ : _;
        }),
          (c.prototype.delete = function (g) {
            delete this.map[o(g)];
          }),
          (c.prototype.get = function (g) {
            return (g = o(g)), this.has(g) ? this.map[g] : null;
          }),
          (c.prototype.has = function (g) {
            return this.map.hasOwnProperty(o(g));
          }),
          (c.prototype.set = function (g, _) {
            this.map[o(g)] = u(_);
          }),
          (c.prototype.forEach = function (g, _) {
            for (var I in this.map)
              this.map.hasOwnProperty(I) && g.call(_, this.map[I], I, this);
          }),
          (c.prototype.keys = function () {
            var g = [];
            return (
              this.forEach(function (_, I) {
                g.push(I);
              }),
              l(g)
            );
          }),
          (c.prototype.values = function () {
            var g = [];
            return (
              this.forEach(function (_) {
                g.push(_);
              }),
              l(g)
            );
          }),
          (c.prototype.entries = function () {
            var g = [];
            return (
              this.forEach(function (_, I) {
                g.push([I, _]);
              }),
              l(g)
            );
          }),
          n.iterable && (c.prototype[Symbol.iterator] = c.prototype.entries);
        function d(g) {
          if (g.bodyUsed) return Promise.reject(new TypeError("Already read"));
          g.bodyUsed = !0;
        }
        function p(g) {
          return new Promise(function (_, I) {
            (g.onload = function () {
              _(g.result);
            }),
              (g.onerror = function () {
                I(g.error);
              });
          });
        }
        function m(g) {
          var _ = new FileReader(),
            I = p(_);
          return _.readAsArrayBuffer(g), I;
        }
        function v(g) {
          var _ = new FileReader(),
            I = p(_);
          return _.readAsText(g), I;
        }
        function E(g) {
          for (
            var _ = new Uint8Array(g), I = new Array(_.length), z = 0;
            z < _.length;
            z++
          )
            I[z] = String.fromCharCode(_[z]);
          return I.join("");
        }
        function L(g) {
          if (g.slice) return g.slice(0);
          var _ = new Uint8Array(g.byteLength);
          return _.set(new Uint8Array(g)), _.buffer;
        }
        function C() {
          return (
            (this.bodyUsed = !1),
            (this._initBody = function (g) {
              (this._bodyInit = g),
                g
                  ? typeof g == "string"
                    ? (this._bodyText = g)
                    : n.blob && Blob.prototype.isPrototypeOf(g)
                    ? (this._bodyBlob = g)
                    : n.formData && FormData.prototype.isPrototypeOf(g)
                    ? (this._bodyFormData = g)
                    : n.searchParams &&
                      URLSearchParams.prototype.isPrototypeOf(g)
                    ? (this._bodyText = g.toString())
                    : n.arrayBuffer && n.blob && i(g)
                    ? ((this._bodyArrayBuffer = L(g.buffer)),
                      (this._bodyInit = new Blob([this._bodyArrayBuffer])))
                    : n.arrayBuffer &&
                      (ArrayBuffer.prototype.isPrototypeOf(g) || a(g))
                    ? (this._bodyArrayBuffer = L(g))
                    : (this._bodyText = g = Object.prototype.toString.call(g))
                  : (this._bodyText = ""),
                this.headers.get("content-type") ||
                  (typeof g == "string"
                    ? this.headers.set(
                        "content-type",
                        "text/plain;charset=UTF-8"
                      )
                    : this._bodyBlob && this._bodyBlob.type
                    ? this.headers.set("content-type", this._bodyBlob.type)
                    : n.searchParams &&
                      URLSearchParams.prototype.isPrototypeOf(g) &&
                      this.headers.set(
                        "content-type",
                        "application/x-www-form-urlencoded;charset=UTF-8"
                      ));
            }),
            n.blob &&
              ((this.blob = function () {
                var g = d(this);
                if (g) return g;
                if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer)
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]));
              }),
              (this.arrayBuffer = function () {
                return this._bodyArrayBuffer
                  ? d(this) || Promise.resolve(this._bodyArrayBuffer)
                  : this.blob().then(m);
              })),
            (this.text = function () {
              var g = d(this);
              if (g) return g;
              if (this._bodyBlob) return v(this._bodyBlob);
              if (this._bodyArrayBuffer)
                return Promise.resolve(E(this._bodyArrayBuffer));
              if (this._bodyFormData)
                throw new Error("could not read FormData body as text");
              return Promise.resolve(this._bodyText);
            }),
            n.formData &&
              (this.formData = function () {
                return this.text().then($);
              }),
            (this.json = function () {
              return this.text().then(JSON.parse);
            }),
            this
          );
        }
        var H = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function B(g) {
          var _ = g.toUpperCase();
          return H.indexOf(_) > -1 ? _ : g;
        }
        function S(g, _) {
          _ = _ || {};
          var I = _.body;
          if (g instanceof S) {
            if (g.bodyUsed) throw new TypeError("Already read");
            (this.url = g.url),
              (this.credentials = g.credentials),
              _.headers || (this.headers = new c(g.headers)),
              (this.method = g.method),
              (this.mode = g.mode),
              (this.signal = g.signal),
              !I &&
                g._bodyInit != null &&
                ((I = g._bodyInit), (g.bodyUsed = !0));
          } else this.url = String(g);
          if (
            ((this.credentials =
              _.credentials || this.credentials || "same-origin"),
            (_.headers || !this.headers) && (this.headers = new c(_.headers)),
            (this.method = B(_.method || this.method || "GET")),
            (this.mode = _.mode || this.mode || null),
            (this.signal = _.signal || this.signal),
            (this.referrer = null),
            (this.method === "GET" || this.method === "HEAD") && I)
          )
            throw new TypeError("Body not allowed for GET or HEAD requests");
          this._initBody(I);
        }
        S.prototype.clone = function () {
          return new S(this, { body: this._bodyInit });
        };
        function $(g) {
          var _ = new FormData();
          return (
            g
              .trim()
              .split("&")
              .forEach(function (I) {
                if (I) {
                  var z = I.split("="),
                    F = z.shift().replace(/\+/g, " "),
                    q = z.join("=").replace(/\+/g, " ");
                  _.append(decodeURIComponent(F), decodeURIComponent(q));
                }
              }),
            _
          );
        }
        function k(g) {
          var _ = new c(),
            I = g.replace(/\r?\n[\t ]+/g, " ");
          return (
            I.split(/\r?\n/).forEach(function (z) {
              var F = z.split(":"),
                q = F.shift().trim();
              if (q) {
                var ee = F.join(":").trim();
                _.append(q, ee);
              }
            }),
            _
          );
        }
        C.call(S.prototype);
        function M(g, _) {
          _ || (_ = {}),
            (this.type = "default"),
            (this.status = _.status === void 0 ? 200 : _.status),
            (this.ok = this.status >= 200 && this.status < 300),
            (this.statusText = "statusText" in _ ? _.statusText : "OK"),
            (this.headers = new c(_.headers)),
            (this.url = _.url || ""),
            this._initBody(g);
        }
        C.call(M.prototype),
          (M.prototype.clone = function () {
            return new M(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new c(this.headers),
              url: this.url,
            });
          }),
          (M.error = function () {
            var g = new M(null, { status: 0, statusText: "" });
            return (g.type = "error"), g;
          });
        var de = [301, 302, 303, 307, 308];
        (M.redirect = function (g, _) {
          if (de.indexOf(_) === -1) throw new RangeError("Invalid status code");
          return new M(null, { status: _, headers: { location: g } });
        }),
          (r.DOMException = e.DOMException);
        try {
          new r.DOMException();
        } catch (g) {
          (r.DOMException = function (_, I) {
            (this.message = _), (this.name = I);
            var z = Error(_);
            this.stack = z.stack;
          }),
            (r.DOMException.prototype = Object.create(Error.prototype)),
            (r.DOMException.prototype.constructor = r.DOMException);
        }
        function T(g, _) {
          return new Promise(function (I, z) {
            var F = new S(g, _);
            if (F.signal && F.signal.aborted)
              return z(new r.DOMException("Aborted", "AbortError"));
            var q = new XMLHttpRequest();
            function ee() {
              q.abort();
            }
            (q.onload = function () {
              var ie = {
                status: q.status,
                statusText: q.statusText,
                headers: k(q.getAllResponseHeaders() || ""),
              };
              ie.url =
                "responseURL" in q
                  ? q.responseURL
                  : ie.headers.get("X-Request-URL");
              var ne = "response" in q ? q.response : q.responseText;
              I(new M(ne, ie));
            }),
              (q.onerror = function () {
                z(new TypeError("Network request failed"));
              }),
              (q.ontimeout = function () {
                z(new TypeError("Network request failed"));
              }),
              (q.onabort = function () {
                z(new r.DOMException("Aborted", "AbortError"));
              }),
              q.open(F.method, F.url, !0),
              F.credentials === "include"
                ? (q.withCredentials = !0)
                : F.credentials === "omit" && (q.withCredentials = !1),
              "responseType" in q && n.blob && (q.responseType = "blob"),
              F.headers.forEach(function (ie, ne) {
                q.setRequestHeader(ne, ie);
              }),
              F.signal &&
                (F.signal.addEventListener("abort", ee),
                (q.onreadystatechange = function () {
                  q.readyState === 4 &&
                    F.signal.removeEventListener("abort", ee);
                })),
              q.send(typeof F._bodyInit == "undefined" ? null : F._bodyInit);
          });
        }
        return (
          (T.polyfill = !0),
          e.fetch ||
            ((e.fetch = T), (e.Headers = c), (e.Request = S), (e.Response = M)),
          (r.Headers = c),
          (r.Request = S),
          (r.Response = M),
          (r.fetch = T),
          Object.defineProperty(r, "__esModule", { value: !0 }),
          r
        );
      })({});
    })(Vo);
    Vo.fetch.ponyfill = !0;
    delete Vo.fetch.polyfill;
    var bi = Vo;
    kr = bi.fetch;
    kr.default = bi.fetch;
    kr.fetch = bi.fetch;
    kr.Headers = bi.Headers;
    kr.Request = bi.Request;
    kr.Response = bi.Response;
    Tb.exports = kr;
  });
  var $o = f((Ke) => {
    "use strict";
    Object.defineProperty(Ke, "__esModule", { value: !0 });
    Ke.limitCloseReason =
      Ke.hasOwnStringProperty =
      Ke.hasOwnArrayProperty =
      Ke.hasOwnObjectProperty =
      Ke.hasOwnProperty =
      Ke.areGraphQLErrors =
      Ke.isAsyncGenerator =
      Ke.isAsyncIterable =
      Ke.isObject =
        void 0;
    var Ko = Object.prototype.hasOwnProperty;
    function Wd(e) {
      return typeof e == "object" && e !== null;
    }
    Ke.isObject = Wd;
    function aR(e) {
      return typeof Object(e)[Symbol.asyncIterator] == "function";
    }
    Ke.isAsyncIterable = aR;
    function oR(e) {
      return (
        Wd(e) &&
        typeof Object(e)[Symbol.asyncIterator] == "function" &&
        typeof e.return == "function"
      );
    }
    Ke.isAsyncGenerator = oR;
    function uR(e) {
      return Array.isArray(e) && e.length > 0 && e.every((t) => "message" in t);
    }
    Ke.areGraphQLErrors = uR;
    function lR(e, t) {
      return Ko.call(e, t);
    }
    Ke.hasOwnProperty = lR;
    function cR(e, t) {
      return Ko.call(e, t) && Wd(e[t]);
    }
    Ke.hasOwnObjectProperty = cR;
    function pR(e, t) {
      return Ko.call(e, t) && Array.isArray(e[t]);
    }
    Ke.hasOwnArrayProperty = pR;
    function dR(e, t) {
      return Ko.call(e, t) && typeof e[t] == "string";
    }
    Ke.hasOwnStringProperty = dR;
    function fR(e, t) {
      return e.length < 124 ? e : t;
    }
    Ke.limitCloseReason = fR;
  });
  var Ws = f((ft) => {
    "use strict";
    Object.defineProperty(ft, "__esModule", { value: !0 });
    ft.stringifyMessage =
      ft.parseMessage =
      ft.isMessage =
      ft.MessageType =
      ft.CloseCode =
      ft.GRAPHQL_TRANSPORT_WS_PROTOCOL =
        void 0;
    var Xe = $o();
    ft.GRAPHQL_TRANSPORT_WS_PROTOCOL = "graphql-transport-ws";
    var yR;
    (function (e) {
      (e[(e.InternalServerError = 4500)] = "InternalServerError"),
        (e[(e.InternalClientError = 4005)] = "InternalClientError"),
        (e[(e.BadRequest = 4400)] = "BadRequest"),
        (e[(e.BadResponse = 4004)] = "BadResponse"),
        (e[(e.Unauthorized = 4401)] = "Unauthorized"),
        (e[(e.Forbidden = 4403)] = "Forbidden"),
        (e[(e.SubprotocolNotAcceptable = 4406)] = "SubprotocolNotAcceptable"),
        (e[(e.ConnectionInitialisationTimeout = 4408)] =
          "ConnectionInitialisationTimeout"),
        (e[(e.ConnectionAcknowledgementTimeout = 4504)] =
          "ConnectionAcknowledgementTimeout"),
        (e[(e.SubscriberAlreadyExists = 4409)] = "SubscriberAlreadyExists"),
        (e[(e.TooManyInitialisationRequests = 4429)] =
          "TooManyInitialisationRequests");
    })((yR = ft.CloseCode || (ft.CloseCode = {})));
    var Gr;
    (function (e) {
      (e.ConnectionInit = "connection_init"),
        (e.ConnectionAck = "connection_ack"),
        (e.Ping = "ping"),
        (e.Pong = "pong"),
        (e.Subscribe = "subscribe"),
        (e.Next = "next"),
        (e.Error = "error"),
        (e.Complete = "complete");
    })((Gr = ft.MessageType || (ft.MessageType = {})));
    function Bo(e) {
      if ((0, Xe.isObject)(e)) {
        if (!(0, Xe.hasOwnStringProperty)(e, "type")) return !1;
        switch (e.type) {
          case Gr.ConnectionInit:
            return (
              !(0, Xe.hasOwnProperty)(e, "payload") ||
              e.payload === void 0 ||
              (0, Xe.isObject)(e.payload)
            );
          case Gr.ConnectionAck:
          case Gr.Ping:
          case Gr.Pong:
            return (
              !(0, Xe.hasOwnProperty)(e, "payload") ||
              e.payload === void 0 ||
              (0, Xe.isObject)(e.payload)
            );
          case Gr.Subscribe:
            return (
              (0, Xe.hasOwnStringProperty)(e, "id") &&
              (0, Xe.hasOwnObjectProperty)(e, "payload") &&
              (!(0, Xe.hasOwnProperty)(e.payload, "operationName") ||
                e.payload.operationName === void 0 ||
                e.payload.operationName === null ||
                typeof e.payload.operationName == "string") &&
              (0, Xe.hasOwnStringProperty)(e.payload, "query") &&
              (!(0, Xe.hasOwnProperty)(e.payload, "variables") ||
                e.payload.variables === void 0 ||
                e.payload.variables === null ||
                (0, Xe.hasOwnObjectProperty)(e.payload, "variables")) &&
              (!(0, Xe.hasOwnProperty)(e.payload, "extensions") ||
                e.payload.extensions === void 0 ||
                e.payload.extensions === null ||
                (0, Xe.hasOwnObjectProperty)(e.payload, "extensions"))
            );
          case Gr.Next:
            return (
              (0, Xe.hasOwnStringProperty)(e, "id") &&
              (0, Xe.hasOwnObjectProperty)(e, "payload")
            );
          case Gr.Error:
            return (
              (0, Xe.hasOwnStringProperty)(e, "id") &&
              (0, Xe.areGraphQLErrors)(e.payload)
            );
          case Gr.Complete:
            return (0, Xe.hasOwnStringProperty)(e, "id");
          default:
            return !1;
        }
      }
      return !1;
    }
    ft.isMessage = Bo;
    function hR(e, t) {
      if (Bo(e)) return e;
      if (typeof e != "string") throw new Error("Message not parsable");
      let r = JSON.parse(e, t);
      if (!Bo(r)) throw new Error("Invalid message");
      return r;
    }
    ft.parseMessage = hR;
    function mR(e, t) {
      if (!Bo(e)) throw new Error("Cannot stringify invalid message");
      return JSON.stringify(e, t);
    }
    ft.stringifyMessage = mR;
  });
  var Ab = f((Qr) => {
    "use strict";
    var gR =
        (Qr && Qr.__createBinding) ||
        (Object.create
          ? function (e, t, r, n) {
              n === void 0 && (n = r),
                Object.defineProperty(e, n, {
                  enumerable: !0,
                  get: function () {
                    return t[r];
                  },
                });
            }
          : function (e, t, r, n) {
              n === void 0 && (n = r), (e[n] = t[r]);
            }),
      vR =
        (Qr && Qr.__exportStar) ||
        function (e, t) {
          for (var r in e)
            r !== "default" &&
              !Object.prototype.hasOwnProperty.call(t, r) &&
              gR(t, e, r);
        };
    Object.defineProperty(Qr, "__esModule", { value: !0 });
    Qr.createClient = void 0;
    var ve = Ws(),
      Yd = $o();
    vR(Ws(), Qr);
    function bR(e) {
      let {
          url: t,
          connectionParams: r,
          lazy: n = !0,
          onNonLazyError: i = console.error,
          lazyCloseTimeout: s = 0,
          keepAlive: a = 0,
          disablePong: o,
          connectionAckWaitTimeout: u = 0,
          retryAttempts: l = 5,
          retryWait: c = function (z) {
            return y(this, null, function* () {
              let F = 1e3;
              for (let q = 0; q < z; q++) F *= 2;
              yield new Promise((q) =>
                setTimeout(q, F + Math.floor(Math.random() * (3e3 - 300) + 300))
              );
            });
          },
          isFatalConnectionProblem: d = (I) => !Hd(I),
          on: p,
          webSocketImpl: m,
          generateID: v = function () {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
              /[xy]/g,
              (z) => {
                let F = (Math.random() * 16) | 0;
                return (z == "x" ? F : (F & 3) | 8).toString(16);
              }
            );
          },
          jsonMessageReplacer: E,
          jsonMessageReviver: L,
        } = e,
        C;
      if (m) {
        if (!SR(m))
          throw new Error("Invalid WebSocket implementation provided");
        C = m;
      } else
        typeof WebSocket != "undefined"
          ? (C = WebSocket)
          : typeof global != "undefined"
          ? (C = global.WebSocket || global.MozWebSocket)
          : typeof window != "undefined" &&
            (C = window.WebSocket || window.MozWebSocket);
      if (!C) throw new Error("WebSocket implementation missing");
      let H = C,
        B = (() => {
          let I = (() => {
              let F = {};
              return {
                on(q, ee) {
                  return (
                    (F[q] = ee),
                    () => {
                      delete F[q];
                    }
                  );
                },
                emit(q) {
                  var ee;
                  "id" in q &&
                    ((ee = F[q.id]) === null || ee === void 0 || ee.call(F, q));
                },
              };
            })(),
            z = {
              connecting: (p == null ? void 0 : p.connecting)
                ? [p.connecting]
                : [],
              opened: (p == null ? void 0 : p.opened) ? [p.opened] : [],
              connected: (p == null ? void 0 : p.connected)
                ? [p.connected]
                : [],
              ping: (p == null ? void 0 : p.ping) ? [p.ping] : [],
              pong: (p == null ? void 0 : p.pong) ? [p.pong] : [],
              message: (p == null ? void 0 : p.message)
                ? [I.emit, p.message]
                : [I.emit],
              closed: (p == null ? void 0 : p.closed) ? [p.closed] : [],
              error: (p == null ? void 0 : p.error) ? [p.error] : [],
            };
          return {
            onMessage: I.on,
            on(F, q) {
              let ee = z[F];
              return (
                ee.push(q),
                () => {
                  ee.splice(ee.indexOf(q), 1);
                }
              );
            },
            emit(F, ...q) {
              for (let ee of [...z[F]]) ee(...q);
            },
          };
        })();
      function S(I) {
        let z = [
          B.on("error", (F) => {
            z.forEach((q) => q()), I(F);
          }),
          B.on("closed", (F) => {
            z.forEach((q) => q()), I(F);
          }),
        ];
      }
      let $,
        k = 0,
        M = !1,
        de = 0,
        T = !1;
      function g() {
        return y(this, null, function* () {
          let [I, z] = yield $ != null
            ? $
            : ($ = new Promise((ee, ie) =>
                (() =>
                  y(this, null, function* () {
                    if (M) {
                      if ((yield c(de), !k))
                        return (
                          ($ = void 0),
                          ie({ code: 1e3, reason: "All Subscriptions Gone" })
                        );
                      de++;
                    }
                    B.emit("connecting");
                    let ne = new H(
                        typeof t == "function" ? yield t() : t,
                        ve.GRAPHQL_TRANSPORT_WS_PROTOCOL
                      ),
                      it,
                      Ae;
                    function mr() {
                      isFinite(a) &&
                        a > 0 &&
                        (clearTimeout(Ae),
                        (Ae = setTimeout(() => {
                          ne.readyState === H.OPEN &&
                            (ne.send(
                              (0, ve.stringifyMessage)({
                                type: ve.MessageType.Ping,
                              })
                            ),
                            B.emit("ping", !1, void 0));
                        }, a)));
                    }
                    S((j) => {
                      ($ = void 0), clearTimeout(it), clearTimeout(Ae), ie(j);
                    }),
                      (ne.onerror = (j) => B.emit("error", j)),
                      (ne.onclose = (j) => B.emit("closed", j)),
                      (ne.onopen = () =>
                        y(this, null, function* () {
                          try {
                            B.emit("opened", ne);
                            let j = typeof r == "function" ? yield r() : r;
                            ne.send(
                              (0, ve.stringifyMessage)(
                                j
                                  ? {
                                      type: ve.MessageType.ConnectionInit,
                                      payload: j,
                                    }
                                  : { type: ve.MessageType.ConnectionInit },
                                E
                              )
                            ),
                              isFinite(u) &&
                                u > 0 &&
                                (it = setTimeout(() => {
                                  ne.close(
                                    ve.CloseCode
                                      .ConnectionAcknowledgementTimeout,
                                    "Connection acknowledgement timeout"
                                  );
                                }, u)),
                              mr();
                          } catch (j) {
                            B.emit("error", j),
                              ne.close(
                                ve.CloseCode.InternalClientError,
                                (0, Yd.limitCloseReason)(
                                  j instanceof Error
                                    ? j.message
                                    : new Error(j).message,
                                  "Internal client error"
                                )
                              );
                          }
                        }));
                    let b = !1;
                    ne.onmessage = ({ data: j }) => {
                      try {
                        let A = (0, ve.parseMessage)(j, L);
                        if (
                          (B.emit("message", A),
                          A.type === "ping" || A.type === "pong")
                        ) {
                          B.emit(A.type, !0, A.payload),
                            A.type === "pong"
                              ? mr()
                              : o ||
                                (ne.send(
                                  (0, ve.stringifyMessage)(
                                    A.payload
                                      ? {
                                          type: ve.MessageType.Pong,
                                          payload: A.payload,
                                        }
                                      : { type: ve.MessageType.Pong }
                                  )
                                ),
                                B.emit("pong", !1, A.payload));
                          return;
                        }
                        if (b) return;
                        if (A.type !== ve.MessageType.ConnectionAck)
                          throw new Error(
                            `First message cannot be of type ${A.type}`
                          );
                        clearTimeout(it),
                          (b = !0),
                          B.emit("connected", ne, A.payload),
                          (M = !1),
                          (de = 0),
                          ee([ne, new Promise((x, be) => S(be))]);
                      } catch (A) {
                        (ne.onmessage = null),
                          B.emit("error", A),
                          ne.close(
                            ve.CloseCode.BadResponse,
                            (0, Yd.limitCloseReason)(
                              A instanceof Error
                                ? A.message
                                : new Error(A).message,
                              "Bad response"
                            )
                          );
                      }
                    };
                  }))()
              ));
          I.readyState === H.CLOSING && (yield z);
          let F = () => {},
            q = new Promise((ee) => (F = ee));
          return [
            I,
            F,
            Promise.race([
              q.then(() => {
                if (!k) {
                  let ee = () => I.close(1e3, "Normal Closure");
                  isFinite(s) && s > 0
                    ? setTimeout(() => {
                        !k && I.readyState === H.OPEN && ee();
                      }, s)
                    : ee();
                }
              }),
              z,
            ]),
          ];
        });
      }
      function _(I) {
        if (
          Hd(I) &&
          (OR(I.code) ||
            [
              ve.CloseCode.InternalServerError,
              ve.CloseCode.InternalClientError,
              ve.CloseCode.BadRequest,
              ve.CloseCode.BadResponse,
              ve.CloseCode.Unauthorized,
              ve.CloseCode.SubprotocolNotAcceptable,
              ve.CloseCode.SubscriberAlreadyExists,
              ve.CloseCode.TooManyInitialisationRequests,
            ].includes(I.code))
        )
          throw I;
        if (T) return !1;
        if (Hd(I) && I.code === 1e3) return k > 0;
        if (!l || de >= l || d(I)) throw I;
        return (M = !0);
      }
      return (
        n ||
          (() =>
            y(this, null, function* () {
              for (k++; ; )
                try {
                  let [, , I] = yield g();
                  yield I;
                } catch (I) {
                  try {
                    if (!_(I)) return;
                  } catch (z) {
                    return i == null ? void 0 : i(z);
                  }
                }
            }))(),
        {
          on: B.on,
          subscribe(I, z) {
            let F = v(),
              q = !1,
              ee = !1,
              ie = () => {
                k--, (q = !0);
              };
            return (
              (() =>
                y(this, null, function* () {
                  for (k++; ; )
                    try {
                      let [ne, it, Ae] = yield g();
                      if (q) return it();
                      let mr = B.onMessage(F, (b) => {
                        switch (b.type) {
                          case ve.MessageType.Next: {
                            z.next(b.payload);
                            return;
                          }
                          case ve.MessageType.Error: {
                            (ee = !0), (q = !0), z.error(b.payload), ie();
                            return;
                          }
                          case ve.MessageType.Complete: {
                            (q = !0), ie();
                            return;
                          }
                        }
                      });
                      ne.send(
                        (0, ve.stringifyMessage)(
                          { id: F, type: ve.MessageType.Subscribe, payload: I },
                          E
                        )
                      ),
                        (ie = () => {
                          !q &&
                            ne.readyState === H.OPEN &&
                            ne.send(
                              (0, ve.stringifyMessage)(
                                { id: F, type: ve.MessageType.Complete },
                                E
                              )
                            ),
                            k--,
                            (q = !0),
                            it();
                        }),
                        yield Ae.finally(mr);
                      return;
                    } catch (ne) {
                      if (!_(ne)) return;
                    }
                }))()
                .then(() => {
                  ee || z.complete();
                })
                .catch((ne) => {
                  z.error(ne);
                }),
              () => {
                q || ie();
              }
            );
          },
          dispose() {
            return y(this, null, function* () {
              if (((T = !0), $)) {
                let [I] = yield $;
                I.close(1e3, "Normal Closure");
              }
            });
          },
        }
      );
    }
    Qr.createClient = bR;
    function Hd(e) {
      return (0, Yd.isObject)(e) && "code" in e && "reason" in e;
    }
    function OR(e) {
      return [1e3, 1001, 1006, 1005, 1012, 1013, 1013].includes(e)
        ? !1
        : e >= 1e3 && e <= 1999;
    }
    function SR(e) {
      return (
        typeof e == "function" &&
        "constructor" in e &&
        "CLOSED" in e &&
        "CLOSING" in e &&
        "CONNECTING" in e &&
        "OPEN" in e
      );
    }
  });
  var Eb = f((Si) => {
    "use strict";
    var TR =
      (Si && Si.__asyncValues) ||
      function (e) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var t = e[Symbol.asyncIterator],
          r;
        return t
          ? t.call(e)
          : ((e =
              typeof __values == "function"
                ? __values(e)
                : e[Symbol.iterator]()),
            (r = {}),
            n("next"),
            n("throw"),
            n("return"),
            (r[Symbol.asyncIterator] = function () {
              return this;
            }),
            r);
        function n(s) {
          r[s] =
            e[s] &&
            function (a) {
              return new Promise(function (o, u) {
                (a = e[s](a)), i(o, u, a.done, a.value);
              });
            };
        }
        function i(s, a, o, u) {
          Promise.resolve(u).then(function (l) {
            s({ value: l, done: o });
          }, a);
        }
      };
    Object.defineProperty(Si, "__esModule", { value: !0 });
    Si.makeServer = void 0;
    var Oi = Fo(),
      Te = Ws(),
      kn = $o();
    function _R(e) {
      let {
        schema: t,
        context: r,
        roots: n,
        validate: i,
        execute: s,
        subscribe: a,
        connectionInitWaitTimeout: o = 3e3,
        onConnect: u,
        onDisconnect: l,
        onClose: c,
        onSubscribe: d,
        onOperation: p,
        onNext: m,
        onError: v,
        onComplete: E,
        jsonMessageReviver: L,
        jsonMessageReplacer: C,
      } = e;
      return {
        opened(H, B) {
          let S = {
            connectionInitReceived: !1,
            acknowledged: !1,
            subscriptions: {},
            extra: B,
          };
          if (H.protocol !== Te.GRAPHQL_TRANSPORT_WS_PROTOCOL)
            return (
              H.close(
                Te.CloseCode.SubprotocolNotAcceptable,
                "Subprotocol not acceptable"
              ),
              (k, M) =>
                y(this, null, function* () {
                  yield c == null ? void 0 : c(S, k, M);
                })
            );
          let $ =
            o > 0 && isFinite(o)
              ? setTimeout(() => {
                  S.connectionInitReceived ||
                    H.close(
                      Te.CloseCode.ConnectionInitialisationTimeout,
                      "Connection initialisation timeout"
                    );
                }, o)
              : null;
          return (
            H.onMessage(function (M) {
              return y(this, null, function* () {
                var de, T, g;
                let _;
                try {
                  _ = (0, Te.parseMessage)(M, L);
                } catch (F) {
                  return H.close(
                    Te.CloseCode.BadRequest,
                    "Invalid message received"
                  );
                }
                switch (_.type) {
                  case Te.MessageType.ConnectionInit: {
                    if (S.connectionInitReceived)
                      return H.close(
                        Te.CloseCode.TooManyInitialisationRequests,
                        "Too many initialisation requests"
                      );
                    (S.connectionInitReceived = !0),
                      (0, kn.isObject)(_.payload) &&
                        (S.connectionParams = _.payload);
                    let F = yield u == null ? void 0 : u(S);
                    if (F === !1)
                      return H.close(Te.CloseCode.Forbidden, "Forbidden");
                    yield H.send(
                      (0, Te.stringifyMessage)(
                        (0, kn.isObject)(F)
                          ? { type: Te.MessageType.ConnectionAck, payload: F }
                          : { type: Te.MessageType.ConnectionAck },
                        C
                      )
                    ),
                      (S.acknowledged = !0);
                    return;
                  }
                  case Te.MessageType.Ping: {
                    if (H.onPing) return yield H.onPing(_.payload);
                    yield H.send(
                      (0, Te.stringifyMessage)(
                        _.payload
                          ? { type: Te.MessageType.Pong, payload: _.payload }
                          : { type: Te.MessageType.Pong }
                      )
                    );
                    return;
                  }
                  case Te.MessageType.Pong:
                    return yield (g = H.onPong) === null || g === void 0
                      ? void 0
                      : g.call(H, _.payload);
                  case Te.MessageType.Subscribe: {
                    if (!S.acknowledged)
                      return H.close(Te.CloseCode.Unauthorized, "Unauthorized");
                    let { id: F, payload: q } = _;
                    if (F in S.subscriptions)
                      return H.close(
                        Te.CloseCode.SubscriberAlreadyExists,
                        `Subscriber for ${F} already exists`
                      );
                    S.subscriptions[F] = null;
                    let ee = {
                        next: (b, j) =>
                          y(this, null, function* () {
                            let A = {
                                id: F,
                                type: Te.MessageType.Next,
                                payload: b,
                              },
                              x = yield m == null ? void 0 : m(S, A, j, b);
                            x &&
                              (A = Object.assign(Object.assign({}, A), {
                                payload: x,
                              })),
                              yield H.send((0, Te.stringifyMessage)(A, C));
                          }),
                        error: (b) =>
                          y(this, null, function* () {
                            let j = {
                                id: F,
                                type: Te.MessageType.Error,
                                payload: b,
                              },
                              A = yield v == null ? void 0 : v(S, j, b);
                            A &&
                              (j = Object.assign(Object.assign({}, j), {
                                payload: A,
                              })),
                              yield H.send((0, Te.stringifyMessage)(j, C));
                          }),
                        complete: (b) =>
                          y(this, null, function* () {
                            let j = { id: F, type: Te.MessageType.Complete };
                            yield E == null ? void 0 : E(S, j),
                              b &&
                                (yield H.send((0, Te.stringifyMessage)(j, C)));
                          }),
                      },
                      ie,
                      ne = yield d == null ? void 0 : d(S, _);
                    if (ne) {
                      if ((0, kn.areGraphQLErrors)(ne))
                        return yield ee.error(ne);
                      if (Array.isArray(ne))
                        throw new Error(
                          "Invalid return value from onSubscribe hook, expected an array of GraphQLError objects"
                        );
                      ie = ne;
                    } else {
                      if (!t)
                        throw new Error("The GraphQL schema is not provided");
                      let b = {
                        operationName: q.operationName,
                        document: (0, Oi.parse)(q.query),
                        variableValues: q.variables,
                      };
                      ie = Object.assign(Object.assign({}, b), {
                        schema: typeof t == "function" ? yield t(S, _, b) : t,
                      });
                      let j = (i != null ? i : Oi.validate)(
                        ie.schema,
                        ie.document
                      );
                      if (j.length > 0) return yield ee.error(j);
                    }
                    let it = (0, Oi.getOperationAST)(
                      ie.document,
                      ie.operationName
                    );
                    if (!it)
                      return yield ee.error([
                        new Oi.GraphQLError("Unable to identify operation"),
                      ]);
                    "rootValue" in ie ||
                      (ie.rootValue = n == null ? void 0 : n[it.operation]),
                      "contextValue" in ie ||
                        (ie.contextValue =
                          typeof r == "function" ? yield r(S, _, ie) : r);
                    let Ae;
                    it.operation === "subscription"
                      ? (Ae = yield (a != null ? a : Oi.subscribe)(ie))
                      : (Ae = yield (s != null ? s : Oi.execute)(ie));
                    let mr = yield p == null ? void 0 : p(S, _, ie, Ae);
                    if ((mr && (Ae = mr), (0, kn.isAsyncIterable)(Ae)))
                      if (!(F in S.subscriptions))
                        (0, kn.isAsyncGenerator)(Ae) && Ae.return(void 0);
                      else {
                        S.subscriptions[F] = Ae;
                        try {
                          for (
                            var I = TR(Ae), z;
                            (z = yield I.next()), !z.done;

                          ) {
                            let b = z.value;
                            yield ee.next(b, ie);
                          }
                        } catch (b) {
                          de = { error: b };
                        } finally {
                          try {
                            z && !z.done && (T = I.return) && (yield T.call(I));
                          } finally {
                            if (de) throw de.error;
                          }
                        }
                      }
                    else F in S.subscriptions && (yield ee.next(Ae, ie));
                    yield ee.complete(F in S.subscriptions),
                      delete S.subscriptions[F];
                    return;
                  }
                  case Te.MessageType.Complete: {
                    let F = S.subscriptions[_.id];
                    (0, kn.isAsyncGenerator)(F) && (yield F.return(void 0)),
                      delete S.subscriptions[_.id];
                    return;
                  }
                  default:
                    throw new Error(
                      `Unexpected message of type ${_.type} received`
                    );
                }
              });
            }),
            (k, M) =>
              y(this, null, function* () {
                $ && clearTimeout($);
                for (let de of Object.values(S.subscriptions))
                  (0, kn.isAsyncGenerator)(de) && (yield de.return(void 0));
                S.acknowledged && (yield l == null ? void 0 : l(S, k, M)),
                  yield c == null ? void 0 : c(S, k, M);
              })
          );
        },
      };
    }
    Si.makeServer = _R;
  });
  var Nb = f((Ur) => {
    "use strict";
    var AR =
        (Ur && Ur.__createBinding) ||
        (Object.create
          ? function (e, t, r, n) {
              n === void 0 && (n = r),
                Object.defineProperty(e, n, {
                  enumerable: !0,
                  get: function () {
                    return t[r];
                  },
                });
            }
          : function (e, t, r, n) {
              n === void 0 && (n = r), (e[n] = t[r]);
            }),
      Jd =
        (Ur && Ur.__exportStar) ||
        function (e, t) {
          for (var r in e)
            r !== "default" &&
              !Object.prototype.hasOwnProperty.call(t, r) &&
              AR(t, e, r);
        };
    Object.defineProperty(Ur, "__esModule", { value: !0 });
    Jd(Ab(), Ur);
    Jd(Eb(), Ur);
    Jd(Ws(), Ur);
  });
  var jb = f((eQ, Ib) => {
    var Ti = null;
    typeof WebSocket != "undefined"
      ? (Ti = WebSocket)
      : typeof MozWebSocket != "undefined"
      ? (Ti = MozWebSocket)
      : typeof global != "undefined"
      ? (Ti = global.WebSocket || global.MozWebSocket)
      : typeof window != "undefined"
      ? (Ti = window.WebSocket || window.MozWebSocket)
      : typeof self != "undefined" &&
        (Ti = self.WebSocket || self.MozWebSocket);
    Ib.exports = Ti;
  });
  var wb = f((Pb) => {
    "use strict";
    Object.defineProperty(Pb, "__esModule", { value: !0 });
  });
  var Db = f((zo) => {
    "use strict";
    Object.defineProperty(zo, "__esModule", { value: !0 });
    zo._globalThis = void 0;
    zo._globalThis =
      typeof globalThis == "object"
        ? globalThis
        : typeof self == "object"
        ? self
        : typeof window == "object"
        ? window
        : typeof global == "object"
        ? global
        : {};
  });
  var Rb = f((Gn) => {
    "use strict";
    var ER =
        (Gn && Gn.__createBinding) ||
        (Object.create
          ? function (e, t, r, n) {
              n === void 0 && (n = r),
                Object.defineProperty(e, n, {
                  enumerable: !0,
                  get: function () {
                    return t[r];
                  },
                });
            }
          : function (e, t, r, n) {
              n === void 0 && (n = r), (e[n] = t[r]);
            }),
      NR =
        (Gn && Gn.__exportStar) ||
        function (e, t) {
          for (var r in e)
            r !== "default" &&
              !Object.prototype.hasOwnProperty.call(t, r) &&
              ER(t, e, r);
        };
    Object.defineProperty(Gn, "__esModule", { value: !0 });
    NR(Db(), Gn);
  });
  var Xd = f((Wo) => {
    "use strict";
    Object.defineProperty(Wo, "__esModule", { value: !0 });
    Wo.VERSION = void 0;
    Wo.VERSION = "1.0.4";
  });
  var qb = f((_i) => {
    "use strict";
    Object.defineProperty(_i, "__esModule", { value: !0 });
    _i.isCompatible = _i._makeCompatibilityCheck = void 0;
    var IR = Xd(),
      Lb = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
    function Fb(e) {
      var t = new Set([e]),
        r = new Set(),
        n = e.match(Lb);
      if (!n)
        return function () {
          return !1;
        };
      var i = { major: +n[1], minor: +n[2], patch: +n[3], prerelease: n[4] };
      if (i.prerelease != null)
        return function (u) {
          return u === e;
        };
      function s(o) {
        return r.add(o), !1;
      }
      function a(o) {
        return t.add(o), !0;
      }
      return function (u) {
        if (t.has(u)) return !0;
        if (r.has(u)) return !1;
        var l = u.match(Lb);
        if (!l) return s(u);
        var c = { major: +l[1], minor: +l[2], patch: +l[3], prerelease: l[4] };
        return c.prerelease != null || i.major !== c.major
          ? s(u)
          : i.major === 0
          ? i.minor === c.minor && i.patch <= c.patch
            ? a(u)
            : s(u)
          : i.minor <= c.minor
          ? a(u)
          : s(u);
      };
    }
    _i._makeCompatibilityCheck = Fb;
    _i.isCompatible = Fb(IR.VERSION);
  });
  var Ai = f((an) => {
    "use strict";
    Object.defineProperty(an, "__esModule", { value: !0 });
    an.unregisterGlobal = an.getGlobal = an.registerGlobal = void 0;
    var jR = Rb(),
      Ys = Xd(),
      PR = qb(),
      wR = Ys.VERSION.split(".")[0],
      Hs = Symbol.for("opentelemetry.js.api." + wR),
      Js = jR._globalThis;
    function DR(e, t, r, n) {
      var i;
      n === void 0 && (n = !1);
      var s = (Js[Hs] =
        (i = Js[Hs]) !== null && i !== void 0 ? i : { version: Ys.VERSION });
      if (!n && s[e]) {
        var a = new Error(
          "@opentelemetry/api: Attempted duplicate registration of API: " + e
        );
        return r.error(a.stack || a.message), !1;
      }
      if (s.version !== Ys.VERSION) {
        var a = new Error(
          "@opentelemetry/api: All API registration versions must match"
        );
        return r.error(a.stack || a.message), !1;
      }
      return (
        (s[e] = t),
        r.debug(
          "@opentelemetry/api: Registered a global for " +
            e +
            " v" +
            Ys.VERSION +
            "."
        ),
        !0
      );
    }
    an.registerGlobal = DR;
    function RR(e) {
      var t,
        r,
        n = (t = Js[Hs]) === null || t === void 0 ? void 0 : t.version;
      if (!(!n || !PR.isCompatible(n)))
        return (r = Js[Hs]) === null || r === void 0 ? void 0 : r[e];
    }
    an.getGlobal = RR;
    function LR(e, t) {
      t.debug(
        "@opentelemetry/api: Unregistering a global for " +
          e +
          " v" +
          Ys.VERSION +
          "."
      );
      var r = Js[Hs];
      r && delete r[e];
    }
    an.unregisterGlobal = LR;
  });
  var Mb = f((Yo) => {
    "use strict";
    Object.defineProperty(Yo, "__esModule", { value: !0 });
    Yo.DiagComponentLogger = void 0;
    var FR = Ai(),
      qR = (function () {
        function e(t) {
          this._namespace = t.namespace || "DiagComponentLogger";
        }
        return (
          (e.prototype.debug = function () {
            for (var t = [], r = 0; r < arguments.length; r++)
              t[r] = arguments[r];
            return Xs("debug", this._namespace, t);
          }),
          (e.prototype.error = function () {
            for (var t = [], r = 0; r < arguments.length; r++)
              t[r] = arguments[r];
            return Xs("error", this._namespace, t);
          }),
          (e.prototype.info = function () {
            for (var t = [], r = 0; r < arguments.length; r++)
              t[r] = arguments[r];
            return Xs("info", this._namespace, t);
          }),
          (e.prototype.warn = function () {
            for (var t = [], r = 0; r < arguments.length; r++)
              t[r] = arguments[r];
            return Xs("warn", this._namespace, t);
          }),
          (e.prototype.verbose = function () {
            for (var t = [], r = 0; r < arguments.length; r++)
              t[r] = arguments[r];
            return Xs("verbose", this._namespace, t);
          }),
          e
        );
      })();
    Yo.DiagComponentLogger = qR;
    function Xs(e, t, r) {
      var n = FR.getGlobal("diag");
      if (!!n) return r.unshift(t), n[e].apply(n, r);
    }
  });
  var Ho = f((Zs) => {
    "use strict";
    Object.defineProperty(Zs, "__esModule", { value: !0 });
    Zs.DiagLogLevel = void 0;
    var MR;
    (function (e) {
      (e[(e.NONE = 0)] = "NONE"),
        (e[(e.ERROR = 30)] = "ERROR"),
        (e[(e.WARN = 50)] = "WARN"),
        (e[(e.INFO = 60)] = "INFO"),
        (e[(e.DEBUG = 70)] = "DEBUG"),
        (e[(e.VERBOSE = 80)] = "VERBOSE"),
        (e[(e.ALL = 9999)] = "ALL");
    })((MR = Zs.DiagLogLevel || (Zs.DiagLogLevel = {})));
  });
  var xb = f((Jo) => {
    "use strict";
    Object.defineProperty(Jo, "__esModule", { value: !0 });
    Jo.createLogLevelDiagLogger = void 0;
    var Vr = Ho();
    function xR(e, t) {
      e < Vr.DiagLogLevel.NONE
        ? (e = Vr.DiagLogLevel.NONE)
        : e > Vr.DiagLogLevel.ALL && (e = Vr.DiagLogLevel.ALL),
        (t = t || {});
      function r(n, i) {
        var s = t[n];
        return typeof s == "function" && e >= i ? s.bind(t) : function () {};
      }
      return {
        error: r("error", Vr.DiagLogLevel.ERROR),
        warn: r("warn", Vr.DiagLogLevel.WARN),
        info: r("info", Vr.DiagLogLevel.INFO),
        debug: r("debug", Vr.DiagLogLevel.DEBUG),
        verbose: r("verbose", Vr.DiagLogLevel.VERBOSE),
      };
    }
    Jo.createLogLevelDiagLogger = xR;
  });
  var Ei = f((Zo) => {
    "use strict";
    Object.defineProperty(Zo, "__esModule", { value: !0 });
    Zo.DiagAPI = void 0;
    var CR = Mb(),
      kR = xb(),
      GR = Ho(),
      Xo = Ai(),
      QR = "diag",
      UR = (function () {
        function e() {
          function t(n) {
            return function () {
              for (var i = [], s = 0; s < arguments.length; s++)
                i[s] = arguments[s];
              var a = Xo.getGlobal("diag");
              if (!!a) return a[n].apply(a, i);
            };
          }
          var r = this;
          (r.setLogger = function (n, i) {
            var s, a;
            if ((i === void 0 && (i = GR.DiagLogLevel.INFO), n === r)) {
              var o = new Error(
                "Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation"
              );
              return (
                r.error((s = o.stack) !== null && s !== void 0 ? s : o.message),
                !1
              );
            }
            var u = Xo.getGlobal("diag"),
              l = kR.createLogLevelDiagLogger(i, n);
            if (u) {
              var c =
                (a = new Error().stack) !== null && a !== void 0
                  ? a
                  : "<failed to generate stacktrace>";
              u.warn("Current logger will be overwritten from " + c),
                l.warn(
                  "Current logger will overwrite one already registered from " +
                    c
                );
            }
            return Xo.registerGlobal("diag", l, r, !0);
          }),
            (r.disable = function () {
              Xo.unregisterGlobal(QR, r);
            }),
            (r.createComponentLogger = function (n) {
              return new CR.DiagComponentLogger(n);
            }),
            (r.verbose = t("verbose")),
            (r.debug = t("debug")),
            (r.info = t("info")),
            (r.warn = t("warn")),
            (r.error = t("error"));
        }
        return (
          (e.instance = function () {
            return this._instance || (this._instance = new e()), this._instance;
          }),
          e
        );
      })();
    Zo.DiagAPI = UR;
  });
  var Cb = f((eu) => {
    "use strict";
    Object.defineProperty(eu, "__esModule", { value: !0 });
    eu.BaggageImpl = void 0;
    var VR = (function () {
      function e(t) {
        this._entries = t ? new Map(t) : new Map();
      }
      return (
        (e.prototype.getEntry = function (t) {
          var r = this._entries.get(t);
          if (!!r) return Object.assign({}, r);
        }),
        (e.prototype.getAllEntries = function () {
          return Array.from(this._entries.entries()).map(function (t) {
            var r = t[0],
              n = t[1];
            return [r, n];
          });
        }),
        (e.prototype.setEntry = function (t, r) {
          var n = new e(this._entries);
          return n._entries.set(t, r), n;
        }),
        (e.prototype.removeEntry = function (t) {
          var r = new e(this._entries);
          return r._entries.delete(t), r;
        }),
        (e.prototype.removeEntries = function () {
          for (var t = [], r = 0; r < arguments.length; r++)
            t[r] = arguments[r];
          for (var n = new e(this._entries), i = 0, s = t; i < s.length; i++) {
            var a = s[i];
            n._entries.delete(a);
          }
          return n;
        }),
        (e.prototype.clear = function () {
          return new e();
        }),
        e
      );
    })();
    eu.BaggageImpl = VR;
  });
  var kb = f((tu) => {
    "use strict";
    Object.defineProperty(tu, "__esModule", { value: !0 });
    tu.baggageEntryMetadataSymbol = void 0;
    tu.baggageEntryMetadataSymbol = Symbol("BaggageEntryMetadata");
  });
  var Zd = f((Ni) => {
    "use strict";
    Object.defineProperty(Ni, "__esModule", { value: !0 });
    Ni.baggageEntryMetadataFromString = Ni.createBaggage = void 0;
    var KR = Ei(),
      $R = Cb(),
      BR = kb(),
      zR = KR.DiagAPI.instance();
    function WR(e) {
      return (
        e === void 0 && (e = {}), new $R.BaggageImpl(new Map(Object.entries(e)))
      );
    }
    Ni.createBaggage = WR;
    function YR(e) {
      return (
        typeof e != "string" &&
          (zR.error(
            "Cannot create baggage metadata from unknown type: " + typeof e
          ),
          (e = "")),
        {
          __TYPE__: BR.baggageEntryMetadataSymbol,
          toString: function () {
            return e;
          },
        }
      );
    }
    Ni.baggageEntryMetadataFromString = YR;
  });
  var Qb = f((Gb) => {
    "use strict";
    Object.defineProperty(Gb, "__esModule", { value: !0 });
  });
  var Vb = f((Ub) => {
    "use strict";
    Object.defineProperty(Ub, "__esModule", { value: !0 });
  });
  var Kb = f((ru) => {
    "use strict";
    Object.defineProperty(ru, "__esModule", { value: !0 });
    ru.DiagConsoleLogger = void 0;
    var ef = [
        { n: "error", c: "error" },
        { n: "warn", c: "warn" },
        { n: "info", c: "info" },
        { n: "debug", c: "debug" },
        { n: "verbose", c: "trace" },
      ],
      HR = (function () {
        function e() {
          function t(n) {
            return function () {
              for (var i = [], s = 0; s < arguments.length; s++)
                i[s] = arguments[s];
              if (console) {
                var a = console[n];
                if (
                  (typeof a != "function" && (a = console.log),
                  typeof a == "function")
                )
                  return a.apply(console, i);
              }
            };
          }
          for (var r = 0; r < ef.length; r++) this[ef[r].n] = t(ef[r].c);
        }
        return e;
      })();
    ru.DiagConsoleLogger = HR;
  });
  var Bb = f((on) => {
    "use strict";
    var JR =
        (on && on.__createBinding) ||
        (Object.create
          ? function (e, t, r, n) {
              n === void 0 && (n = r),
                Object.defineProperty(e, n, {
                  enumerable: !0,
                  get: function () {
                    return t[r];
                  },
                });
            }
          : function (e, t, r, n) {
              n === void 0 && (n = r), (e[n] = t[r]);
            }),
      $b =
        (on && on.__exportStar) ||
        function (e, t) {
          for (var r in e)
            r !== "default" &&
              !Object.prototype.hasOwnProperty.call(t, r) &&
              JR(t, e, r);
        };
    Object.defineProperty(on, "__esModule", { value: !0 });
    $b(Kb(), on);
    $b(Ho(), on);
  });
  var tf = f((Ii) => {
    "use strict";
    Object.defineProperty(Ii, "__esModule", { value: !0 });
    Ii.defaultTextMapSetter = Ii.defaultTextMapGetter = void 0;
    Ii.defaultTextMapGetter = {
      get: function (e, t) {
        if (e != null) return e[t];
      },
      keys: function (e) {
        return e == null ? [] : Object.keys(e);
      },
    };
    Ii.defaultTextMapSetter = {
      set: function (e, t, r) {
        e != null && (e[t] = r);
      },
    };
  });
  var Wb = f((zb) => {
    "use strict";
    Object.defineProperty(zb, "__esModule", { value: !0 });
  });
  var Hb = f((Yb) => {
    "use strict";
    Object.defineProperty(Yb, "__esModule", { value: !0 });
  });
  var ea = f((ji) => {
    "use strict";
    Object.defineProperty(ji, "__esModule", { value: !0 });
    ji.ROOT_CONTEXT = ji.createContextKey = void 0;
    function XR(e) {
      return Symbol.for(e);
    }
    ji.createContextKey = XR;
    var ZR = (function () {
      function e(t) {
        var r = this;
        (r._currentContext = t ? new Map(t) : new Map()),
          (r.getValue = function (n) {
            return r._currentContext.get(n);
          }),
          (r.setValue = function (n, i) {
            var s = new e(r._currentContext);
            return s._currentContext.set(n, i), s;
          }),
          (r.deleteValue = function (n) {
            var i = new e(r._currentContext);
            return i._currentContext.delete(n), i;
          });
      }
      return e;
    })();
    ji.ROOT_CONTEXT = new ZR();
  });
  var Jb = f((Pi) => {
    "use strict";
    var eL =
      (Pi && Pi.__spreadArray) ||
      function (e, t) {
        for (var r = 0, n = t.length, i = e.length; r < n; r++, i++)
          e[i] = t[r];
        return e;
      };
    Object.defineProperty(Pi, "__esModule", { value: !0 });
    Pi.NoopContextManager = void 0;
    var tL = ea(),
      rL = (function () {
        function e() {}
        return (
          (e.prototype.active = function () {
            return tL.ROOT_CONTEXT;
          }),
          (e.prototype.with = function (t, r, n) {
            for (var i = [], s = 3; s < arguments.length; s++)
              i[s - 3] = arguments[s];
            return r.call.apply(r, eL([n], i));
          }),
          (e.prototype.bind = function (t, r) {
            return r;
          }),
          (e.prototype.enable = function () {
            return this;
          }),
          (e.prototype.disable = function () {
            return this;
          }),
          e
        );
      })();
    Pi.NoopContextManager = rL;
  });
  var sf = f((wi) => {
    "use strict";
    var nL =
      (wi && wi.__spreadArray) ||
      function (e, t) {
        for (var r = 0, n = t.length, i = e.length; r < n; r++, i++)
          e[i] = t[r];
        return e;
      };
    Object.defineProperty(wi, "__esModule", { value: !0 });
    wi.ContextAPI = void 0;
    var iL = Jb(),
      rf = Ai(),
      Xb = Ei(),
      nf = "context",
      sL = new iL.NoopContextManager(),
      aL = (function () {
        function e() {}
        return (
          (e.getInstance = function () {
            return this._instance || (this._instance = new e()), this._instance;
          }),
          (e.prototype.setGlobalContextManager = function (t) {
            return rf.registerGlobal(nf, t, Xb.DiagAPI.instance());
          }),
          (e.prototype.active = function () {
            return this._getContextManager().active();
          }),
          (e.prototype.with = function (t, r, n) {
            for (var i, s = [], a = 3; a < arguments.length; a++)
              s[a - 3] = arguments[a];
            return (i = this._getContextManager()).with.apply(
              i,
              nL([t, r, n], s)
            );
          }),
          (e.prototype.bind = function (t, r) {
            return this._getContextManager().bind(t, r);
          }),
          (e.prototype._getContextManager = function () {
            return rf.getGlobal(nf) || sL;
          }),
          (e.prototype.disable = function () {
            this._getContextManager().disable(),
              rf.unregisterGlobal(nf, Xb.DiagAPI.instance());
          }),
          e
        );
      })();
    wi.ContextAPI = aL;
  });
  var af = f((ta) => {
    "use strict";
    Object.defineProperty(ta, "__esModule", { value: !0 });
    ta.TraceFlags = void 0;
    var oL;
    (function (e) {
      (e[(e.NONE = 0)] = "NONE"), (e[(e.SAMPLED = 1)] = "SAMPLED");
    })((oL = ta.TraceFlags || (ta.TraceFlags = {})));
  });
  var nu = f((Pr) => {
    "use strict";
    Object.defineProperty(Pr, "__esModule", { value: !0 });
    Pr.INVALID_SPAN_CONTEXT = Pr.INVALID_TRACEID = Pr.INVALID_SPANID = void 0;
    var uL = af();
    Pr.INVALID_SPANID = "0000000000000000";
    Pr.INVALID_TRACEID = "00000000000000000000000000000000";
    Pr.INVALID_SPAN_CONTEXT = {
      traceId: Pr.INVALID_TRACEID,
      spanId: Pr.INVALID_SPANID,
      traceFlags: uL.TraceFlags.NONE,
    };
  });
  var su = f((iu) => {
    "use strict";
    Object.defineProperty(iu, "__esModule", { value: !0 });
    iu.NonRecordingSpan = void 0;
    var lL = nu(),
      cL = (function () {
        function e(t) {
          t === void 0 && (t = lL.INVALID_SPAN_CONTEXT),
            (this._spanContext = t);
        }
        return (
          (e.prototype.spanContext = function () {
            return this._spanContext;
          }),
          (e.prototype.setAttribute = function (t, r) {
            return this;
          }),
          (e.prototype.setAttributes = function (t) {
            return this;
          }),
          (e.prototype.addEvent = function (t, r) {
            return this;
          }),
          (e.prototype.setStatus = function (t) {
            return this;
          }),
          (e.prototype.updateName = function (t) {
            return this;
          }),
          (e.prototype.end = function (t) {}),
          (e.prototype.isRecording = function () {
            return !1;
          }),
          (e.prototype.recordException = function (t, r) {}),
          e
        );
      })();
    iu.NonRecordingSpan = cL;
  });
  var uf = f((er) => {
    "use strict";
    Object.defineProperty(er, "__esModule", { value: !0 });
    er.getSpanContext =
      er.setSpanContext =
      er.deleteSpan =
      er.setSpan =
      er.getSpan =
        void 0;
    var pL = ea(),
      dL = su(),
      of = pL.createContextKey("OpenTelemetry Context Key SPAN");
    function Zb(e) {
      return e.getValue(of) || void 0;
    }
    er.getSpan = Zb;
    function eO(e, t) {
      return e.setValue(of, t);
    }
    er.setSpan = eO;
    function fL(e) {
      return e.deleteValue(of);
    }
    er.deleteSpan = fL;
    function yL(e, t) {
      return eO(e, new dL.NonRecordingSpan(t));
    }
    er.setSpanContext = yL;
    function hL(e) {
      var t;
      return (t = Zb(e)) === null || t === void 0 ? void 0 : t.spanContext();
    }
    er.getSpanContext = hL;
  });
  var au = f((wr) => {
    "use strict";
    Object.defineProperty(wr, "__esModule", { value: !0 });
    wr.wrapSpanContext =
      wr.isSpanContextValid =
      wr.isValidSpanId =
      wr.isValidTraceId =
        void 0;
    var tO = nu(),
      mL = su(),
      gL = /^([0-9a-f]{32})$/i,
      vL = /^[0-9a-f]{16}$/i;
    function rO(e) {
      return gL.test(e) && e !== tO.INVALID_TRACEID;
    }
    wr.isValidTraceId = rO;
    function nO(e) {
      return vL.test(e) && e !== tO.INVALID_SPANID;
    }
    wr.isValidSpanId = nO;
    function bL(e) {
      return rO(e.traceId) && nO(e.spanId);
    }
    wr.isSpanContextValid = bL;
    function OL(e) {
      return new mL.NonRecordingSpan(e);
    }
    wr.wrapSpanContext = OL;
  });
  var cf = f((ou) => {
    "use strict";
    Object.defineProperty(ou, "__esModule", { value: !0 });
    ou.NoopTracer = void 0;
    var SL = sf(),
      iO = uf(),
      lf = su(),
      TL = au(),
      sO = SL.ContextAPI.getInstance(),
      _L = (function () {
        function e() {}
        return (
          (e.prototype.startSpan = function (t, r, n) {
            var i = Boolean(r == null ? void 0 : r.root);
            if (i) return new lf.NonRecordingSpan();
            var s = n && iO.getSpanContext(n);
            return AL(s) && TL.isSpanContextValid(s)
              ? new lf.NonRecordingSpan(s)
              : new lf.NonRecordingSpan();
          }),
          (e.prototype.startActiveSpan = function (t, r, n, i) {
            var s, a, o;
            if (!(arguments.length < 2)) {
              arguments.length === 2
                ? (o = r)
                : arguments.length === 3
                ? ((s = r), (o = n))
                : ((s = r), (a = n), (o = i));
              var u = a != null ? a : sO.active(),
                l = this.startSpan(t, s, u),
                c = iO.setSpan(u, l);
              return sO.with(c, o, void 0, l);
            }
          }),
          e
        );
      })();
    ou.NoopTracer = _L;
    function AL(e) {
      return (
        typeof e == "object" &&
        typeof e.spanId == "string" &&
        typeof e.traceId == "string" &&
        typeof e.traceFlags == "number"
      );
    }
  });
  var pf = f((uu) => {
    "use strict";
    Object.defineProperty(uu, "__esModule", { value: !0 });
    uu.ProxyTracer = void 0;
    var EL = cf(),
      NL = new EL.NoopTracer(),
      IL = (function () {
        function e(t, r, n) {
          (this._provider = t), (this.name = r), (this.version = n);
        }
        return (
          (e.prototype.startSpan = function (t, r, n) {
            return this._getTracer().startSpan(t, r, n);
          }),
          (e.prototype.startActiveSpan = function (t, r, n, i) {
            var s = this._getTracer();
            return Reflect.apply(s.startActiveSpan, s, arguments);
          }),
          (e.prototype._getTracer = function () {
            if (this._delegate) return this._delegate;
            var t = this._provider.getDelegateTracer(this.name, this.version);
            return t ? ((this._delegate = t), this._delegate) : NL;
          }),
          e
        );
      })();
    uu.ProxyTracer = IL;
  });
  var aO = f((lu) => {
    "use strict";
    Object.defineProperty(lu, "__esModule", { value: !0 });
    lu.NoopTracerProvider = void 0;
    var jL = cf(),
      PL = (function () {
        function e() {}
        return (
          (e.prototype.getTracer = function (t, r) {
            return new jL.NoopTracer();
          }),
          e
        );
      })();
    lu.NoopTracerProvider = PL;
  });
  var df = f((cu) => {
    "use strict";
    Object.defineProperty(cu, "__esModule", { value: !0 });
    cu.ProxyTracerProvider = void 0;
    var wL = pf(),
      DL = aO(),
      RL = new DL.NoopTracerProvider(),
      LL = (function () {
        function e() {}
        return (
          (e.prototype.getTracer = function (t, r) {
            var n;
            return (n = this.getDelegateTracer(t, r)) !== null && n !== void 0
              ? n
              : new wL.ProxyTracer(this, t, r);
          }),
          (e.prototype.getDelegate = function () {
            var t;
            return (t = this._delegate) !== null && t !== void 0 ? t : RL;
          }),
          (e.prototype.setDelegate = function (t) {
            this._delegate = t;
          }),
          (e.prototype.getDelegateTracer = function (t, r) {
            var n;
            return (n = this._delegate) === null || n === void 0
              ? void 0
              : n.getTracer(t, r);
          }),
          e
        );
      })();
    cu.ProxyTracerProvider = LL;
  });
  var uO = f((oO) => {
    "use strict";
    Object.defineProperty(oO, "__esModule", { value: !0 });
  });
  var lO = f((ra) => {
    "use strict";
    Object.defineProperty(ra, "__esModule", { value: !0 });
    ra.SamplingDecision = void 0;
    var FL;
    (function (e) {
      (e[(e.NOT_RECORD = 0)] = "NOT_RECORD"),
        (e[(e.RECORD = 1)] = "RECORD"),
        (e[(e.RECORD_AND_SAMPLED = 2)] = "RECORD_AND_SAMPLED");
    })((FL = ra.SamplingDecision || (ra.SamplingDecision = {})));
  });
  var pO = f((cO) => {
    "use strict";
    Object.defineProperty(cO, "__esModule", { value: !0 });
  });
  var dO = f((na) => {
    "use strict";
    Object.defineProperty(na, "__esModule", { value: !0 });
    na.SpanKind = void 0;
    var qL;
    (function (e) {
      (e[(e.INTERNAL = 0)] = "INTERNAL"),
        (e[(e.SERVER = 1)] = "SERVER"),
        (e[(e.CLIENT = 2)] = "CLIENT"),
        (e[(e.PRODUCER = 3)] = "PRODUCER"),
        (e[(e.CONSUMER = 4)] = "CONSUMER");
    })((qL = na.SpanKind || (na.SpanKind = {})));
  });
  var yO = f((fO) => {
    "use strict";
    Object.defineProperty(fO, "__esModule", { value: !0 });
  });
  var mO = f((hO) => {
    "use strict";
    Object.defineProperty(hO, "__esModule", { value: !0 });
  });
  var gO = f((ia) => {
    "use strict";
    Object.defineProperty(ia, "__esModule", { value: !0 });
    ia.SpanStatusCode = void 0;
    var ML;
    (function (e) {
      (e[(e.UNSET = 0)] = "UNSET"),
        (e[(e.OK = 1)] = "OK"),
        (e[(e.ERROR = 2)] = "ERROR");
    })((ML = ia.SpanStatusCode || (ia.SpanStatusCode = {})));
  });
  var bO = f((vO) => {
    "use strict";
    Object.defineProperty(vO, "__esModule", { value: !0 });
  });
  var SO = f((OO) => {
    "use strict";
    Object.defineProperty(OO, "__esModule", { value: !0 });
  });
  var _O = f((TO) => {
    "use strict";
    Object.defineProperty(TO, "__esModule", { value: !0 });
  });
  var EO = f((AO) => {
    "use strict";
    Object.defineProperty(AO, "__esModule", { value: !0 });
  });
  var PO = f((pu) => {
    "use strict";
    Object.defineProperty(pu, "__esModule", { value: !0 });
    pu.TraceAPI = void 0;
    var ff = Ai(),
      NO = df(),
      IO = au(),
      sa = uf(),
      jO = Ei(),
      yf = "trace",
      xL = (function () {
        function e() {
          (this._proxyTracerProvider = new NO.ProxyTracerProvider()),
            (this.wrapSpanContext = IO.wrapSpanContext),
            (this.isSpanContextValid = IO.isSpanContextValid),
            (this.deleteSpan = sa.deleteSpan),
            (this.getSpan = sa.getSpan),
            (this.getSpanContext = sa.getSpanContext),
            (this.setSpan = sa.setSpan),
            (this.setSpanContext = sa.setSpanContext);
        }
        return (
          (e.getInstance = function () {
            return this._instance || (this._instance = new e()), this._instance;
          }),
          (e.prototype.setGlobalTracerProvider = function (t) {
            var r = ff.registerGlobal(
              yf,
              this._proxyTracerProvider,
              jO.DiagAPI.instance()
            );
            return r && this._proxyTracerProvider.setDelegate(t), r;
          }),
          (e.prototype.getTracerProvider = function () {
            return ff.getGlobal(yf) || this._proxyTracerProvider;
          }),
          (e.prototype.getTracer = function (t, r) {
            return this.getTracerProvider().getTracer(t, r);
          }),
          (e.prototype.disable = function () {
            ff.unregisterGlobal(yf, jO.DiagAPI.instance()),
              (this._proxyTracerProvider = new NO.ProxyTracerProvider());
          }),
          e
        );
      })();
    pu.TraceAPI = xL;
  });
  var wO = f((du) => {
    "use strict";
    Object.defineProperty(du, "__esModule", { value: !0 });
    du.NoopTextMapPropagator = void 0;
    var CL = (function () {
      function e() {}
      return (
        (e.prototype.inject = function (t, r) {}),
        (e.prototype.extract = function (t, r) {
          return t;
        }),
        (e.prototype.fields = function () {
          return [];
        }),
        e
      );
    })();
    du.NoopTextMapPropagator = CL;
  });
  var DO = f((un) => {
    "use strict";
    Object.defineProperty(un, "__esModule", { value: !0 });
    un.deleteBaggage = un.setBaggage = un.getBaggage = void 0;
    var kL = ea(),
      hf = kL.createContextKey("OpenTelemetry Baggage Key");
    function GL(e) {
      return e.getValue(hf) || void 0;
    }
    un.getBaggage = GL;
    function QL(e, t) {
      return e.setValue(hf, t);
    }
    un.setBaggage = QL;
    function UL(e) {
      return e.deleteValue(hf);
    }
    un.deleteBaggage = UL;
  });
  var FO = f((fu) => {
    "use strict";
    Object.defineProperty(fu, "__esModule", { value: !0 });
    fu.PropagationAPI = void 0;
    var mf = Ai(),
      VL = wO(),
      RO = tf(),
      gf = DO(),
      KL = Zd(),
      LO = Ei(),
      vf = "propagation",
      $L = new VL.NoopTextMapPropagator(),
      BL = (function () {
        function e() {
          (this.createBaggage = KL.createBaggage),
            (this.getBaggage = gf.getBaggage),
            (this.setBaggage = gf.setBaggage),
            (this.deleteBaggage = gf.deleteBaggage);
        }
        return (
          (e.getInstance = function () {
            return this._instance || (this._instance = new e()), this._instance;
          }),
          (e.prototype.setGlobalPropagator = function (t) {
            return mf.registerGlobal(vf, t, LO.DiagAPI.instance());
          }),
          (e.prototype.inject = function (t, r, n) {
            return (
              n === void 0 && (n = RO.defaultTextMapSetter),
              this._getGlobalPropagator().inject(t, r, n)
            );
          }),
          (e.prototype.extract = function (t, r, n) {
            return (
              n === void 0 && (n = RO.defaultTextMapGetter),
              this._getGlobalPropagator().extract(t, r, n)
            );
          }),
          (e.prototype.fields = function () {
            return this._getGlobalPropagator().fields();
          }),
          (e.prototype.disable = function () {
            mf.unregisterGlobal(vf, LO.DiagAPI.instance());
          }),
          (e.prototype._getGlobalPropagator = function () {
            return mf.getGlobal(vf) || $L;
          }),
          e
        );
      })();
    fu.PropagationAPI = BL;
  });
  var qO = f((K) => {
    "use strict";
    var zL =
        (K && K.__createBinding) ||
        (Object.create
          ? function (e, t, r, n) {
              n === void 0 && (n = r),
                Object.defineProperty(e, n, {
                  enumerable: !0,
                  get: function () {
                    return t[r];
                  },
                });
            }
          : function (e, t, r, n) {
              n === void 0 && (n = r), (e[n] = t[r]);
            }),
      Ce =
        (K && K.__exportStar) ||
        function (e, t) {
          for (var r in e)
            r !== "default" &&
              !Object.prototype.hasOwnProperty.call(t, r) &&
              zL(t, e, r);
        };
    Object.defineProperty(K, "__esModule", { value: !0 });
    K.diag =
      K.propagation =
      K.trace =
      K.context =
      K.INVALID_SPAN_CONTEXT =
      K.INVALID_TRACEID =
      K.INVALID_SPANID =
      K.isValidSpanId =
      K.isValidTraceId =
      K.isSpanContextValid =
      K.baggageEntryMetadataFromString =
        void 0;
    Ce(wb(), K);
    var WL = Zd();
    Object.defineProperty(K, "baggageEntryMetadataFromString", {
      enumerable: !0,
      get: function () {
        return WL.baggageEntryMetadataFromString;
      },
    });
    Ce(Qb(), K);
    Ce(Vb(), K);
    Ce(Bb(), K);
    Ce(tf(), K);
    Ce(Wb(), K);
    Ce(Hb(), K);
    Ce(pf(), K);
    Ce(df(), K);
    Ce(uO(), K);
    Ce(lO(), K);
    Ce(pO(), K);
    Ce(dO(), K);
    Ce(yO(), K);
    Ce(mO(), K);
    Ce(gO(), K);
    Ce(af(), K);
    Ce(bO(), K);
    Ce(SO(), K);
    Ce(_O(), K);
    var bf = au();
    Object.defineProperty(K, "isSpanContextValid", {
      enumerable: !0,
      get: function () {
        return bf.isSpanContextValid;
      },
    });
    Object.defineProperty(K, "isValidTraceId", {
      enumerable: !0,
      get: function () {
        return bf.isValidTraceId;
      },
    });
    Object.defineProperty(K, "isValidSpanId", {
      enumerable: !0,
      get: function () {
        return bf.isValidSpanId;
      },
    });
    var Of = nu();
    Object.defineProperty(K, "INVALID_SPANID", {
      enumerable: !0,
      get: function () {
        return Of.INVALID_SPANID;
      },
    });
    Object.defineProperty(K, "INVALID_TRACEID", {
      enumerable: !0,
      get: function () {
        return Of.INVALID_TRACEID;
      },
    });
    Object.defineProperty(K, "INVALID_SPAN_CONTEXT", {
      enumerable: !0,
      get: function () {
        return Of.INVALID_SPAN_CONTEXT;
      },
    });
    Ce(ea(), K);
    Ce(EO(), K);
    var YL = sf();
    K.context = YL.ContextAPI.getInstance();
    var HL = PO();
    K.trace = HL.TraceAPI.getInstance();
    var JL = FO();
    K.propagation = JL.PropagationAPI.getInstance();
    var XL = Ei();
    K.diag = XL.DiagAPI.instance();
    K.default = {
      trace: K.trace,
      context: K.context,
      propagation: K.propagation,
      diag: K.diag,
    };
  });
  var _S = f((ua, Fi) => {
    var ZL = 200,
      MO = "__lodash_hash_undefined__",
      xO = 9007199254740991,
      Sf = "[object Arguments]",
      eF = "[object Array]",
      CO = "[object Boolean]",
      kO = "[object Date]",
      tF = "[object Error]",
      Tf = "[object Function]",
      GO = "[object GeneratorFunction]",
      yu = "[object Map]",
      QO = "[object Number]",
      _f = "[object Object]",
      UO = "[object Promise]",
      VO = "[object RegExp]",
      hu = "[object Set]",
      KO = "[object String]",
      $O = "[object Symbol]",
      Af = "[object WeakMap]",
      BO = "[object ArrayBuffer]",
      mu = "[object DataView]",
      zO = "[object Float32Array]",
      WO = "[object Float64Array]",
      YO = "[object Int8Array]",
      HO = "[object Int16Array]",
      JO = "[object Int32Array]",
      XO = "[object Uint8Array]",
      ZO = "[object Uint8ClampedArray]",
      eS = "[object Uint16Array]",
      tS = "[object Uint32Array]",
      rF = /[\\^$.*+?()[\]{}|]/g,
      nF = /\w*$/,
      iF = /^\[object .+?Constructor\]$/,
      sF = /^(?:0|[1-9]\d*)$/,
      _e = {};
    _e[Sf] =
      _e[eF] =
      _e[BO] =
      _e[mu] =
      _e[CO] =
      _e[kO] =
      _e[zO] =
      _e[WO] =
      _e[YO] =
      _e[HO] =
      _e[JO] =
      _e[yu] =
      _e[QO] =
      _e[_f] =
      _e[VO] =
      _e[hu] =
      _e[KO] =
      _e[$O] =
      _e[XO] =
      _e[ZO] =
      _e[eS] =
      _e[tS] =
        !0;
    _e[tF] = _e[Tf] = _e[Af] = !1;
    var aF =
        typeof global == "object" &&
        global &&
        global.Object === Object &&
        global,
      oF = typeof self == "object" && self && self.Object === Object && self,
      Kr = aF || oF || Function("return this")(),
      rS = typeof ua == "object" && ua && !ua.nodeType && ua,
      nS = rS && typeof Fi == "object" && Fi && !Fi.nodeType && Fi,
      uF = nS && nS.exports === rS;
    function lF(e, t) {
      return e.set(t[0], t[1]), e;
    }
    function cF(e, t) {
      return e.add(t), e;
    }
    function pF(e, t) {
      for (var r = -1, n = e ? e.length : 0; ++r < n && t(e[r], r, e) !== !1; );
      return e;
    }
    function dF(e, t) {
      for (var r = -1, n = t.length, i = e.length; ++r < n; ) e[i + r] = t[r];
      return e;
    }
    function iS(e, t, r, n) {
      var i = -1,
        s = e ? e.length : 0;
      for (n && s && (r = e[++i]); ++i < s; ) r = t(r, e[i], i, e);
      return r;
    }
    function fF(e, t) {
      for (var r = -1, n = Array(e); ++r < e; ) n[r] = t(r);
      return n;
    }
    function yF(e, t) {
      return e == null ? void 0 : e[t];
    }
    function sS(e) {
      var t = !1;
      if (e != null && typeof e.toString != "function")
        try {
          t = !!(e + "");
        } catch (r) {}
      return t;
    }
    function aS(e) {
      var t = -1,
        r = Array(e.size);
      return (
        e.forEach(function (n, i) {
          r[++t] = [i, n];
        }),
        r
      );
    }
    function Ef(e, t) {
      return function (r) {
        return e(t(r));
      };
    }
    function oS(e) {
      var t = -1,
        r = Array(e.size);
      return (
        e.forEach(function (n) {
          r[++t] = n;
        }),
        r
      );
    }
    var hF = Array.prototype,
      mF = Function.prototype,
      gu = Object.prototype,
      Nf = Kr["__core-js_shared__"],
      uS = (function () {
        var e = /[^.]+$/.exec((Nf && Nf.keys && Nf.keys.IE_PROTO) || "");
        return e ? "Symbol(src)_1." + e : "";
      })(),
      lS = mF.toString,
      ln = gu.hasOwnProperty,
      vu = gu.toString,
      gF = RegExp(
        "^" +
          lS
            .call(ln)
            .replace(rF, "\\$&")
            .replace(
              /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
              "$1.*?"
            ) +
          "$"
      ),
      cS = uF ? Kr.Buffer : void 0,
      pS = Kr.Symbol,
      dS = Kr.Uint8Array,
      vF = Ef(Object.getPrototypeOf, Object),
      bF = Object.create,
      OF = gu.propertyIsEnumerable,
      SF = hF.splice,
      fS = Object.getOwnPropertySymbols,
      TF = cS ? cS.isBuffer : void 0,
      _F = Ef(Object.keys, Object),
      If = Li(Kr, "DataView"),
      aa = Li(Kr, "Map"),
      jf = Li(Kr, "Promise"),
      Pf = Li(Kr, "Set"),
      wf = Li(Kr, "WeakMap"),
      oa = Li(Object, "create"),
      AF = Vn(If),
      EF = Vn(aa),
      NF = Vn(jf),
      IF = Vn(Pf),
      jF = Vn(wf),
      yS = pS ? pS.prototype : void 0,
      hS = yS ? yS.valueOf : void 0;
    function Qn(e) {
      var t = -1,
        r = e ? e.length : 0;
      for (this.clear(); ++t < r; ) {
        var n = e[t];
        this.set(n[0], n[1]);
      }
    }
    function PF() {
      this.__data__ = oa ? oa(null) : {};
    }
    function wF(e) {
      return this.has(e) && delete this.__data__[e];
    }
    function DF(e) {
      var t = this.__data__;
      if (oa) {
        var r = t[e];
        return r === MO ? void 0 : r;
      }
      return ln.call(t, e) ? t[e] : void 0;
    }
    function RF(e) {
      var t = this.__data__;
      return oa ? t[e] !== void 0 : ln.call(t, e);
    }
    function LF(e, t) {
      var r = this.__data__;
      return (r[e] = oa && t === void 0 ? MO : t), this;
    }
    Qn.prototype.clear = PF;
    Qn.prototype.delete = wF;
    Qn.prototype.get = DF;
    Qn.prototype.has = RF;
    Qn.prototype.set = LF;
    function $r(e) {
      var t = -1,
        r = e ? e.length : 0;
      for (this.clear(); ++t < r; ) {
        var n = e[t];
        this.set(n[0], n[1]);
      }
    }
    function FF() {
      this.__data__ = [];
    }
    function qF(e) {
      var t = this.__data__,
        r = bu(t, e);
      if (r < 0) return !1;
      var n = t.length - 1;
      return r == n ? t.pop() : SF.call(t, r, 1), !0;
    }
    function MF(e) {
      var t = this.__data__,
        r = bu(t, e);
      return r < 0 ? void 0 : t[r][1];
    }
    function xF(e) {
      return bu(this.__data__, e) > -1;
    }
    function CF(e, t) {
      var r = this.__data__,
        n = bu(r, e);
      return n < 0 ? r.push([e, t]) : (r[n][1] = t), this;
    }
    $r.prototype.clear = FF;
    $r.prototype.delete = qF;
    $r.prototype.get = MF;
    $r.prototype.has = xF;
    $r.prototype.set = CF;
    function Di(e) {
      var t = -1,
        r = e ? e.length : 0;
      for (this.clear(); ++t < r; ) {
        var n = e[t];
        this.set(n[0], n[1]);
      }
    }
    function kF() {
      this.__data__ = {
        hash: new Qn(),
        map: new (aa || $r)(),
        string: new Qn(),
      };
    }
    function GF(e) {
      return Ou(this, e).delete(e);
    }
    function QF(e) {
      return Ou(this, e).get(e);
    }
    function UF(e) {
      return Ou(this, e).has(e);
    }
    function VF(e, t) {
      return Ou(this, e).set(e, t), this;
    }
    Di.prototype.clear = kF;
    Di.prototype.delete = GF;
    Di.prototype.get = QF;
    Di.prototype.has = UF;
    Di.prototype.set = VF;
    function Ri(e) {
      this.__data__ = new $r(e);
    }
    function KF() {
      this.__data__ = new $r();
    }
    function $F(e) {
      return this.__data__.delete(e);
    }
    function BF(e) {
      return this.__data__.get(e);
    }
    function zF(e) {
      return this.__data__.has(e);
    }
    function WF(e, t) {
      var r = this.__data__;
      if (r instanceof $r) {
        var n = r.__data__;
        if (!aa || n.length < ZL - 1) return n.push([e, t]), this;
        r = this.__data__ = new Di(n);
      }
      return r.set(e, t), this;
    }
    Ri.prototype.clear = KF;
    Ri.prototype.delete = $F;
    Ri.prototype.get = BF;
    Ri.prototype.has = zF;
    Ri.prototype.set = WF;
    function YF(e, t) {
      var r = Lf(e) || bq(e) ? fF(e.length, String) : [],
        n = r.length,
        i = !!n;
      for (var s in e)
        (t || ln.call(e, s)) &&
          !(i && (s == "length" || hq(s, n))) &&
          r.push(s);
      return r;
    }
    function mS(e, t, r) {
      var n = e[t];
      (!(ln.call(e, t) && OS(n, r)) || (r === void 0 && !(t in e))) &&
        (e[t] = r);
    }
    function bu(e, t) {
      for (var r = e.length; r--; ) if (OS(e[r][0], t)) return r;
      return -1;
    }
    function HF(e, t) {
      return e && gS(t, Ff(t), e);
    }
    function Df(e, t, r, n, i, s, a) {
      var o;
      if ((n && (o = s ? n(e, i, s, a) : n(e)), o !== void 0)) return o;
      if (!Su(e)) return e;
      var u = Lf(e);
      if (u) {
        if (((o = dq(e)), !t)) return lq(e, o);
      } else {
        var l = Un(e),
          c = l == Tf || l == GO;
        if (Sq(e)) return rq(e, t);
        if (l == _f || l == Sf || (c && !s)) {
          if (sS(e)) return s ? e : {};
          if (((o = fq(c ? {} : e)), !t)) return cq(e, HF(o, e));
        } else {
          if (!_e[l]) return s ? e : {};
          o = yq(e, l, Df, t);
        }
      }
      a || (a = new Ri());
      var d = a.get(e);
      if (d) return d;
      if ((a.set(e, o), !u)) var p = r ? pq(e) : Ff(e);
      return (
        pF(p || e, function (m, v) {
          p && ((v = m), (m = e[v])), mS(o, v, Df(m, t, r, n, v, e, a));
        }),
        o
      );
    }
    function JF(e) {
      return Su(e) ? bF(e) : {};
    }
    function XF(e, t, r) {
      var n = t(e);
      return Lf(e) ? n : dF(n, r(e));
    }
    function ZF(e) {
      return vu.call(e);
    }
    function eq(e) {
      if (!Su(e) || gq(e)) return !1;
      var t = TS(e) || sS(e) ? gF : iF;
      return t.test(Vn(e));
    }
    function tq(e) {
      if (!bS(e)) return _F(e);
      var t = [];
      for (var r in Object(e)) ln.call(e, r) && r != "constructor" && t.push(r);
      return t;
    }
    function rq(e, t) {
      if (t) return e.slice();
      var r = new e.constructor(e.length);
      return e.copy(r), r;
    }
    function Rf(e) {
      var t = new e.constructor(e.byteLength);
      return new dS(t).set(new dS(e)), t;
    }
    function nq(e, t) {
      var r = t ? Rf(e.buffer) : e.buffer;
      return new e.constructor(r, e.byteOffset, e.byteLength);
    }
    function iq(e, t, r) {
      var n = t ? r(aS(e), !0) : aS(e);
      return iS(n, lF, new e.constructor());
    }
    function sq(e) {
      var t = new e.constructor(e.source, nF.exec(e));
      return (t.lastIndex = e.lastIndex), t;
    }
    function aq(e, t, r) {
      var n = t ? r(oS(e), !0) : oS(e);
      return iS(n, cF, new e.constructor());
    }
    function oq(e) {
      return hS ? Object(hS.call(e)) : {};
    }
    function uq(e, t) {
      var r = t ? Rf(e.buffer) : e.buffer;
      return new e.constructor(r, e.byteOffset, e.length);
    }
    function lq(e, t) {
      var r = -1,
        n = e.length;
      for (t || (t = Array(n)); ++r < n; ) t[r] = e[r];
      return t;
    }
    function gS(e, t, r, n) {
      r || (r = {});
      for (var i = -1, s = t.length; ++i < s; ) {
        var a = t[i],
          o = n ? n(r[a], e[a], a, r, e) : void 0;
        mS(r, a, o === void 0 ? e[a] : o);
      }
      return r;
    }
    function cq(e, t) {
      return gS(e, vS(e), t);
    }
    function pq(e) {
      return XF(e, Ff, vS);
    }
    function Ou(e, t) {
      var r = e.__data__;
      return mq(t) ? r[typeof t == "string" ? "string" : "hash"] : r.map;
    }
    function Li(e, t) {
      var r = yF(e, t);
      return eq(r) ? r : void 0;
    }
    var vS = fS ? Ef(fS, Object) : Aq,
      Un = ZF;
    ((If && Un(new If(new ArrayBuffer(1))) != mu) ||
      (aa && Un(new aa()) != yu) ||
      (jf && Un(jf.resolve()) != UO) ||
      (Pf && Un(new Pf()) != hu) ||
      (wf && Un(new wf()) != Af)) &&
      (Un = function (e) {
        var t = vu.call(e),
          r = t == _f ? e.constructor : void 0,
          n = r ? Vn(r) : void 0;
        if (n)
          switch (n) {
            case AF:
              return mu;
            case EF:
              return yu;
            case NF:
              return UO;
            case IF:
              return hu;
            case jF:
              return Af;
          }
        return t;
      });
    function dq(e) {
      var t = e.length,
        r = e.constructor(t);
      return (
        t &&
          typeof e[0] == "string" &&
          ln.call(e, "index") &&
          ((r.index = e.index), (r.input = e.input)),
        r
      );
    }
    function fq(e) {
      return typeof e.constructor == "function" && !bS(e) ? JF(vF(e)) : {};
    }
    function yq(e, t, r, n) {
      var i = e.constructor;
      switch (t) {
        case BO:
          return Rf(e);
        case CO:
        case kO:
          return new i(+e);
        case mu:
          return nq(e, n);
        case zO:
        case WO:
        case YO:
        case HO:
        case JO:
        case XO:
        case ZO:
        case eS:
        case tS:
          return uq(e, n);
        case yu:
          return iq(e, n, r);
        case QO:
        case KO:
          return new i(e);
        case VO:
          return sq(e);
        case hu:
          return aq(e, n, r);
        case $O:
          return oq(e);
      }
    }
    function hq(e, t) {
      return (
        (t = t == null ? xO : t),
        !!t &&
          (typeof e == "number" || sF.test(e)) &&
          e > -1 &&
          e % 1 == 0 &&
          e < t
      );
    }
    function mq(e) {
      var t = typeof e;
      return t == "string" || t == "number" || t == "symbol" || t == "boolean"
        ? e !== "__proto__"
        : e === null;
    }
    function gq(e) {
      return !!uS && uS in e;
    }
    function bS(e) {
      var t = e && e.constructor,
        r = (typeof t == "function" && t.prototype) || gu;
      return e === r;
    }
    function Vn(e) {
      if (e != null) {
        try {
          return lS.call(e);
        } catch (t) {}
        try {
          return e + "";
        } catch (t) {}
      }
      return "";
    }
    function vq(e) {
      return Df(e, !0, !0);
    }
    function OS(e, t) {
      return e === t || (e !== e && t !== t);
    }
    function bq(e) {
      return (
        Oq(e) &&
        ln.call(e, "callee") &&
        (!OF.call(e, "callee") || vu.call(e) == Sf)
      );
    }
    var Lf = Array.isArray;
    function SS(e) {
      return e != null && Tq(e.length) && !TS(e);
    }
    function Oq(e) {
      return _q(e) && SS(e);
    }
    var Sq = TF || Eq;
    function TS(e) {
      var t = Su(e) ? vu.call(e) : "";
      return t == Tf || t == GO;
    }
    function Tq(e) {
      return typeof e == "number" && e > -1 && e % 1 == 0 && e <= xO;
    }
    function Su(e) {
      var t = typeof e;
      return !!e && (t == "object" || t == "function");
    }
    function _q(e) {
      return !!e && typeof e == "object";
    }
    function Ff(e) {
      return SS(e) ? YF(e) : tq(e);
    }
    function Aq() {
      return [];
    }
    function Eq() {
      return !1;
    }
    Fi.exports = vq;
  });
  var iT = f((fa, xi) => {
    var Nq = 200,
      qf = "__lodash_hash_undefined__",
      Tu = 1,
      AS = 2,
      ES = 9007199254740991,
      _u = "[object Arguments]",
      Mf = "[object Array]",
      Iq = "[object AsyncFunction]",
      NS = "[object Boolean]",
      IS = "[object Date]",
      jS = "[object Error]",
      PS = "[object Function]",
      jq = "[object GeneratorFunction]",
      Au = "[object Map]",
      wS = "[object Number]",
      Pq = "[object Null]",
      qi = "[object Object]",
      DS = "[object Promise]",
      wq = "[object Proxy]",
      RS = "[object RegExp]",
      Eu = "[object Set]",
      LS = "[object String]",
      Dq = "[object Symbol]",
      Rq = "[object Undefined]",
      xf = "[object WeakMap]",
      FS = "[object ArrayBuffer]",
      Nu = "[object DataView]",
      Lq = "[object Float32Array]",
      Fq = "[object Float64Array]",
      qq = "[object Int8Array]",
      Mq = "[object Int16Array]",
      xq = "[object Int32Array]",
      Cq = "[object Uint8Array]",
      kq = "[object Uint8ClampedArray]",
      Gq = "[object Uint16Array]",
      Qq = "[object Uint32Array]",
      Uq = /[\\^$.*+?()[\]{}|]/g,
      Vq = /^\[object .+?Constructor\]$/,
      Kq = /^(?:0|[1-9]\d*)$/,
      je = {};
    je[Lq] =
      je[Fq] =
      je[qq] =
      je[Mq] =
      je[xq] =
      je[Cq] =
      je[kq] =
      je[Gq] =
      je[Qq] =
        !0;
    je[_u] =
      je[Mf] =
      je[FS] =
      je[NS] =
      je[Nu] =
      je[IS] =
      je[jS] =
      je[PS] =
      je[Au] =
      je[wS] =
      je[qi] =
      je[RS] =
      je[Eu] =
      je[LS] =
      je[xf] =
        !1;
    var qS =
        typeof global == "object" &&
        global &&
        global.Object === Object &&
        global,
      $q = typeof self == "object" && self && self.Object === Object && self,
      Br = qS || $q || Function("return this")(),
      MS = typeof fa == "object" && fa && !fa.nodeType && fa,
      xS = MS && typeof xi == "object" && xi && !xi.nodeType && xi,
      CS = xS && xS.exports === MS,
      Cf = CS && qS.process,
      kS = (function () {
        try {
          return Cf && Cf.binding && Cf.binding("util");
        } catch (e) {}
      })(),
      GS = kS && kS.isTypedArray;
    function Bq(e, t) {
      for (var r = -1, n = e == null ? 0 : e.length, i = 0, s = []; ++r < n; ) {
        var a = e[r];
        t(a, r, e) && (s[i++] = a);
      }
      return s;
    }
    function zq(e, t) {
      for (var r = -1, n = t.length, i = e.length; ++r < n; ) e[i + r] = t[r];
      return e;
    }
    function Wq(e, t) {
      for (var r = -1, n = e == null ? 0 : e.length; ++r < n; )
        if (t(e[r], r, e)) return !0;
      return !1;
    }
    function Yq(e, t) {
      for (var r = -1, n = Array(e); ++r < e; ) n[r] = t(r);
      return n;
    }
    function Hq(e) {
      return function (t) {
        return e(t);
      };
    }
    function Jq(e, t) {
      return e.has(t);
    }
    function Xq(e, t) {
      return e == null ? void 0 : e[t];
    }
    function Zq(e) {
      var t = -1,
        r = Array(e.size);
      return (
        e.forEach(function (n, i) {
          r[++t] = [i, n];
        }),
        r
      );
    }
    function eM(e, t) {
      return function (r) {
        return e(t(r));
      };
    }
    function tM(e) {
      var t = -1,
        r = Array(e.size);
      return (
        e.forEach(function (n) {
          r[++t] = n;
        }),
        r
      );
    }
    var rM = Array.prototype,
      nM = Function.prototype,
      Iu = Object.prototype,
      kf = Br["__core-js_shared__"],
      QS = nM.toString,
      Dr = Iu.hasOwnProperty,
      US = (function () {
        var e = /[^.]+$/.exec((kf && kf.keys && kf.keys.IE_PROTO) || "");
        return e ? "Symbol(src)_1." + e : "";
      })(),
      VS = Iu.toString,
      iM = RegExp(
        "^" +
          QS.call(Dr)
            .replace(Uq, "\\$&")
            .replace(
              /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
              "$1.*?"
            ) +
          "$"
      ),
      KS = CS ? Br.Buffer : void 0,
      ju = Br.Symbol,
      $S = Br.Uint8Array,
      BS = Iu.propertyIsEnumerable,
      sM = rM.splice,
      Kn = ju ? ju.toStringTag : void 0,
      zS = Object.getOwnPropertySymbols,
      aM = KS ? KS.isBuffer : void 0,
      oM = eM(Object.keys, Object),
      Gf = Mi(Br, "DataView"),
      la = Mi(Br, "Map"),
      Qf = Mi(Br, "Promise"),
      Uf = Mi(Br, "Set"),
      Vf = Mi(Br, "WeakMap"),
      ca = Mi(Object, "create"),
      uM = zn(Gf),
      lM = zn(la),
      cM = zn(Qf),
      pM = zn(Uf),
      dM = zn(Vf),
      WS = ju ? ju.prototype : void 0,
      Kf = WS ? WS.valueOf : void 0;
    function $n(e) {
      var t = -1,
        r = e == null ? 0 : e.length;
      for (this.clear(); ++t < r; ) {
        var n = e[t];
        this.set(n[0], n[1]);
      }
    }
    function fM() {
      (this.__data__ = ca ? ca(null) : {}), (this.size = 0);
    }
    function yM(e) {
      var t = this.has(e) && delete this.__data__[e];
      return (this.size -= t ? 1 : 0), t;
    }
    function hM(e) {
      var t = this.__data__;
      if (ca) {
        var r = t[e];
        return r === qf ? void 0 : r;
      }
      return Dr.call(t, e) ? t[e] : void 0;
    }
    function mM(e) {
      var t = this.__data__;
      return ca ? t[e] !== void 0 : Dr.call(t, e);
    }
    function gM(e, t) {
      var r = this.__data__;
      return (
        (this.size += this.has(e) ? 0 : 1),
        (r[e] = ca && t === void 0 ? qf : t),
        this
      );
    }
    $n.prototype.clear = fM;
    $n.prototype.delete = yM;
    $n.prototype.get = hM;
    $n.prototype.has = mM;
    $n.prototype.set = gM;
    function zr(e) {
      var t = -1,
        r = e == null ? 0 : e.length;
      for (this.clear(); ++t < r; ) {
        var n = e[t];
        this.set(n[0], n[1]);
      }
    }
    function vM() {
      (this.__data__ = []), (this.size = 0);
    }
    function bM(e) {
      var t = this.__data__,
        r = wu(t, e);
      if (r < 0) return !1;
      var n = t.length - 1;
      return r == n ? t.pop() : sM.call(t, r, 1), --this.size, !0;
    }
    function OM(e) {
      var t = this.__data__,
        r = wu(t, e);
      return r < 0 ? void 0 : t[r][1];
    }
    function SM(e) {
      return wu(this.__data__, e) > -1;
    }
    function TM(e, t) {
      var r = this.__data__,
        n = wu(r, e);
      return n < 0 ? (++this.size, r.push([e, t])) : (r[n][1] = t), this;
    }
    zr.prototype.clear = vM;
    zr.prototype.delete = bM;
    zr.prototype.get = OM;
    zr.prototype.has = SM;
    zr.prototype.set = TM;
    function Bn(e) {
      var t = -1,
        r = e == null ? 0 : e.length;
      for (this.clear(); ++t < r; ) {
        var n = e[t];
        this.set(n[0], n[1]);
      }
    }
    function _M() {
      (this.size = 0),
        (this.__data__ = {
          hash: new $n(),
          map: new (la || zr)(),
          string: new $n(),
        });
    }
    function AM(e) {
      var t = Du(this, e).delete(e);
      return (this.size -= t ? 1 : 0), t;
    }
    function EM(e) {
      return Du(this, e).get(e);
    }
    function NM(e) {
      return Du(this, e).has(e);
    }
    function IM(e, t) {
      var r = Du(this, e),
        n = r.size;
      return r.set(e, t), (this.size += r.size == n ? 0 : 1), this;
    }
    Bn.prototype.clear = _M;
    Bn.prototype.delete = AM;
    Bn.prototype.get = EM;
    Bn.prototype.has = NM;
    Bn.prototype.set = IM;
    function Pu(e) {
      var t = -1,
        r = e == null ? 0 : e.length;
      for (this.__data__ = new Bn(); ++t < r; ) this.add(e[t]);
    }
    function jM(e) {
      return this.__data__.set(e, qf), this;
    }
    function PM(e) {
      return this.__data__.has(e);
    }
    Pu.prototype.add = Pu.prototype.push = jM;
    Pu.prototype.has = PM;
    function cn(e) {
      var t = (this.__data__ = new zr(e));
      this.size = t.size;
    }
    function wM() {
      (this.__data__ = new zr()), (this.size = 0);
    }
    function DM(e) {
      var t = this.__data__,
        r = t.delete(e);
      return (this.size = t.size), r;
    }
    function RM(e) {
      return this.__data__.get(e);
    }
    function LM(e) {
      return this.__data__.has(e);
    }
    function FM(e, t) {
      var r = this.__data__;
      if (r instanceof zr) {
        var n = r.__data__;
        if (!la || n.length < Nq - 1)
          return n.push([e, t]), (this.size = ++r.size), this;
        r = this.__data__ = new Bn(n);
      }
      return r.set(e, t), (this.size = r.size), this;
    }
    cn.prototype.clear = wM;
    cn.prototype.delete = DM;
    cn.prototype.get = RM;
    cn.prototype.has = LM;
    cn.prototype.set = FM;
    function qM(e, t) {
      var r = Ru(e),
        n = !r && HM(e),
        i = !r && !n && $f(e),
        s = !r && !n && !i && nT(e),
        a = r || n || i || s,
        o = a ? Yq(e.length, String) : [],
        u = o.length;
      for (var l in e)
        (t || Dr.call(e, l)) &&
          !(
            a &&
            (l == "length" ||
              (i && (l == "offset" || l == "parent")) ||
              (s &&
                (l == "buffer" || l == "byteLength" || l == "byteOffset")) ||
              $M(l, u))
          ) &&
          o.push(l);
      return o;
    }
    function wu(e, t) {
      for (var r = e.length; r--; ) if (ZS(e[r][0], t)) return r;
      return -1;
    }
    function MM(e, t, r) {
      var n = t(e);
      return Ru(e) ? n : zq(n, r(e));
    }
    function pa(e) {
      return e == null
        ? e === void 0
          ? Rq
          : Pq
        : Kn && Kn in Object(e)
        ? VM(e)
        : YM(e);
    }
    function YS(e) {
      return da(e) && pa(e) == _u;
    }
    function HS(e, t, r, n, i) {
      return e === t
        ? !0
        : e == null || t == null || (!da(e) && !da(t))
        ? e !== e && t !== t
        : xM(e, t, r, n, HS, i);
    }
    function xM(e, t, r, n, i, s) {
      var a = Ru(e),
        o = Ru(t),
        u = a ? Mf : pn(e),
        l = o ? Mf : pn(t);
      (u = u == _u ? qi : u), (l = l == _u ? qi : l);
      var c = u == qi,
        d = l == qi,
        p = u == l;
      if (p && $f(e)) {
        if (!$f(t)) return !1;
        (a = !0), (c = !1);
      }
      if (p && !c)
        return (
          s || (s = new cn()),
          a || nT(e) ? JS(e, t, r, n, i, s) : QM(e, t, u, r, n, i, s)
        );
      if (!(r & Tu)) {
        var m = c && Dr.call(e, "__wrapped__"),
          v = d && Dr.call(t, "__wrapped__");
        if (m || v) {
          var E = m ? e.value() : e,
            L = v ? t.value() : t;
          return s || (s = new cn()), i(E, L, r, n, s);
        }
      }
      return p ? (s || (s = new cn()), UM(e, t, r, n, i, s)) : !1;
    }
    function CM(e) {
      if (!rT(e) || zM(e)) return !1;
      var t = eT(e) ? iM : Vq;
      return t.test(zn(e));
    }
    function kM(e) {
      return da(e) && tT(e.length) && !!je[pa(e)];
    }
    function GM(e) {
      if (!WM(e)) return oM(e);
      var t = [];
      for (var r in Object(e)) Dr.call(e, r) && r != "constructor" && t.push(r);
      return t;
    }
    function JS(e, t, r, n, i, s) {
      var a = r & Tu,
        o = e.length,
        u = t.length;
      if (o != u && !(a && u > o)) return !1;
      var l = s.get(e);
      if (l && s.get(t)) return l == t;
      var c = -1,
        d = !0,
        p = r & AS ? new Pu() : void 0;
      for (s.set(e, t), s.set(t, e); ++c < o; ) {
        var m = e[c],
          v = t[c];
        if (n) var E = a ? n(v, m, c, t, e, s) : n(m, v, c, e, t, s);
        if (E !== void 0) {
          if (E) continue;
          d = !1;
          break;
        }
        if (p) {
          if (
            !Wq(t, function (L, C) {
              if (!Jq(p, C) && (m === L || i(m, L, r, n, s))) return p.push(C);
            })
          ) {
            d = !1;
            break;
          }
        } else if (!(m === v || i(m, v, r, n, s))) {
          d = !1;
          break;
        }
      }
      return s.delete(e), s.delete(t), d;
    }
    function QM(e, t, r, n, i, s, a) {
      switch (r) {
        case Nu:
          if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset)
            return !1;
          (e = e.buffer), (t = t.buffer);
        case FS:
          return !(e.byteLength != t.byteLength || !s(new $S(e), new $S(t)));
        case NS:
        case IS:
        case wS:
          return ZS(+e, +t);
        case jS:
          return e.name == t.name && e.message == t.message;
        case RS:
        case LS:
          return e == t + "";
        case Au:
          var o = Zq;
        case Eu:
          var u = n & Tu;
          if ((o || (o = tM), e.size != t.size && !u)) return !1;
          var l = a.get(e);
          if (l) return l == t;
          (n |= AS), a.set(e, t);
          var c = JS(o(e), o(t), n, i, s, a);
          return a.delete(e), c;
        case Dq:
          if (Kf) return Kf.call(e) == Kf.call(t);
      }
      return !1;
    }
    function UM(e, t, r, n, i, s) {
      var a = r & Tu,
        o = XS(e),
        u = o.length,
        l = XS(t),
        c = l.length;
      if (u != c && !a) return !1;
      for (var d = u; d--; ) {
        var p = o[d];
        if (!(a ? p in t : Dr.call(t, p))) return !1;
      }
      var m = s.get(e);
      if (m && s.get(t)) return m == t;
      var v = !0;
      s.set(e, t), s.set(t, e);
      for (var E = a; ++d < u; ) {
        p = o[d];
        var L = e[p],
          C = t[p];
        if (n) var H = a ? n(C, L, p, t, e, s) : n(L, C, p, e, t, s);
        if (!(H === void 0 ? L === C || i(L, C, r, n, s) : H)) {
          v = !1;
          break;
        }
        E || (E = p == "constructor");
      }
      if (v && !E) {
        var B = e.constructor,
          S = t.constructor;
        B != S &&
          "constructor" in e &&
          "constructor" in t &&
          !(
            typeof B == "function" &&
            B instanceof B &&
            typeof S == "function" &&
            S instanceof S
          ) &&
          (v = !1);
      }
      return s.delete(e), s.delete(t), v;
    }
    function XS(e) {
      return MM(e, ZM, KM);
    }
    function Du(e, t) {
      var r = e.__data__;
      return BM(t) ? r[typeof t == "string" ? "string" : "hash"] : r.map;
    }
    function Mi(e, t) {
      var r = Xq(e, t);
      return CM(r) ? r : void 0;
    }
    function VM(e) {
      var t = Dr.call(e, Kn),
        r = e[Kn];
      try {
        e[Kn] = void 0;
        var n = !0;
      } catch (s) {}
      var i = VS.call(e);
      return n && (t ? (e[Kn] = r) : delete e[Kn]), i;
    }
    var KM = zS
        ? function (e) {
            return e == null
              ? []
              : ((e = Object(e)),
                Bq(zS(e), function (t) {
                  return BS.call(e, t);
                }));
          }
        : ex,
      pn = pa;
    ((Gf && pn(new Gf(new ArrayBuffer(1))) != Nu) ||
      (la && pn(new la()) != Au) ||
      (Qf && pn(Qf.resolve()) != DS) ||
      (Uf && pn(new Uf()) != Eu) ||
      (Vf && pn(new Vf()) != xf)) &&
      (pn = function (e) {
        var t = pa(e),
          r = t == qi ? e.constructor : void 0,
          n = r ? zn(r) : "";
        if (n)
          switch (n) {
            case uM:
              return Nu;
            case lM:
              return Au;
            case cM:
              return DS;
            case pM:
              return Eu;
            case dM:
              return xf;
          }
        return t;
      });
    function $M(e, t) {
      return (
        (t = t == null ? ES : t),
        !!t &&
          (typeof e == "number" || Kq.test(e)) &&
          e > -1 &&
          e % 1 == 0 &&
          e < t
      );
    }
    function BM(e) {
      var t = typeof e;
      return t == "string" || t == "number" || t == "symbol" || t == "boolean"
        ? e !== "__proto__"
        : e === null;
    }
    function zM(e) {
      return !!US && US in e;
    }
    function WM(e) {
      var t = e && e.constructor,
        r = (typeof t == "function" && t.prototype) || Iu;
      return e === r;
    }
    function YM(e) {
      return VS.call(e);
    }
    function zn(e) {
      if (e != null) {
        try {
          return QS.call(e);
        } catch (t) {}
        try {
          return e + "";
        } catch (t) {}
      }
      return "";
    }
    function ZS(e, t) {
      return e === t || (e !== e && t !== t);
    }
    var HM = YS(
        (function () {
          return arguments;
        })()
      )
        ? YS
        : function (e) {
            return da(e) && Dr.call(e, "callee") && !BS.call(e, "callee");
          },
      Ru = Array.isArray;
    function JM(e) {
      return e != null && tT(e.length) && !eT(e);
    }
    var $f = aM || tx;
    function XM(e, t) {
      return HS(e, t);
    }
    function eT(e) {
      if (!rT(e)) return !1;
      var t = pa(e);
      return t == PS || t == jq || t == Iq || t == wq;
    }
    function tT(e) {
      return typeof e == "number" && e > -1 && e % 1 == 0 && e <= ES;
    }
    function rT(e) {
      var t = typeof e;
      return e != null && (t == "object" || t == "function");
    }
    function da(e) {
      return e != null && typeof e == "object";
    }
    var nT = GS ? Hq(GS) : kM;
    function ZM(e) {
      return JM(e) ? qM(e) : GM(e);
    }
    function ex() {
      return [];
    }
    function tx() {
      return !1;
    }
    xi.exports = XM;
  });
  var zf = f((yr) => {
    "use strict";
    var sT =
      (yr && yr.__importDefault) ||
      function (e) {
        return e && e.__esModule ? e : { default: e };
      };
    Object.defineProperty(yr, "__esModule", { value: !0 });
    yr.GadgetRecord =
      yr.GadgetRecordImplementation =
      yr.ChangeTracking =
        void 0;
    var Ci = sT(_S()),
      Lu = sT(iT()),
      rx = dn(),
      Pt;
    (function (e) {
      (e[(e.SinceLoaded = 0)] = "SinceLoaded"),
        (e[(e.SinceLastPersisted = 1)] = "SinceLastPersisted");
    })((Pt = yr.ChangeTracking || (yr.ChangeTracking = {})));
    var Bf = class {
      constructor(t) {
        Object.defineProperty(this, "__gadget", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: {
            fields: {},
            instantiatedFields: {},
            persistedFields: {},
            fieldKeys: [],
            fieldKeysTracker: {},
          },
        }),
          Object.defineProperty(this, "empty", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: !1,
          }),
          (this.__gadget.instantiatedFields = (0, Ci.default)(t)),
          (this.__gadget.persistedFields = (0, Ci.default)(t)),
          Object.assign(this.__gadget.fields, t),
          !t || Object.keys(t).length === 0
            ? (this.empty = !0)
            : ((this.__gadget.fieldKeys = Object.keys(this.__gadget.fields)),
              this.__gadget.fieldKeys.forEach(
                (n) => (this.__gadget.fieldKeysTracker[n] = !0)
              ));
        let r = {
          get: (n, i) => {
            if (i in this) return this[i];
            if (i in n) return n[i];
          },
          set: (n, i, s) => (this.trackKey(i), (n[i.toString()] = s), !0),
        };
        return new Proxy(this.__gadget.fields, r);
      }
      trackKey(t) {
        let r = t.toString();
        this.__gadget.fieldKeysTracker[r] ||
          ((this.__gadget.fieldKeysTracker[r] = !0),
          this.__gadget.fieldKeys.push(r));
      }
      hasChanges(t = Pt.SinceLoaded) {
        let r =
          t == Pt.SinceLoaded
            ? this.__gadget.instantiatedFields
            : this.__gadget.persistedFields;
        return this.__gadget.fieldKeys.some(
          (n) => !(0, Lu.default)(r[n], this.__gadget.fields[n])
        );
      }
      isEmpty() {
        return this.empty;
      }
      getField(t) {
        return this.__gadget.fields[t];
      }
      setField(t, r) {
        return this.trackKey(t), (this.__gadget.fields[t] = r);
      }
      changes(t, r = Pt.SinceLoaded) {
        let i =
          (typeof t == "string" ? r : t || r) == Pt.SinceLoaded
            ? this.__gadget.instantiatedFields
            : this.__gadget.persistedFields;
        if (t && typeof t == "string") {
          let s = i[t],
            a = this.__gadget.fields[t],
            o = !(0, Lu.default)(a, s);
          return o ? { changed: o, current: a, previous: s } : { changed: o };
        } else {
          let s = {};
          for (let a = 0; a < this.__gadget.fieldKeys.length; a++) {
            let o = this.__gadget.fieldKeys[a];
            (0, Lu.default)(i[o], this.__gadget.fields[o]) ||
              (s[o] = { current: this.__gadget.fields[o], previous: i[o] });
          }
          return s;
        }
      }
      toChangedJSON(t = Pt.SinceLoaded) {
        let r =
            t == Pt.SinceLoaded
              ? this.__gadget.instantiatedFields
              : this.__gadget.persistedFields,
          n = {};
        for (let i = 0; i < this.__gadget.fieldKeys.length; i++) {
          let s = this.__gadget.fieldKeys[i];
          (0, Lu.default)(r[s], this.__gadget.fields[s]) ||
            (n[s] = this.__gadget.fields[s]);
        }
        return n;
      }
      changed(t, r = Pt.SinceLoaded) {
        return t && typeof t == "string"
          ? this.changes(t, r).changed
          : this.hasChanges(t === void 0 ? r : t);
      }
      flushChanges(t = Pt.SinceLoaded) {
        t == Pt.SinceLoaded
          ? (this.__gadget.instantiatedFields = (0, Ci.default)(
              this.__gadget.fields
            ))
          : t == Pt.SinceLastPersisted &&
            (this.__gadget.persistedFields = (0, Ci.default)(
              this.__gadget.fields
            ));
      }
      revertChanges(t = Pt.SinceLoaded) {
        let r;
        t == Pt.SinceLoaded
          ? (r = Object.keys(this.__gadget.instantiatedFields))
          : (r = Object.keys(this.__gadget.persistedFields));
        for (let n of this.__gadget.fieldKeys)
          r.includes(n) || delete this.__gadget.fields[n];
        t == Pt.SinceLoaded
          ? Object.assign(
              this.__gadget.fields,
              (0, Ci.default)(this.__gadget.instantiatedFields)
            )
          : Object.assign(
              this.__gadget.fields,
              (0, Ci.default)(this.__gadget.persistedFields)
            );
      }
      toJSON() {
        return (0, rx.toPrimitiveObject)(O({}, this.__gadget.fields));
      }
    };
    yr.GadgetRecordImplementation = Bf;
    yr.GadgetRecord = Bf;
  });
  var dn = f((D) => {
    "use strict";
    Object.defineProperty(D, "__esModule", { value: !0 });
    D.getQueryArgs =
      D.getCurrentSpan =
      D.traceFunction =
      D.errorMessage =
      D.tracer =
      D.toPrimitiveObject =
      D.hydrateConnection =
      D.hydrateRecordArray =
      D.hydrateRecord =
      D.getHydrator =
      D.assertMutationSuccess =
      D.gadgetErrorFor =
      D.assertNullableOperationSuccess =
      D.assertOperationSuccess =
      D.getNonNullableError =
      D.getNonUniqueDataError =
      D.filterTypeName =
      D.sortTypeName =
      D.camelize =
      D.capitalize =
      D.isCloseEvent =
      D.get =
      D.assert =
      D.GadgetNotFoundError =
      D.GadgetNonUniqueDataError =
      D.GadgetValidationError =
      D.InvalidRecordError =
      D.GadgetUnexpectedCloseError =
      D.GadgetOperationError =
      D.GadgetClientError =
      D.GadgetInternalError =
        void 0;
    var fn = qO(),
      aT = Kd(),
      nx = Xu(),
      oT = zf(),
      ki = class extends Error {};
    D.GadgetInternalError = ki;
    var uT = class extends Error {};
    D.GadgetClientError = uT;
    var Fu = class extends Error {
      constructor(t, r) {
        super(t.startsWith("GGT_") ? t : `${r}: ${t}`);
        Object.defineProperty(this, "code", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: r,
        });
      }
    };
    D.GadgetOperationError = Fu;
    var lT = class extends Error {
      constructor(t) {
        let r;
        (0, D.isCloseEvent)(t)
          ? (r = `GraphQL websocket closed unexpectedly by the server with error code ${t.code} and reason "${t.reason}"`)
          : (r = "GraphQL websocket closed unexpectedly by the server");
        super(r);
        Object.defineProperty(this, "code", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: "GGT_UNKNOWN",
        }),
          Object.defineProperty(this, "name", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: "UnexpectedCloseError",
          }),
          Object.defineProperty(this, "statusCode", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: 500,
          }),
          Object.defineProperty(this, "causedByClient", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: !1,
          }),
          Object.defineProperty(this, "event", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          (this.event = t);
      }
    };
    D.GadgetUnexpectedCloseError = lT;
    var qu = class extends Error {
      constructor(t, r, n, i) {
        let s = r.slice(0, 3),
          a =
            r.length > 3
              ? `, and ${r.length - 3} more error${
                  r.length > 4 ? "s" : ""
                } need${r.length > 4 ? "" : "s"} to be corrected`
              : "";
        super(
          t != null
            ? t
            : `GGT_INVALID_RECORD: ${
                n != null ? n : "Record"
              } is invalid and can't be saved. ${s
                .map(({ apiIdentifier: o, message: u }) => `${o} ${u}`)
                .join(", ")}${a}.`
        );
        Object.defineProperty(this, "code", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: "GGT_INVALID_RECORD",
        }),
          Object.defineProperty(this, "name", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: "InvalidRecordError",
          }),
          Object.defineProperty(this, "statusCode", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: 422,
          }),
          Object.defineProperty(this, "causedByClient", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: !0,
          }),
          Object.defineProperty(this, "validationErrors", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "modelApiIdentifier", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "record", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          (this.validationErrors = r),
          (this.modelApiIdentifier = n),
          (this.record = i);
      }
    };
    D.InvalidRecordError = qu;
    D.GadgetValidationError = qu;
    var Mu = class extends Error {
      constructor() {
        super(...arguments);
        Object.defineProperty(this, "code", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: "GGT_NON_UNIQUE_DATA",
        });
      }
    };
    D.GadgetNonUniqueDataError = Mu;
    var cT = class extends Error {
      constructor() {
        super(...arguments);
        Object.defineProperty(this, "code", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: "GGT_RECORD_NOT_FOUND",
        });
      }
    };
    D.GadgetNotFoundError = cT;
    function ix(e, t) {
      if (!e) throw new Error("assertion error" + (t ? `: ${t}` : ""));
      return e;
    }
    D.assert = ix;
    var sx = (e, t) => {
      let r = t.length,
        n = 0;
      for (; e != null && n < r; ) e = e[t[n++]];
      return n && n == r ? e : void 0;
    };
    D.get = sx;
    var ax = (e) => (e == null ? void 0 : e.type) == "close";
    D.isCloseEvent = ax;
    var ox = (e) => {
      let t = e == null ? "" : String(e);
      return t.charAt(0).toUpperCase() + t.slice(1);
    };
    D.capitalize = ox;
    var ux = (e, t = !0) => {
      let r = "" + e;
      return (
        t
          ? (r = r.replace(/^[a-z\d]*/, (n) => (0, D.capitalize)(n)))
          : (r = r.replace(new RegExp("^(?:(?=\\b|[A-Z_])|\\w)"), (n) =>
              n.toLowerCase()
            )),
        (r = r.replace(
          /(?:_|(\/))([a-z\d]*)/gi,
          (n, i, s, a, o) => (i || (i = ""), "" + i + (0, D.capitalize)(s))
        )),
        r
      );
    };
    D.camelize = ux;
    var lx = (e) => `${(0, D.camelize)(e)}Sort`;
    D.sortTypeName = lx;
    var cx = (e) => `${(0, D.camelize)(e)}Filter`;
    D.filterTypeName = cx;
    var px = (e, t, r) =>
      new Mu(
        `More than one record found for ${e}.${t} = ${r}. Please confirm your unique validation is not reporting an error.`
      );
    D.getNonUniqueDataError = px;
    var dx = (e, t, r = !1) => {
      if (e.fetching) return;
      let n = (0, D.get)(e.data, t),
        i = (0, D.get)(n, ["edges"]),
        s = i != null ? i : n;
      if (n === void 0)
        return new ki(
          `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${t.join(
            "."
          )}`
        );
      if (n === null || (r && Array.isArray(s) && s.length === 0))
        return new ki(
          `Internal Error: Gadget API returned no data at ${t.join(".")}`
        );
    };
    D.getNonNullableError = dx;
    var fx = (e, t, r = !1) => {
      var n;
      if (e.error)
        throw (
          (e.error instanceof aT.CombinedError &&
            ((n = e.error.networkError) === null || n === void 0
              ? void 0
              : n.length) &&
            (e.error.message = e.error.networkError.map(
              (o) => "[Network] " + o.message
            ).join(`
`)),
          e.error)
        );
      let i = (0, D.get)(e.data, t),
        s = (0, D.get)(i, ["edges"]),
        a = s != null ? s : i;
      if (i === void 0)
        throw new ki(
          `Internal Error: Gadget API didn't return expected data. Nothing found in response at ${t.join(
            "."
          )}`
        );
      if (i === null || (r && Array.isArray(a) && a.length === 0))
        throw new ki(
          `Internal Error: Gadget API returned no data at ${t.join(".")}`
        );
      return i;
    };
    D.assertOperationSuccess = fx;
    var yx = (e, t) => {
      var r;
      if (e.error)
        throw (
          (e.error instanceof aT.CombinedError &&
            ((r = e.error.networkError) === null || r === void 0
              ? void 0
              : r.length) &&
            (e.error.message = e.error.networkError.map(
              (i) => "[Network] " + i.message
            ).join(`
`)),
          e.error)
        );
      let n = (0, D.get)(e.data, t);
      return n != null ? n : null;
    };
    D.assertNullableOperationSuccess = yx;
    var hx = (e) => {
      var t;
      return e.code == "GGT_INVALID_RECORD"
        ? new qu(
            e.message,
            e.validationErrors,
            (t = e.model) === null || t === void 0 ? void 0 : t.apiIdentifier,
            e.record
          )
        : e.code == "GGT_UNKNOWN" &&
          e.message.includes("duplicate key value violates unique constraint")
        ? new Mu(e.message)
        : new Fu(e.message, e.code);
    };
    D.gadgetErrorFor = hx;
    var mx = (e, t) => {
      let r = (0, D.assertOperationSuccess)(e, t);
      if (!r.success) {
        let n = r.errors && r.errors[0];
        throw n
          ? (0, D.gadgetErrorFor)(n)
          : new Fu("Gadget API operation not successful.", "GGT_UNKNOWN");
      }
      return r;
    };
    D.assertMutationSuccess = mx;
    var gx = (e) => {
      var t, r, n, i;
      if (
        (r = (t = e.data) === null || t === void 0 ? void 0 : t.gadgetMeta) ===
          null || r === void 0
          ? void 0
          : r.hydrations
      )
        return new nx.DataHydrator(
          (i =
            (n = e.data) === null || n === void 0 ? void 0 : n.gadgetMeta) ===
            null || i === void 0
            ? void 0
            : i.hydrations
        );
    };
    D.getHydrator = gx;
    var vx = (e, t) => {
      let r = (0, D.getHydrator)(e);
      return r && (t = r.apply(t)), new oT.GadgetRecord(t);
    };
    D.hydrateRecord = vx;
    var bx = (e, t) => {
      let r = (0, D.getHydrator)(e);
      return (
        r && (t = r.apply(t)),
        t == null ? void 0 : t.map((n) => new oT.GadgetRecord(n))
      );
    };
    D.hydrateRecordArray = bx;
    var Ox = (e, t) => {
      let r = t.edges.map((n) => n.node);
      return (0, D.hydrateRecordArray)(e, r);
    };
    D.hydrateConnection = Ox;
    var Sx = (e) => {
      if (
        (e != null && typeof e.toJSON == "function" && (e = e.toJSON()),
        e !== void 0)
      ) {
        if (e === null) return null;
        if (typeof e == "boolean" || typeof e == "string") return e;
        if (typeof e == "number") return Number.isFinite(e) ? e : null;
        if (typeof e == "object") {
          if (Array.isArray(e)) {
            let t = [];
            for (let r = 0; r < e.length; r++) {
              let n = e[r];
              t[r] = n === void 0 ? null : (0, D.toPrimitiveObject)(n);
            }
            return t;
          }
          if (Object.prototype.toString.call(e) === "[object Error]") return {};
          if (Object.prototype.toString.call(e) === "[object Object]") {
            let t = {};
            for (let r of Object.keys(e)) {
              let n = (0, D.toPrimitiveObject)(e[r]);
              n !== void 0 && (t[r] = n);
            }
            return t;
          }
        }
      }
    };
    D.toPrimitiveObject = Sx;
    D.tracer = fn.trace.getTracer("gadget-api-client");
    var Tx = (e) =>
      typeof e == "string"
        ? e
        : e && (e == null ? void 0 : e.message)
        ? e.message
        : String(e);
    D.errorMessage = Tx;
    var _x = (e, t, r) =>
      function (...n) {
        return y(this, null, function* () {
          let i = D.tracer.startSpan(e, r, fn.context.active());
          return yield fn.context.with(
            fn.trace.setSpan(fn.context.active(), i),
            () =>
              y(this, null, function* () {
                try {
                  let s = yield t.call(this, ...n);
                  return i.end(), s;
                } catch (s) {
                  throw (
                    (i.setStatus({
                      code: fn.SpanStatusCode.ERROR,
                      message: (0, D.errorMessage)(s),
                    }),
                    i.end(),
                    s)
                  );
                }
              })
          );
        });
      };
    D.traceFunction = _x;
    var Ax = () => fn.trace.getSpan(fn.context.active());
    D.getCurrentSpan = Ax;
    var Ex = (e, t) => ({
      query: e.query,
      variables: e.variables,
      context: t == null ? void 0 : t.context,
      pause: t == null ? void 0 : t.pause,
      requestPolicy: t == null ? void 0 : t.requestPolicy,
    });
    D.getQueryArgs = Ex;
  });
  var Hf = f((Gi) => {
    "use strict";
    Object.defineProperty(Gi, "__esModule", { value: !0 });
    Gi.GadgetTransaction = Gi.TransactionRolledBack = void 0;
    var Wf = dn(),
      Yf = class extends Error {};
    Gi.TransactionRolledBack = Yf;
    var pT = class {
      constructor(t, r) {
        Object.defineProperty(this, "client", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: t,
        }),
          Object.defineProperty(this, "subscriptionClient", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: r,
          }),
          Object.defineProperty(this, "open", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: !1,
          });
      }
      close() {
        this.open && this.rollback().catch(() => null),
          this.subscriptionClient.dispose();
      }
      rollback() {
        return y(this, null, function* () {
          throw (
            ((0, Wf.assertOperationSuccess)(
              yield this.client
                .mutation(
                  "mutation RollbackTransaction { internal { rollbackTransaction }}",
                  {}
                )
                .toPromise(),
              ["internal", "rollbackTransaction"]
            ),
            (this.open = !1),
            new Yf("Transaction rolled back."))
          );
        });
      }
      start() {
        return y(this, null, function* () {
          (0, Wf.assertOperationSuccess)(
            yield this.client
              .mutation(
                "mutation StartTransaction { internal { startTransaction }}",
                {}
              )
              .toPromise(),
            ["internal", "startTransaction"]
          ),
            (this.open = !0);
        });
      }
      commit() {
        return y(this, null, function* () {
          (0, Wf.assertOperationSuccess)(
            yield this.client
              .mutation(
                "mutation CommitTransaction { internal { commitTransaction }}",
                {}
              )
              .toPromise(),
            ["internal", "commitTransaction"]
          ),
            (this.open = !1);
        });
      }
    };
    Gi.GadgetTransaction = pT;
  });
  var Jf = f((xu) => {
    "use strict";
    Object.defineProperty(xu, "__esModule", { value: !0 });
    xu.InMemoryStorage = void 0;
    var dT = class {
      constructor() {
        Object.defineProperty(this, "values", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: {},
        });
      }
      getItem(t) {
        return this.values[t] || null;
      }
      setItem(t, r) {
        this.values[t] = r;
      }
    };
    xu.InMemoryStorage = dT;
  });
  var vT = f((hr) => {
    "use strict";
    var fT =
      (hr && hr.__importDefault) ||
      function (e) {
        return e && e.__esModule ? e : { default: e };
      };
    Object.defineProperty(hr, "__esModule", { value: !0 });
    hr.GadgetConnection = hr.AuthenticationMode = hr.$transaction = void 0;
    var Qi = Kd(),
      Nx = Ob(),
      Ix = fT(_b()),
      yT = Nb(),
      jx = fT(jb()),
      Px = Ue(),
      hT = Ju(),
      mT = Hf(),
      wx = Jf(),
      Ui = dn(),
      Dx = 2,
      Rx = 4800,
      Lx = 1e4;
    hr.$transaction = Symbol.for("gadget/transaction");
    var ya = "token",
      Fx =
        typeof btoa != "undefined"
          ? btoa
          : (e) => Buffer.from(e).toString("base64"),
      ot;
    (function (e) {
      (e.BrowserSession = "browser-session"),
        (e.APIKey = "api-key"),
        (e.InternalAuthToken = "internal-auth-token"),
        (e.Anonymous = "anonymous"),
        (e.Custom = "custom");
    })((ot = hr.AuthenticationMode || (hr.AuthenticationMode = {})));
    var gT = class {
      constructor(t) {
        var r, n, i, s;
        if (
          (Object.defineProperty(this, "options", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: t,
          }),
          Object.defineProperty(this, "endpoint", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "subscriptionClientOptions", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "websocketsEndpoint", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "websocketImplementation", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "_fetchImplementation", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "environment", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "baseClient", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "baseSubscriptionClient", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "currentTransaction", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: null,
          }),
          Object.defineProperty(this, "authenticationMode", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: ot.Anonymous,
          }),
          Object.defineProperty(this, "sessionTokenStore", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          Object.defineProperty(this, "transaction", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: (0, Ui.traceFunction)("api-client.transaction", (a, o) =>
              y(this, null, function* () {
                var u;
                let l, c;
                if (
                  (o ? ((l = o), (c = a)) : ((l = a), (c = {})),
                  this.currentTransaction)
                )
                  return yield l(this.currentTransaction);
                (u = (0, Px.getCurrentSpan)()) === null ||
                  u === void 0 ||
                  u.setAttributes({
                    applicationId: this.options.applicationId,
                    environmentName: this.environment,
                  });
                let d = null,
                  p;
                try {
                  d = yield this.waitForOpenedConnection(
                    N(
                      O(
                        {
                          isFatalConnectionProblem(E) {
                            return (
                              console.warn(
                                "Transport error encountered during transaction processing",
                                E
                              ),
                              !0
                            );
                          },
                          connectionAckWaitTimeout: Rx,
                        },
                        c
                      ),
                      { lazy: !1, lazyCloseTimeout: 1e5, retryAttempts: 0 }
                    )
                  );
                  let m = new Qi.Client({
                    url: "/-",
                    exchanges: [
                      (0, Qi.subscriptionExchange)({
                        forwardSubscription(E) {
                          return {
                            subscribe: (L) => ({
                              unsubscribe: d.subscribe(E, L),
                            }),
                          };
                        },
                        enableAllOperations: !0,
                      }),
                    ],
                  });
                  (p = new mT.GadgetTransaction(m, d)),
                    (this.currentTransaction = p),
                    yield p.start();
                  let v = yield l(p);
                  return yield p.commit(), v;
                } catch (m) {
                  try {
                    (p == null ? void 0 : p.open) && (yield p.rollback());
                  } catch (v) {
                    v instanceof mT.TransactionRolledBack ||
                      console.warn(
                        "Encountered another error while rolling back a Gadget transaction that errored. The other error:",
                        v
                      );
                  }
                  throw (0, Ui.isCloseEvent)(m)
                    ? new Ui.GadgetUnexpectedCloseError(m)
                    : m;
                } finally {
                  yield d == null ? void 0 : d.dispose(),
                    (this.currentTransaction = null);
                }
              })
            ),
          }),
          Object.defineProperty(this, "fetch", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: (0, Ui.traceFunction)("api-client.fetch", (u, ...l) =>
              y(this, [u, ...l], function* (a, o = {}) {
                (o.headers = O(O({}, this.requestHeaders()), o.headers)),
                  this.authenticationMode == ot.Custom &&
                    (yield this.options.authenticationMode.custom.processFetch(
                      a,
                      o
                    ));
                let c = yield this._fetchImplementation(a, o);
                if (this.authenticationMode == ot.BrowserSession) {
                  let d = c.headers.get("x-set-authorization"),
                    p = (d == null ? void 0 : d.startsWith("Session "))
                      ? d.replace("Session ", "")
                      : null;
                  p && this.sessionTokenStore.setItem(ya, p);
                }
                return c;
              })
            ),
          }),
          !t.endpoint)
        )
          throw new Error(
            "Must provide an `endpoint` option for a GadgetConnection to connect to"
          );
        (this.endpoint = t.endpoint),
          (this._fetchImplementation =
            (r = t.fetchImplementation) !== null && r !== void 0
              ? r
              : Ix.default),
          (this.websocketImplementation =
            (n = t.websocketImplementation) !== null && n !== void 0
              ? n
              : jx.default),
          (this.websocketsEndpoint =
            (i = t.websocketsEndpoint) !== null && i !== void 0
              ? i
              : t.endpoint + "/batch"),
          (this.websocketsEndpoint = this.websocketsEndpoint.replace(
            /^http/,
            "ws"
          )),
          (this.environment =
            (s = t.environment) !== null && s !== void 0 ? s : "Development"),
          this.setAuthenticationMode(t.authenticationMode),
          (this.baseSubscriptionClient = this.newSubscriptionClient({
            lazy: !0,
          })),
          (this.baseClient = this.newBaseClient());
      }
      get currentClient() {
        var t;
        return (
          ((t = this.currentTransaction) === null || t === void 0
            ? void 0
            : t.client) || this.baseClient
        );
      }
      set fetchImplementation(t) {
        (this._fetchImplementation = t), this.resetClients();
      }
      setAuthenticationMode(t) {
        var r;
        t &&
          (t.browserSession
            ? this.enableSessionMode(t.browserSession)
            : t.internalAuthToken
            ? (this.authenticationMode = ot.InternalAuthToken)
            : t.apiKey
            ? (this.authenticationMode = ot.APIKey)
            : t.custom && (this.authenticationMode = ot.Custom),
          (this.options.authenticationMode = t)),
          ((r = this.authenticationMode) !== null && r !== void 0) ||
            (this.authenticationMode = ot.Anonymous);
      }
      enableSessionMode(t) {
        this.authenticationMode = ot.BrowserSession;
        let r;
        !t ||
        typeof t == "boolean" ||
        t.storageType == hT.BrowserSessionStorageType.Durable
          ? (r = window.localStorage)
          : t.storageType == hT.BrowserSessionStorageType.Session
          ? (r = window.sessionStorage)
          : (r = new wx.InMemoryStorage()),
          t !== null &&
            typeof t == "object" &&
            "initialToken" in t &&
            t.initialToken &&
            r.setItem(ya, t.initialToken),
          (this.sessionTokenStore = r),
          this.resetClients();
      }
      close() {
        this.disposeClient(this.baseSubscriptionClient),
          this.currentTransaction && this.currentTransaction.close();
      }
      resetClients() {
        if (this.currentTransaction)
          throw new Error("Can't reset clients while a transaction is open");
        this.baseSubscriptionClient &&
          this.disposeClient(this.baseSubscriptionClient),
          this.baseClient && (this.baseClient = this.newBaseClient());
      }
      newBaseClient() {
        let t = [Qi.dedupExchange];
        return (
          typeof window != "undefined" && t.push(Qi.cacheExchange),
          t.push(
            Nx.multipartFetchExchange,
            (0, Qi.subscriptionExchange)({
              forwardSubscription: (r) => ({
                subscribe: (n) => ({
                  unsubscribe: this.baseSubscriptionClient.subscribe(r, n),
                }),
              }),
            })
          ),
          new Qi.Client({ url: this.endpoint, fetch: this.fetch, exchanges: t })
        );
      }
      newSubscriptionClient(t) {
        var r, n;
        let i = {
          environment: this.environment,
          auth: { type: this.authenticationMode },
        };
        this.authenticationMode == ot.APIKey
          ? (i.auth.key = this.options.authenticationMode.apiKey)
          : this.authenticationMode == ot.InternalAuthToken
          ? (i.auth.token = this.options.authenticationMode.internalAuthToken)
          : this.authenticationMode == ot.BrowserSession
          ? (i.auth.sessionToken = this.sessionTokenStore.getItem(ya))
          : this.authenticationMode == ot.Custom &&
            ((n =
              (r = this.options.authenticationMode) === null || r === void 0
                ? void 0
                : r.custom) === null ||
              n === void 0 ||
              n.processTransactionConnectionParams(i));
        let s = this.websocketsEndpoint;
        if (t == null ? void 0 : t.urlParams) {
          let a = new URLSearchParams();
          for (let [o, u] of Object.entries(t.urlParams)) u && a.set(o, u);
          s += "?" + a.toString();
        }
        return (0, yT.createClient)(
          O(
            O(
              {
                url: s,
                webSocketImpl: this.websocketImplementation,
                connectionParams: i,
                onNonLazyError: () => {},
                on: {
                  connected: (a, o) => {
                    var u, l, c, d, p, m;
                    if (
                      this.authenticationMode == ot.BrowserSession &&
                      (o == null ? void 0 : o.sessionToken)
                    ) {
                      let v =
                        (u = this.options.authenticationMode) === null ||
                        u === void 0
                          ? void 0
                          : u.browserSession;
                      (v !== null && typeof v == "object"
                        ? v.initialToken
                        : null) ||
                        this.sessionTokenStore.setItem(ya, o.sessionToken);
                    }
                    (d =
                      (c =
                        (l = this.subscriptionClientOptions) === null ||
                        l === void 0
                          ? void 0
                          : l.on) === null || c === void 0
                        ? void 0
                        : c.connected) === null ||
                      d === void 0 ||
                      d.call(c, a, o),
                      (m =
                        (p = t == null ? void 0 : t.on) === null || p === void 0
                          ? void 0
                          : p.connected) === null ||
                        m === void 0 ||
                        m.call(p, a, o);
                  },
                },
              },
              this.subscriptionClientOptions
            ),
            t
          )
        );
      }
      requestHeaders() {
        var t;
        let r = {};
        if (this.authenticationMode == ot.InternalAuthToken)
          r.authorization =
            "Basic " +
            Fx(
              "gadget-internal:" +
                this.options.authenticationMode.internalAuthToken
            );
        else if (this.authenticationMode == ot.APIKey)
          r.authorization = `Bearer ${
            (t = this.options.authenticationMode) === null || t === void 0
              ? void 0
              : t.apiKey
          }`;
        else if (this.authenticationMode == ot.BrowserSession) {
          let n = this.sessionTokenStore.getItem(ya);
          n && (r.authorization = `Session ${n}`);
        }
        return (r["x-gadget-environment"] = this.environment), r;
      }
      waitForOpenedConnection(t) {
        return y(this, null, function* () {
          let r = this.newSubscriptionClient(t),
            n = [],
            i = t.connectionAttempts || Dx,
            s = t.connectionGlobalTimeoutMs || Lx,
            a = () => {
              n.forEach((o) => o()), (n = []);
            };
          return yield new Promise((o, u) => {
            let l = setTimeout(() => {
                this.disposeClient(r),
                  d(
                    new Error(
                      "Timeout opening websocket connection to Gadget API"
                    )
                  );
              }, s),
              c = (v) => {
                if (
                  (0, Ui.isCloseEvent)(v) &&
                  v.code == yT.CloseCode.ConnectionAcknowledgementTimeout &&
                  i > 0
                ) {
                  (i -= 1),
                    this.disposeClient(r),
                    (r = this.newSubscriptionClient(t)),
                    m();
                  return;
                }
                clearTimeout(l), u(new Ui.GadgetUnexpectedCloseError(v));
              },
              d = (v) => {
                clearTimeout(l), u(v);
              },
              p = () => {
                clearTimeout(l), o(r);
              },
              m = () => {
                a(),
                  n.push(r.on("connected", p)),
                  n.push(r.on("closed", c)),
                  n.push(r.on("error", d));
              };
            m();
          }).finally(a);
        });
      }
      disposeClient(t) {
        let r = t.dispose();
        r &&
          r.catch((n) =>
            console.error(`Error closing SubscriptionClient: ${n.message}`)
          );
      }
    };
    hr.GadgetConnection = gT;
  });
  var OT = f((bT) => {
    "use strict";
    Object.defineProperty(bT, "__esModule", { value: !0 });
  });
  var Gu = f((ku) => {
    "use strict";
    Object.defineProperty(ku, "__esModule", { value: !0 });
    ku.GadgetRecordList = void 0;
    var Xf = dn(),
      Cu = class extends Array {
        constructor() {
          super(...arguments);
          Object.defineProperty(this, "modelManager", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
            Object.defineProperty(this, "pagination", {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: void 0,
            });
        }
        static boot(t, r, n) {
          let i = new Cu();
          return (
            i.push(...r),
            (i.modelManager = t),
            (i.pagination = n),
            Object.freeze(i),
            i
          );
        }
        static get [Symbol.species]() {
          return Array;
        }
        firstOrThrow() {
          if (!this[0])
            throw new Xf.GadgetOperationError(
              "No records found.",
              "GGT_RECORD_NOT_FOUND"
            );
          return this[0];
        }
        toJSON() {
          return this.map((t) => t.toJSON());
        }
        get hasNextPage() {
          return this.pagination.pageInfo.hasNextPage;
        }
        get hasPreviousPage() {
          return this.pagination.pageInfo.hasPreviousPage;
        }
        get startCursor() {
          return this.pagination.pageInfo.startCursor;
        }
        get endCursor() {
          return this.pagination.pageInfo.endCursor;
        }
        nextPage() {
          return y(this, null, function* () {
            var t, r;
            if (!this.hasNextPage)
              throw new Xf.GadgetClientError(
                "Cannot request next page because there isn't one, should check 'hasNextPage' to see if it exists"
              );
            return yield this.modelManager.findMany(
              N(O({}, this.pagination.options), {
                after: this.pagination.pageInfo.endCursor,
                first:
                  ((t = this.pagination.options) === null || t === void 0
                    ? void 0
                    : t.first) ||
                  ((r = this.pagination.options) === null || r === void 0
                    ? void 0
                    : r.last),
              })
            );
          });
        }
        previousPage() {
          return y(this, null, function* () {
            var t, r;
            if (!this.hasPreviousPage)
              throw new Xf.GadgetClientError(
                "Cannot request previous page because there isn't one, should check 'hasPreviousPage' to see if it exists"
              );
            return yield this.modelManager.findMany(
              N(O({}, this.pagination.options), {
                before: this.pagination.pageInfo.startCursor,
                last:
                  ((t = this.pagination.options) === null || t === void 0
                    ? void 0
                    : t.last) ||
                  ((r = this.pagination.options) === null || r === void 0
                    ? void 0
                    : r.first),
              })
            );
          });
        }
      };
    ku.GadgetRecordList = Cu;
  });
  var Vi = f((ey) => {
    "use strict";
    Object.defineProperty(ey, "__esModule", { value: !0 });
    var Zf;
    (function (e) {
      (e.Mutation = "mutation"),
        (e.Query = "query"),
        (e.Subscription = "subscription");
    })(Zf || (Zf = {}));
    ey.default = Zf;
  });
  var ST = f((Qu) => {
    "use strict";
    Object.defineProperty(Qu, "__esModule", { value: !0 });
    Qu.isNestedField = void 0;
    function qx(e) {
      return (
        typeof e == "object" &&
        e.hasOwnProperty("operation") &&
        e.hasOwnProperty("variables") &&
        e.hasOwnProperty("fields")
      );
    }
    Qu.isNestedField = qx;
  });
  var Ki = f((ha) => {
    "use strict";
    var yn =
      (ha && ha.__assign) ||
      function () {
        return (
          (yn =
            Object.assign ||
            function (e) {
              for (var t, r = 1, n = arguments.length; r < n; r++) {
                t = arguments[r];
                for (var i in t)
                  Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
              }
              return e;
            }),
          yn.apply(this, arguments)
        );
      };
    Object.defineProperty(ha, "__esModule", { value: !0 });
    var TT = ST(),
      Mx = (function () {
        function e() {}
        return (
          (e.resolveVariables = function (t) {
            for (var r = {}, n = 0, i = t; n < i.length; n++) {
              var s = i[n],
                a = s.variables,
                o = s.fields;
              r = yn(yn(yn({}, r), a), (o && e.getNestedVariables(o)) || {});
            }
            return r;
          }),
          (e.queryDataNameAndArgumentMap = function (t) {
            return t && Object.keys(t).length
              ? "(".concat(
                  Object.entries(t).reduce(function (r, n, i) {
                    var s = n[0],
                      a = n[1];
                    return ""
                      .concat(r)
                      .concat(i !== 0 ? ", " : "")
                      .concat(a && a.name ? a.name : s, ": $")
                      .concat(s);
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.queryFieldsMap = function (t) {
            var r = this;
            return t
              ? t
                  .map(function (n) {
                    if ((0, TT.isNestedField)(n))
                      return e.queryNestedFieldMap(n);
                    if (typeof n == "object") {
                      var i = "";
                      return (
                        Object.entries(n).forEach(function (s, a, o) {
                          var u = s[0],
                            l = s[1];
                          (i += ""
                            .concat(u, " ")
                            .concat(
                              l.length > 0
                                ? "{ " + r.queryFieldsMap(l) + " }"
                                : ""
                            )),
                            a < o.length - 1 && (i += ", ");
                        }),
                        i
                      );
                    } else return "".concat(n);
                  })
                  .join(", ")
              : "";
          }),
          (e.queryNestedFieldMap = function (t) {
            return ""
              .concat(t.operation, " ")
              .concat(this.queryDataNameAndArgumentMap(t.variables), " ")
              .concat(
                t.fields.length > 0
                  ? "{ " + this.queryFieldsMap(t.fields) + " }"
                  : ""
              );
          }),
          (e.queryVariablesMap = function (t, r) {
            var n = {},
              i = function (s) {
                s &&
                  Object.keys(s).map(function (a) {
                    n[a] = typeof s[a] == "object" ? s[a].value : s[a];
                  });
              };
            return (
              i(t), r && typeof r == "object" && i(e.getNestedVariables(r)), n
            );
          }),
          (e.getNestedVariables = function (t) {
            var r = {};
            function n(i) {
              return (
                i == null ||
                  i.forEach(function (s) {
                    if ((0, TT.isNestedField)(s))
                      r = yn(
                        yn(yn({}, s.variables), r),
                        s.fields && n(s.fields)
                      );
                    else if (typeof s == "object")
                      for (
                        var a = 0, o = Object.entries(s);
                        a < o.length;
                        a++
                      ) {
                        var u = o[a],
                          l = u[1];
                        n(l);
                      }
                  }),
                r
              );
            }
            return n(t), r;
          }),
          (e.queryDataType = function (t) {
            var r = "String",
              n = typeof t == "object" ? t.value : t;
            if ((t == null ? void 0 : t.type) != null) r = t.type;
            else {
              var i = Array.isArray(n) ? n[0] : n;
              switch (typeof i) {
                case "object":
                  r = "Object";
                  break;
                case "boolean":
                  r = "Boolean";
                  break;
                case "number":
                  r = i % 1 == 0 ? "Int" : "Float";
                  break;
              }
            }
            return (
              typeof t == "object" &&
                (t.list === !0
                  ? (r = "[".concat(r, "]"))
                  : Array.isArray(t.list) &&
                    (r = "[".concat(r).concat(t.list[0] ? "!" : "", "]")),
                t.required && (r += "!")),
              r
            );
          }),
          e
        );
      })();
    ha.default = Mx;
  });
  var _T = f((ty) => {
    "use strict";
    Object.defineProperty(ty, "__esModule", { value: !0 });
    var xx = Vi(),
      Uu = Ki(),
      Cx = (function () {
        function e(t) {
          Array.isArray(t)
            ? (this.variables = Uu.default.resolveVariables(t))
            : ((this.variables = t.variables),
              (this.fields = t.fields),
              (this.operation = t.operation));
        }
        return (
          (e.prototype.mutationBuilder = function () {
            return this.operationWrapperTemplate(
              this.variables,
              this.operationTemplate(this.operation)
            );
          }),
          (e.prototype.mutationsBuilder = function (t) {
            var r = this,
              n = t.map(function (i) {
                return (
                  (r.operation = i.operation),
                  (r.variables = i.variables),
                  (r.fields = i.fields),
                  r.operationTemplate(i.operation)
                );
              });
            return this.operationWrapperTemplate(
              Uu.default.resolveVariables(t),
              n.join(`
  `)
            );
          }),
          (e.prototype.queryDataNameAndArgumentMap = function () {
            return this.variables && Object.keys(this.variables).length
              ? "(".concat(
                  Object.keys(this.variables).reduce(function (t, r, n) {
                    return ""
                      .concat(t)
                      .concat(n !== 0 ? ", " : "")
                      .concat(r, ": $")
                      .concat(r);
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.prototype.queryDataArgumentAndTypeMap = function (t) {
            return Object.keys(t).length
              ? "(".concat(
                  Object.keys(t).reduce(function (r, n, i) {
                    return ""
                      .concat(r)
                      .concat(i !== 0 ? ", " : "", "$")
                      .concat(n, ": ")
                      .concat(Uu.default.queryDataType(t[n]));
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.prototype.operationWrapperTemplate = function (t, r) {
            return {
              query: ""
                .concat(xx.default.Mutation, " ")
                .concat(
                  this.operation.charAt(0).toUpperCase() +
                    this.operation.slice(1),
                  " "
                )
                .concat(
                  this.queryDataArgumentAndTypeMap(t),
                  ` {
  `
                )
                .concat(
                  r,
                  `
}`
                ),
              variables: Uu.default.queryVariablesMap(t),
            };
          }),
          (e.prototype.operationTemplate = function (t) {
            return ""
              .concat(t, " ")
              .concat(
                this.queryDataNameAndArgumentMap(),
                ` {
    `
              )
              .concat(
                this.queryFieldsMap(this.fields),
                `
  }`
              );
          }),
          (e.prototype.queryFieldsMap = function (t) {
            var r = this;
            return Array.isArray(t)
              ? t
                  .map(function (n) {
                    return typeof n == "object"
                      ? ""
                          .concat(Object.keys(n)[0], " { ")
                          .concat(r.queryFieldsMap(Object.values(n)[0]), " }")
                      : "".concat(n);
                  })
                  .join(", ")
              : "";
          }),
          e
        );
      })();
    ty.default = Cx;
  });
  var AT = f((ny) => {
    "use strict";
    Object.defineProperty(ny, "__esModule", { value: !0 });
    var kx = Vi(),
      ry = Ki(),
      Gx = (function () {
        function e(t) {
          (this.queryDataType = function (r) {
            var n = "String",
              i = typeof r == "object" ? r.value : r;
            if (r.type !== void 0) n = r.type;
            else
              switch (typeof i) {
                case "object":
                  n = "Object";
                  break;
                case "boolean":
                  n = "Boolean";
                  break;
                case "number":
                  n = i % 1 == 0 ? "Int" : "Float";
                  break;
              }
            return typeof r == "object" && r.required && (n += "!"), n;
          }),
            Array.isArray(t)
              ? (this.variables = ry.default.resolveVariables(t))
              : ((this.variables = t.variables),
                (this.fields = t.fields || []),
                (this.operation = t.operation));
        }
        return (
          (e.prototype.queryBuilder = function () {
            return this.operationWrapperTemplate(this.operationTemplate());
          }),
          (e.prototype.queriesBuilder = function (t) {
            var r = this,
              n = function () {
                var i = [];
                return (
                  t.forEach(function (s) {
                    s &&
                      ((r.operation = s.operation),
                      (r.fields = s.fields),
                      (r.variables = s.variables),
                      i.push(r.operationTemplate()));
                  }),
                  i.join(" ")
                );
              };
            return this.operationWrapperTemplate(n());
          }),
          (e.prototype.queryDataNameAndArgumentMap = function () {
            return this.variables && Object.keys(this.variables).length
              ? "(".concat(
                  Object.keys(this.variables).reduce(function (t, r, n) {
                    return ""
                      .concat(t)
                      .concat(n !== 0 ? ", " : "")
                      .concat(r, ": $")
                      .concat(r);
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.prototype.queryDataArgumentAndTypeMap = function () {
            var t = this;
            return this.variables && Object.keys(this.variables).length
              ? "(".concat(
                  Object.keys(this.variables).reduce(function (r, n, i) {
                    return ""
                      .concat(r)
                      .concat(i !== 0 ? ", " : "", "$")
                      .concat(n, ": ")
                      .concat(t.queryDataType(t.variables[n]));
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.prototype.operationWrapperTemplate = function (t) {
            return {
              query: ""
                .concat(kx.default.Query, " ")
                .concat(this.operation.charAt(0).toUpperCase())
                .concat(this.operation.slice(1), " ")
                .concat(this.queryDataArgumentAndTypeMap(), " { ")
                .concat(t, " }"),
              variables: ry.default.queryVariablesMap(this.variables),
            };
          }),
          (e.prototype.operationTemplate = function () {
            return ""
              .concat(this.operation, " ")
              .concat(this.queryDataNameAndArgumentMap(), " { nodes { ")
              .concat(ry.default.queryFieldsMap(this.fields), " } }");
          }),
          e
        );
      })();
    ny.default = Gx;
  });
  var ET = f((iy) => {
    "use strict";
    Object.defineProperty(iy, "__esModule", { value: !0 });
    var Qx = _T(),
      Ux = AT();
    iy.default = {
      DefaultAppSyncQueryAdapter: Ux.default,
      DefaultAppSyncMutationAdapter: Qx.default,
    };
  });
  var IT = f((ma) => {
    "use strict";
    var Vu =
      (ma && ma.__assign) ||
      function () {
        return (
          (Vu =
            Object.assign ||
            function (e) {
              for (var t, r = 1, n = arguments.length; r < n; r++) {
                t = arguments[r];
                for (var i in t)
                  Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
              }
              return e;
            }),
          Vu.apply(this, arguments)
        );
      };
    Object.defineProperty(ma, "__esModule", { value: !0 });
    var NT = Vi(),
      Wn = Ki(),
      Vx = (function () {
        function e(t) {
          Array.isArray(t)
            ? (this.variables = Wn.default.resolveVariables(t))
            : ((this.variables = t.variables),
              (this.fields = t.fields),
              (this.operation = t.operation));
        }
        return (
          (e.prototype.mutationBuilder = function () {
            return this.operationWrapperTemplate(
              NT.default.Mutation,
              this.variables,
              this.operationTemplate(this.operation)
            );
          }),
          (e.prototype.mutationsBuilder = function (t) {
            var r = this,
              n = t.map(function (i) {
                return (
                  (r.operation = i.operation),
                  (r.variables = i.variables),
                  (r.fields = i.fields),
                  r.operationTemplate(i.operation)
                );
              });
            return this.operationWrapperTemplate(
              NT.default.Mutation,
              Wn.default.resolveVariables(t),
              n.join(`
  `)
            );
          }),
          (e.prototype.queryDataArgumentAndTypeMap = function (t) {
            return (
              this.fields &&
                typeof this.fields == "object" &&
                (t = Vu(Vu({}, Wn.default.getNestedVariables(this.fields)), t)),
              t && Object.keys(t).length > 0
                ? "(".concat(
                    Object.keys(t).reduce(function (r, n, i) {
                      return ""
                        .concat(r)
                        .concat(i !== 0 ? ", " : "", "$")
                        .concat(n, ": ")
                        .concat(Wn.default.queryDataType(t[n]));
                    }, ""),
                    ")"
                  )
                : ""
            );
          }),
          (e.prototype.operationWrapperTemplate = function (t, r, n) {
            return {
              query: ""
                .concat(t, " ")
                .concat(
                  this.queryDataArgumentAndTypeMap(r),
                  ` {
  `
                )
                .concat(
                  n,
                  `
}`
                ),
              variables: Wn.default.queryVariablesMap(r, this.fields),
            };
          }),
          (e.prototype.operationTemplate = function (t) {
            return ""
              .concat(t, " ")
              .concat(
                Wn.default.queryDataNameAndArgumentMap(this.variables),
                " "
              )
              .concat(
                this.fields && this.fields.length > 0
                  ? `{
    `.concat(
                      Wn.default.queryFieldsMap(this.fields),
                      `
  }`
                    )
                  : ""
              );
          }),
          e
        );
      })();
    ma.default = Vx;
  });
  var jT = f((ga) => {
    "use strict";
    var Ku =
      (ga && ga.__assign) ||
      function () {
        return (
          (Ku =
            Object.assign ||
            function (e) {
              for (var t, r = 1, n = arguments.length; r < n; r++) {
                t = arguments[r];
                for (var i in t)
                  Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
              }
              return e;
            }),
          Ku.apply(this, arguments)
        );
      };
    Object.defineProperty(ga, "__esModule", { value: !0 });
    var Kx = Vi(),
      $i = Ki(),
      $x = (function () {
        function e(t, r) {
          var n = this;
          (this.config = { operationName: "" }),
            r &&
              Object.entries(r).forEach(function (i) {
                var s = i[0],
                  a = i[1];
                n.config[s] = a;
              }),
            Array.isArray(t)
              ? (this.variables = $i.default.resolveVariables(t))
              : ((this.variables = t.variables),
                (this.fields = t.fields || []),
                (this.operation = t.operation));
        }
        return (
          (e.prototype.queryBuilder = function () {
            return this.operationWrapperTemplate(
              this.operationTemplate(this.variables)
            );
          }),
          (e.prototype.queriesBuilder = function (t) {
            var r = this,
              n = function () {
                var i = [];
                return (
                  t.forEach(function (s) {
                    s &&
                      ((r.operation = s.operation),
                      (r.fields = s.fields),
                      i.push(r.operationTemplate(s.variables)));
                  }),
                  i.join(" ")
                );
              };
            return this.operationWrapperTemplate(n());
          }),
          (e.prototype.queryDataArgumentAndTypeMap = function () {
            var t = this.variables;
            return (
              this.fields &&
                typeof this.fields == "object" &&
                (t = Ku(Ku({}, $i.default.getNestedVariables(this.fields)), t)),
              t && Object.keys(t).length > 0
                ? "(".concat(
                    Object.keys(t).reduce(function (r, n, i) {
                      return ""
                        .concat(r)
                        .concat(i !== 0 ? ", " : "", "$")
                        .concat(n, ": ")
                        .concat($i.default.queryDataType(t[n]));
                    }, ""),
                    ")"
                  )
                : ""
            );
          }),
          (e.prototype.operationWrapperTemplate = function (t) {
            var r = ""
              .concat(Kx.default.Query, " ")
              .concat(this.queryDataArgumentAndTypeMap(), " { ")
              .concat(t, " }");
            return (
              (r = r.replace(
                "query",
                "query".concat(
                  this.config.operationName !== ""
                    ? " " + this.config.operationName
                    : ""
                )
              )),
              {
                query: r,
                variables: $i.default.queryVariablesMap(
                  this.variables,
                  this.fields
                ),
              }
            );
          }),
          (e.prototype.operationTemplate = function (t) {
            return ""
              .concat(this.operation, " ")
              .concat(t ? $i.default.queryDataNameAndArgumentMap(t) : "", " ")
              .concat(
                this.fields && this.fields.length > 0
                  ? "{ " + $i.default.queryFieldsMap(this.fields) + " }"
                  : ""
              );
          }),
          e
        );
      })();
    ga.default = $x;
  });
  var wT = f((sy) => {
    "use strict";
    Object.defineProperty(sy, "__esModule", { value: !0 });
    var PT = Vi(),
      $u = Ki(),
      Bx = (function () {
        function e(t) {
          Array.isArray(t)
            ? (this.variables = $u.default.resolveVariables(t))
            : ((this.variables = t.variables),
              (this.fields = t.fields),
              (this.operation = t.operation));
        }
        return (
          (e.prototype.subscriptionBuilder = function () {
            return this.operationWrapperTemplate(
              PT.default.Subscription,
              this.variables,
              this.operationTemplate(this.operation)
            );
          }),
          (e.prototype.subscriptionsBuilder = function (t) {
            var r = this,
              n = t.map(function (i) {
                return (
                  (r.operation = i.operation),
                  (r.variables = i.variables),
                  (r.fields = i.fields),
                  r.operationTemplate(i.operation)
                );
              });
            return this.operationWrapperTemplate(
              PT.default.Subscription,
              $u.default.resolveVariables(t),
              n.join(`
  `)
            );
          }),
          (e.prototype.queryDataNameAndArgumentMap = function () {
            return this.variables && Object.keys(this.variables).length
              ? "(".concat(
                  Object.keys(this.variables).reduce(function (t, r, n) {
                    return ""
                      .concat(t)
                      .concat(n !== 0 ? ", " : "")
                      .concat(r, ": $")
                      .concat(r);
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.prototype.queryDataArgumentAndTypeMap = function (t) {
            return Object.keys(t).length
              ? "(".concat(
                  Object.keys(t).reduce(function (r, n, i) {
                    return ""
                      .concat(r)
                      .concat(i !== 0 ? ", " : "", "$")
                      .concat(n, ": ")
                      .concat($u.default.queryDataType(t[n]));
                  }, ""),
                  ")"
                )
              : "";
          }),
          (e.prototype.operationWrapperTemplate = function (t, r, n) {
            return {
              query: ""
                .concat(t, " ")
                .concat(
                  this.queryDataArgumentAndTypeMap(r),
                  ` {
  `
                )
                .concat(
                  n,
                  `
}`
                ),
              variables: $u.default.queryVariablesMap(r),
            };
          }),
          (e.prototype.operationTemplate = function (t) {
            return ""
              .concat(t, " ")
              .concat(
                this.queryDataNameAndArgumentMap(),
                ` {
    `
              )
              .concat(
                this.queryFieldsMap(this.fields),
                `
  }`
              );
          }),
          (e.prototype.queryFieldsMap = function (t) {
            var r = this;
            return t
              ? t
                  .map(function (n) {
                    return typeof n == "object"
                      ? ""
                          .concat(Object.keys(n)[0], " { ")
                          .concat(r.queryFieldsMap(Object.values(n)[0]), " }")
                      : "".concat(n);
                  })
                  .join(", ")
              : "";
          }),
          e
        );
      })();
    sy.default = Bx;
  });
  var ay = f((Rr) => {
    "use strict";
    Object.defineProperty(Rr, "__esModule", { value: !0 });
    Rr.adapters = Rr.query = Rr.mutation = Rr.subscription = void 0;
    var zx = ET();
    Rr.adapters = zx.default;
    var DT = IT(),
      RT = jT(),
      LT = wT();
    function Wx(e, t, r) {
      var n;
      if (Array.isArray(e)) {
        if (t) {
          var i = new t(e, r);
          return i.queriesBuilder(e);
        }
        return (n = new RT.default(e, r)), n.queriesBuilder(e);
      }
      if (t) {
        var i = new t(e, r);
        return i.queryBuilder();
      }
      return (n = new RT.default(e, r)), n.queryBuilder();
    }
    Rr.query = Wx;
    function Yx(e, t) {
      var r, n;
      return Array.isArray(e)
        ? t
          ? ((r = new t(e)), r.mutationsBuilder(e))
          : ((n = new DT.default(e)), n.mutationsBuilder(e))
        : t
        ? ((r = new t(e)), r.mutationBuilder())
        : ((n = new DT.default(e)), n.mutationBuilder());
    }
    Rr.mutation = Yx;
    function Hx(e, t) {
      var r, n;
      return Array.isArray(e)
        ? t
          ? ((r = new t(e)), r.subscriptionsBuilder(e))
          : ((n = new LT.default(e)), n.subscriptionsBuilder(e))
        : t
        ? ((r = new t(e)), r.subscriptionBuilder())
        : ((n = new LT.default(e)), n.subscriptionBuilder());
    }
    Rr.subscription = Hx;
  });
  var xT = f((Pe) => {
    "use strict";
    Object.defineProperty(Pe, "__esModule", { value: !0 });
    Pe.InternalModelManager =
      Pe.internalDeleteManyMutation =
      Pe.internalDeleteMutation =
      Pe.internalUpdateMutation =
      Pe.internalCreateMutation =
      Pe.internalFindManyQuery =
      Pe.internalFindFirstQuery =
      Pe.internalFindOneQuery =
        void 0;
    var FT = ay(),
      qT = Gu(),
      Le = dn(),
      Bu = `
fragment InternalErrorsDetails on ExecutionError {
  code
  message
  ...on InvalidRecordError {
    validationErrors {
      apiIdentifier
      message
    }
    model {
      apiIdentifier
    }
    record
  }
}
`,
      va = (e) => `
  gadgetMeta {
    hydrations(modelName: "${e}")
  }
`,
      Jx = (e) => `
    query InternalFind${(0, Le.capitalize)(e)}($id: GadgetID!) {
      ${va(e)}
      internal {
        ${e}(id: $id)
      }
    }
    `;
    Pe.internalFindOneQuery = Jx;
    var Xx = (e, t) => {
      let r = (0, Le.capitalize)(e),
        n = O(
          O(
            O(
              {},
              (t == null ? void 0 : t.search) && {
                search: {
                  value: t == null ? void 0 : t.search,
                  type: "String",
                  required: !1,
                },
              }
            ),
            (t == null ? void 0 : t.sort) && {
              sort: {
                value: t == null ? void 0 : t.sort,
                type: `${r}Sort!`,
                list: !0,
              },
            }
          ),
          (t == null ? void 0 : t.filter) && {
            filter: {
              value: t == null ? void 0 : t.filter,
              type: `${r}Filter!`,
              list: !0,
            },
          }
        );
      return (0, FT.query)(
        [
          {
            operation: "internal",
            fields: [
              {
                operation: `list${r}`,
                fields: [{ edges: ["node"] }],
                variables: N(O({}, n), { first: { value: 1, type: "Int" } }),
              },
            ],
          },
        ],
        null,
        { operationName: `InternalFindFirst${r}` }
      );
    };
    Pe.internalFindFirstQuery = Xx;
    var Zx = (e, t) => {
      let r = (0, Le.capitalize)(e),
        n = O(
          O(
            O(
              {},
              (t == null ? void 0 : t.search) && {
                search: {
                  value: t == null ? void 0 : t.search,
                  type: "String",
                  required: !1,
                },
              }
            ),
            (t == null ? void 0 : t.sort) && {
              sort: {
                value: t == null ? void 0 : t.sort,
                type: `${r}Sort!`,
                list: !0,
              },
            }
          ),
          (t == null ? void 0 : t.filter) && {
            filter: {
              value: t == null ? void 0 : t.filter,
              type: `${r}Filter!`,
              list: !0,
            },
          }
        );
      return (0, FT.query)(
        [
          {
            operation: "internal",
            fields: [
              {
                operation: `list${r}`,
                fields: [
                  {
                    pageInfo: [
                      "hasNextPage",
                      "hasPreviousPage",
                      "startCursor",
                      "endCursor",
                    ],
                  },
                  { edges: ["cursor", "node"] },
                ],
                variables: N(O({}, n), {
                  after: {
                    value: t == null ? void 0 : t.after,
                    type: "String",
                  },
                  before: {
                    value: t == null ? void 0 : t.before,
                    type: "String",
                  },
                  first: { value: t == null ? void 0 : t.first, type: "Int" },
                  last: { value: t == null ? void 0 : t.last, type: "Int" },
                }),
              },
            ],
          },
        ],
        null,
        { operationName: `InternalFindMany${r}` }
      );
    };
    Pe.internalFindManyQuery = Zx;
    var eC = (e) => {
      let t = (0, Le.capitalize)(e);
      return `
    ${Bu}
    
    mutation InternalCreate${t}($record: Internal${t}Input) {
      ${va(e)}
      internal {
        create${t}(${e}: $record) {
          success
          errors {
            ... InternalErrorsDetails
          }
          ${e}
        }
      }
    }
  `;
    };
    Pe.internalCreateMutation = eC;
    var tC = (e) => {
      let t = (0, Le.capitalize)(e);
      return `
    ${Bu}
    
    mutation InternalUpdate${t}($id: GadgetID!, $record: Internal${t}Input) {
      ${va(e)}
      internal {
        update${t}(id: $id, ${e}: $record) {
          success
          errors {
            ... InternalErrorsDetails
          }
          ${e}
        }
      }
    }
  `;
    };
    Pe.internalUpdateMutation = tC;
    var rC = (e) => {
      let t = (0, Le.capitalize)(e);
      return `
    ${Bu}
    
    mutation InternalDelete${t}($id: GadgetID!) {
      ${va(e)}
      internal {
        delete${t}(id: $id) {
          success
          errors {
            ... InternalErrorsDetails
          }
        }
      }
    }
  `;
    };
    Pe.internalDeleteMutation = rC;
    var nC = (e) => {
      let t = (0, Le.capitalize)(e);
      return `
    ${Bu}
    
    mutation InternalDeleteMany${t}(
      $search: String
      $filter: [${t}Filter!]
    ) {
      ${va(e)}
      internal {
        deleteMany${t}(search: $search, filter: $filter) {
          success
          errors {
            ... InternalErrorsDetails
          }
        }
      }
    }
  `;
    };
    Pe.internalDeleteManyMutation = nC;
    var MT = class {
      constructor(t, r) {
        Object.defineProperty(this, "apiIdentifier", {
          enumerable: !0,
          configurable: !0,
          writable: !0,
          value: t,
        }),
          Object.defineProperty(this, "connection", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: r,
          }),
          Object.defineProperty(this, "capitalizedApiIdentifier", {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: void 0,
          }),
          (this.capitalizedApiIdentifier = (0, Le.camelize)(t));
      }
      findOne(t, r = !0) {
        return y(this, null, function* () {
          let n = yield this.connection.currentClient
              .query((0, Pe.internalFindOneQuery)(this.apiIdentifier), {
                id: t,
              })
              .toPromise(),
            s = (
              r ? Le.assertOperationSuccess : Le.assertNullableOperationSuccess
            )(n, ["internal", this.apiIdentifier]);
          return yield (0, Le.hydrateRecord)(n, s);
        });
      }
      maybeFindOne(t) {
        return y(this, null, function* () {
          let r = yield this.findOne(t, !1);
          return r.isEmpty() ? null : r;
        });
      }
      findMany(t) {
        return y(this, null, function* () {
          let r = (0, Pe.internalFindManyQuery)(this.apiIdentifier, t),
            n = yield this.connection.currentClient
              .query(r.query, r.variables)
              .toPromise(),
            i = (0, Le.assertNullableOperationSuccess)(n, [
              "internal",
              `list${this.capitalizedApiIdentifier}`,
            ]),
            s = (0, Le.hydrateConnection)(n, i);
          return qT.GadgetRecordList.boot(this, s, {
            options: t,
            pageInfo: i.pageInfo,
          });
        });
      }
      findFirst(t, r = !0) {
        return y(this, null, function* () {
          let n = (0, Pe.internalFindFirstQuery)(this.apiIdentifier, t),
            i = yield this.connection.currentClient
              .query(n.query, n.variables)
              .toPromise(),
            s;
          r === !1
            ? (s = (0, Le.assertNullableOperationSuccess)(i, [
                "internal",
                `list${this.capitalizedApiIdentifier}`,
              ]))
            : (s = (0, Le.assertOperationSuccess)(
                i,
                ["internal", `list${this.capitalizedApiIdentifier}`],
                r
              ));
          let a = (0, Le.hydrateConnection)(i, s);
          return qT.GadgetRecordList.boot(this, a, {
            options: t,
            pageInfo: s.pageInfo,
          })[0];
        });
      }
      maybeFindFirst(t) {
        return y(this, null, function* () {
          return yield this.findFirst(t, !1);
        });
      }
      create(t) {
        return y(this, null, function* () {
          return yield this.transaction((r) =>
            y(this, null, function* () {
              let n = yield r.client
                  .mutation(
                    (0, Pe.internalCreateMutation)(this.apiIdentifier),
                    { record: t[this.apiIdentifier] }
                  )
                  .toPromise(),
                i = (0, Le.assertMutationSuccess)(n, [
                  "internal",
                  `create${this.capitalizedApiIdentifier}`,
                ]);
              return yield (0, Le.hydrateRecord)(n, i[this.apiIdentifier]);
            })
          );
        });
      }
      update(t, r) {
        return y(this, null, function* () {
          return (
            (0, Le.assert)(t, "Can't update a record without an ID passed"),
            yield this.transaction((n) =>
              y(this, null, function* () {
                let i = yield n.client
                    .mutation(
                      (0, Pe.internalUpdateMutation)(this.apiIdentifier),
                      { id: t, record: r[this.apiIdentifier] }
                    )
                    .toPromise(),
                  s = (0, Le.assertMutationSuccess)(i, [
                    "internal",
                    `update${this.capitalizedApiIdentifier}`,
                  ]);
                return yield (0, Le.hydrateRecord)(i, s[this.apiIdentifier]);
              })
            )
          );
        });
      }
      delete(t) {
        return y(this, null, function* () {
          return (
            (0, Le.assert)(t, "Can't delete a record without an ID"),
            yield this.transaction((r) =>
              y(this, null, function* () {
                let n = yield r.client
                  .mutation(
                    (0, Pe.internalDeleteMutation)(this.apiIdentifier),
                    { id: t }
                  )
                  .toPromise();
                (0,
                Le.assertMutationSuccess)(n, ["internal", `delete${this.capitalizedApiIdentifier}`]);
              })
            )
          );
        });
      }
      deleteMany(t) {
        return y(this, null, function* () {
          return yield this.transaction((r) =>
            y(this, null, function* () {
              let n = yield r.client
                .mutation(
                  (0, Pe.internalDeleteManyMutation)(this.apiIdentifier),
                  t
                )
                .toPromise();
              (0,
              Le.assertMutationSuccess)(n, ["internal", `deleteMany${this.capitalizedApiIdentifier}`]);
            })
          );
        });
      }
      transaction(t) {
        return y(this, null, function* () {
          return yield this.connection.transaction(t);
        });
      }
    };
    Pe.InternalModelManager = MT;
  });
  var kT = f((CT) => {
    "use strict";
    Object.defineProperty(CT, "__esModule", { value: !0 });
  });
  var uy = f((Ut) => {
    "use strict";
    Object.defineProperty(Ut, "__esModule", { value: !0 });
    Ut.globalActionOperation =
      Ut.actionOperation =
      Ut.findManyOperation =
      Ut.findOneByFieldOperation =
      Ut.findOneOperation =
        void 0;
    var zu = ay(),
      ba = Ue(),
      oy = (e) => ({
        operation: "gadgetMeta",
        fields: [`hydrations(modelName: "${e}")`],
      }),
      iC = (e, t, r, n, i) => {
        let s = {};
        return (
          typeof t != "undefined" &&
            (s.id = { type: "GadgetID", required: !0, value: t }),
          (0, zu.query)([
            {
              operation: e,
              fields: (0, ba.fieldSelectionToGQLBuilderFields)(
                (i == null ? void 0 : i.select) || r,
                !0
              ),
              variables: s,
            },
            oy(n),
          ])
        );
      };
    Ut.findOneOperation = iC;
    var sC = (e, t, r, n, i, s) =>
      (0, Ut.findManyOperation)(e, n, i, {
        select: s == null ? void 0 : s.select,
        first: 2,
        filter: { [t]: { equals: r } },
      });
    Ut.findOneByFieldOperation = sC;
    var aC = (e, t, r, n) =>
      (0, zu.query)([
        {
          operation: e,
          fields: [
            {
              pageInfo: [
                "hasNextPage",
                "hasPreviousPage",
                "startCursor",
                "endCursor",
              ],
            },
            {
              edges: [
                "cursor",
                {
                  node: (0, ba.fieldSelectionToGQLBuilderFields)(
                    (n == null ? void 0 : n.select) || t,
                    !0
                  ),
                },
              ],
            },
          ],
          variables: O(
            O(
              O(
                {
                  after: {
                    value: n == null ? void 0 : n.after,
                    type: "String",
                    required: !1,
                  },
                  first: {
                    value: n == null ? void 0 : n.first,
                    type: "Int",
                    required: !1,
                  },
                  before: {
                    value: n == null ? void 0 : n.before,
                    type: "String",
                    required: !1,
                  },
                  last: {
                    value: n == null ? void 0 : n.last,
                    type: "Int",
                    required: !1,
                  },
                },
                (n == null ? void 0 : n.sort) && {
                  sort: {
                    value: n == null ? void 0 : n.sort,
                    type: (0, ba.sortTypeName)(r) + "!",
                    list: !0,
                  },
                }
              ),
              (n == null ? void 0 : n.filter) && {
                filter: {
                  value: n == null ? void 0 : n.filter,
                  type: (0, ba.filterTypeName)(r) + "!",
                  list: !0,
                },
              }
            ),
            (n == null ? void 0 : n.search) && {
              search: {
                value: n == null ? void 0 : n.search,
                type: "String",
                required: !1,
              },
            }
          ),
        },
        oy(r),
      ]);
    Ut.findManyOperation = aC;
    var oC = (e, t, r, n, i, s, a) => {
      let o = {
          operation: e,
          fields: [
            "success",
            {
              errors: [
                "message",
                "code",
                {
                  "... on InvalidRecordError": [
                    { validationErrors: ["message", "apiIdentifier"] },
                  ],
                },
              ],
            },
          ],
          variables: i,
        },
        u = (s == null ? void 0 : s.select) || t;
      return (
        u &&
          o.fields.push({
            [n]: (0, ba.fieldSelectionToGQLBuilderFields)(u, !0),
          }),
        a && (o = { operation: a, fields: [o] }),
        (0, zu.mutation)([o, oy(r)])
      );
    };
    Ut.actionOperation = oC;
    var uC = (e, t, r) => {
      let n = {
          operation: e,
          fields: [
            "success",
            {
              errors: [
                "message",
                "code",
                {
                  "... on InvalidRecordError": [
                    { validationErrors: ["message", "apiIdentifier"] },
                  ],
                },
              ],
            },
            "result",
          ],
          variables: t,
        },
        i = [e];
      return (
        r && ((n = { operation: r, fields: [n] }), i.unshift(r)),
        (0, zu.mutation)([n])
      );
    };
    Ut.globalActionOperation = uC;
  });
  var GT = f((ut) => {
    "use strict";
    Object.defineProperty(ut, "__esModule", { value: !0 });
    ut.globalActionRunner =
      ut.actionRunner =
      ut.findManyRunner =
      ut.findOneByFieldRunner =
      ut.findOneRunner =
        void 0;
    var Wu = Ue(),
      lC = Gu(),
      cC = uy(),
      wt = dn(),
      pC = (e, t, r, n, i, s, a = !0) =>
        y(ut, null, function* () {
          let o = (0, cC.findOneOperation)(t, r, n, i, s),
            u = yield e.connection.currentClient
              .query(o.query, o.variables)
              .toPromise(),
            c = (
              a ? wt.assertOperationSuccess : wt.assertNullableOperationSuccess
            )(u, [t]);
          return (0, wt.hydrateRecord)(u, c);
        });
    ut.findOneRunner = pC;
    var dC = (e, t, r, n, i, s, a) =>
      y(ut, null, function* () {
        let o = (0, Wu.findOneByFieldOperation)(t, r, n, i, s, a),
          u = yield e.connection.currentClient
            .query(o.query, o.variables)
            .toPromise(),
          l = (0, wt.assertOperationSuccess)(u, [t]),
          c = (0, wt.hydrateConnection)(u, l);
        if (c.length > 1) throw (0, wt.getNonUniqueDataError)(s, r, n);
        return c[0];
      });
    ut.findOneByFieldRunner = dC;
    var fC = (e, t, r, n, i, s) =>
      y(ut, null, function* () {
        let a = (0, Wu.findManyOperation)(t, r, n, i),
          o = yield e.connection.currentClient
            .query(a.query, a.variables)
            .toPromise(),
          u;
        s === !1
          ? (u = (0, wt.assertNullableOperationSuccess)(o, [t]))
          : (u = (0, wt.assertOperationSuccess)(o, [t], s));
        let l = (0, wt.hydrateConnection)(o, u);
        return lC.GadgetRecordList.boot(e, l, {
          options: i,
          pageInfo: u.pageInfo,
        });
      });
    ut.findManyRunner = fC;
    var yC = (e, t, r, n, i, s, a, o, u) =>
      y(ut, null, function* () {
        let l = (0, Wu.actionOperation)(t, r, n, i, a, o, u),
          c = yield e.connection.currentClient
            .mutation(l.query, l.variables)
            .toPromise(),
          d = u ? [u, t] : [t],
          p = s ? (0, wt.get)(c.data, d) : (0, wt.assertMutationSuccess)(c, d);
        if (r != null)
          return s
            ? (0, wt.hydrateRecordArray)(c, p[i])
            : (0, wt.hydrateRecord)(c, p[i]);
      });
    ut.actionRunner = yC;
    var hC = (e, t, r, n) =>
      y(ut, null, function* () {
        let i = (0, Wu.globalActionOperation)(t, r, n),
          s = yield e.currentClient.mutation(i.query, i.variables).toPromise(),
          a = n ? [n, t] : [t];
        return (0, wt.assertMutationSuccess)(s, a).result;
      });
    ut.globalActionRunner = hC;
  });
  var UT = f((QT) => {
    "use strict";
    Object.defineProperty(QT, "__esModule", { value: !0 });
  });
  var Ue = f((ke) => {
    "use strict";
    var mC =
        (ke && ke.__createBinding) ||
        (Object.create
          ? function (e, t, r, n) {
              n === void 0 && (n = r);
              var i = Object.getOwnPropertyDescriptor(t, r);
              (!i ||
                ("get" in i ? !t.__esModule : i.writable || i.configurable)) &&
                (i = {
                  enumerable: !0,
                  get: function () {
                    return t[r];
                  },
                }),
                Object.defineProperty(e, n, i);
            }
          : function (e, t, r, n) {
              n === void 0 && (n = r), (e[n] = t[r]);
            }),
      yt =
        (ke && ke.__exportStar) ||
        function (e, t) {
          for (var r in e)
            r !== "default" &&
              !Object.prototype.hasOwnProperty.call(t, r) &&
              mC(t, e, r);
        };
    Object.defineProperty(ke, "__esModule", { value: !0 });
    yt(jy(), ke);
    yt(Ju(), ke);
    yt(Xu(), ke);
    yt(wy(), ke);
    yt(vT(), ke);
    yt(OT(), ke);
    yt(zf(), ke);
    yt(Gu(), ke);
    yt(Hf(), ke);
    yt(Jf(), ke);
    yt(xT(), ke);
    yt(kT(), ke);
    yt(uy(), ke);
    yt(GT(), ke);
    yt(dn(), ke);
    yt(UT(), ke);
  });
  var Wr = st(Ue());
  var St = st(Ue());
  var ht = st(Ue()),
    $e = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      email: !0,
      roles: { key: !0, name: !0 },
      sessions: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            user: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              email: !0,
              roles: { key: !0, name: !0 },
            },
            roles: { key: !0, name: !0 },
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
            shopifySID: !0,
          },
        },
      },
    },
    ly = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.findOneRunner)(this, "user", t, $e, "user", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "user",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, ht.findOneRunner)(
                this,
                "user",
                t,
                $e,
                "user",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "user",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0, ht.findManyRunner)(this, "users", $e, "user", t);
            }),
          {
            type: "findMany",
            operationName: "users",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              ht.findManyRunner)(this, "users", $e, "user", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "users",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, ht.findManyRunner)(
                this,
                "users",
                $e,
                "user",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "users",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.findOneByFieldRunner)(this, "users", "id", t, $e, "user", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "users",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findByEmail = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.findOneByFieldRunner)(this, "users", "email", t, $e, "user", r);
            }),
          {
            type: "findOne",
            findByVariableName: "email",
            operationName: "users",
            modelApiIdentifier: "user",
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.actionRunner)(this, "deleteUser", null, "user", "user", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteUser",
            namespace: null,
            modelApiIdentifier: "user",
            modelSelectionField: "user",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.actionRunner)(this, "bulkDeleteUsers", null, "user", "users", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteUsers",
            namespace: null,
            modelApiIdentifier: "user",
            modelSelectionField: "users",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              ht.actionRunner)(this, "updateUser", $e, "user", "user", !1, { id: { value: t, required: !0, type: "GadgetID" }, user: { value: r.user, required: !1, type: "UpdateUserInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateUser",
            namespace: null,
            modelApiIdentifier: "user",
            modelSelectionField: "user",
            isBulk: !1,
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              user: { required: !1, type: "UpdateUserInput" },
            },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.actionRunner)(this, "createUser", $e, "user", "user", !1, { user: { value: t.user, required: !1, type: "CreateUserInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createUser",
            namespace: null,
            modelApiIdentifier: "user",
            modelSelectionField: "user",
            isBulk: !1,
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { user: { required: !1, type: "CreateUserInput" } },
          }
        );
        this.signUp = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ht.actionRunner)(this, "signUpUser", $e, "user", "user", !1, { user: { value: t.user, required: !1, type: "SignUpUserInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "signUpUser",
            namespace: null,
            modelApiIdentifier: "user",
            modelSelectionField: "user",
            isBulk: !1,
            defaultSelection: $e,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { user: { required: !1, type: "SignUpUserInput" } },
          }
        );
      }
    };
  var tr = st(Ue()),
    mt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      user: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        email: !0,
        roles: { key: !0, name: !0 },
      },
      roles: { key: !0, name: !0 },
      shop: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        address1: !0,
        address2: !0,
        checkoutApiSupported: !0,
        city: !0,
        cookieConsentLevel: !0,
        country: !0,
        countryCode: !0,
        countryName: !0,
        countyTaxes: !0,
        currency: !0,
        customerEmail: !0,
        domain: !0,
        eligibleForCardReaderGiveaway: !0,
        eligibleForPayments: !0,
        email: !0,
        enabledPresentmentCurrencies: !0,
        finances: !0,
        forceSsl: !0,
        googleAppsDomain: !0,
        googleAppsLoginEnabled: !0,
        hasDiscounts: !0,
        hasGiftCards: !0,
        hasStorefront: !0,
        ianaTimezone: !0,
        latitude: !0,
        longitude: !0,
        moneyFormat: !0,
        moneyInEmailsFormat: !0,
        moneyWithCurrencyFormat: !0,
        moneyWithCurrencyInEmailsFormat: !0,
        multiLocationEnabled: !0,
        myshopifyDomain: !0,
        name: !0,
        passwordEnabled: !0,
        phone: !0,
        planDisplayName: !0,
        planName: !0,
        preLaunchEnabled: !0,
        primaryLocale: !0,
        province: !0,
        provinceCode: !0,
        shopifyCreatedAt: !0,
        requiresExtraPaymentsAgreement: !0,
        setupRequired: !0,
        shopOwner: !0,
        source: !0,
        taxShipping: !0,
        taxesIncluded: !0,
        shopifyUpdatedAt: !0,
        timezone: !0,
        weightUnit: !0,
        zipCode: !0,
        grantedScopes: !0,
        accessToken: !0,
        installedViaApiKey: !0,
        registeredWebhooks: !0,
      },
      shopifySID: !0,
    },
    cy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              tr.findOneRunner)(this, "session", t, mt, "session", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "session",
            modelApiIdentifier: "session",
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, tr.findOneRunner)(
                this,
                "session",
                t,
                mt,
                "session",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "session",
            modelApiIdentifier: "session",
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              tr.findManyRunner)(this, "sessions", mt, "session", t);
            }),
          {
            type: "findMany",
            operationName: "sessions",
            modelApiIdentifier: "session",
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              tr.findManyRunner)(this, "sessions", mt, "session", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "sessions",
            modelApiIdentifier: "session",
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, tr.findManyRunner)(
                this,
                "sessions",
                mt,
                "session",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "sessions",
            modelApiIdentifier: "session",
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              tr.findOneByFieldRunner)(this, "sessions", "id", t, mt, "session", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "sessions",
            modelApiIdentifier: "session",
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.logInViaEmail = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              tr.actionRunner)(this, "logInViaEmail", mt, "session", "session", !1, { email: { value: t.email, required: !1, type: "String" }, password: { value: t.password, required: !1, type: "String" } }, r, "currentSession");
            }),
          {
            type: "action",
            operationName: "logInViaEmail",
            namespace: "currentSession",
            modelApiIdentifier: "session",
            modelSelectionField: "session",
            isBulk: !1,
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              email: { required: !1, type: "String" },
              password: { required: !1, type: "String" },
            },
          }
        );
        this.logOut = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              tr.actionRunner)(this, "logOut", mt, "session", "session", !1, {}, t, "currentSession");
            }),
          {
            type: "action",
            operationName: "logOut",
            namespace: "currentSession",
            modelApiIdentifier: "session",
            modelSelectionField: "session",
            isBulk: !1,
            defaultSelection: mt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: {},
            variables: {},
          }
        );
      }
    };
  var rr = st(Ue()),
    Dt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      body: !0,
      handle: !0,
      images: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            height: !0,
            position: !0,
            shopifyCreatedAt: !0,
            source: !0,
            shopifyUpdatedAt: !0,
            product: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              handle: !0,
              shopifyCreatedAt: !0,
              productType: !0,
              publishedAt: !0,
              publishedScope: !0,
              status: !0,
              tags: !0,
              templateSuffix: !0,
              shopifyUpdatedAt: !0,
              title: !0,
              vendor: !0,
            },
            width: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
          },
        },
      },
      shopifyCreatedAt: !0,
      productType: !0,
      publishedAt: !0,
      publishedScope: !0,
      status: !0,
      tags: !0,
      templateSuffix: !0,
      shopifyUpdatedAt: !0,
      title: !0,
      variants: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            barcode: !0,
            compareAtPrice: !0,
            fulfillmentService: !0,
            grams: !0,
            inventoryManagement: !0,
            inventoryPolicy: !0,
            productImage: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              height: !0,
              position: !0,
              shopifyCreatedAt: !0,
              source: !0,
              shopifyUpdatedAt: !0,
              width: !0,
            },
            inventoryQuantity: !0,
            inventoryQuantityAdjustment: !0,
            oldInventoryQuantity: !0,
            option1: !0,
            option2: !0,
            option3: !0,
            position: !0,
            presentmentPrices: !0,
            price: !0,
            product: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              handle: !0,
              shopifyCreatedAt: !0,
              productType: !0,
              publishedAt: !0,
              publishedScope: !0,
              status: !0,
              tags: !0,
              templateSuffix: !0,
              shopifyUpdatedAt: !0,
              title: !0,
              vendor: !0,
            },
            shopifyCreatedAt: !0,
            requiresShipping: !0,
            sku: !0,
            shopifyUpdatedAt: !0,
            taxCode: !0,
            taxable: !0,
            title: !0,
            weight: !0,
            weightUnit: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
          },
        },
      },
      vendor: !0,
      shop: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        address1: !0,
        address2: !0,
        checkoutApiSupported: !0,
        city: !0,
        cookieConsentLevel: !0,
        country: !0,
        countryCode: !0,
        countryName: !0,
        countyTaxes: !0,
        currency: !0,
        customerEmail: !0,
        domain: !0,
        eligibleForCardReaderGiveaway: !0,
        eligibleForPayments: !0,
        email: !0,
        enabledPresentmentCurrencies: !0,
        finances: !0,
        forceSsl: !0,
        googleAppsDomain: !0,
        googleAppsLoginEnabled: !0,
        hasDiscounts: !0,
        hasGiftCards: !0,
        hasStorefront: !0,
        ianaTimezone: !0,
        latitude: !0,
        longitude: !0,
        moneyFormat: !0,
        moneyInEmailsFormat: !0,
        moneyWithCurrencyFormat: !0,
        moneyWithCurrencyInEmailsFormat: !0,
        multiLocationEnabled: !0,
        myshopifyDomain: !0,
        name: !0,
        passwordEnabled: !0,
        phone: !0,
        planDisplayName: !0,
        planName: !0,
        preLaunchEnabled: !0,
        primaryLocale: !0,
        province: !0,
        provinceCode: !0,
        shopifyCreatedAt: !0,
        requiresExtraPaymentsAgreement: !0,
        setupRequired: !0,
        shopOwner: !0,
        source: !0,
        taxShipping: !0,
        taxesIncluded: !0,
        shopifyUpdatedAt: !0,
        timezone: !0,
        weightUnit: !0,
        zipCode: !0,
        grantedScopes: !0,
        accessToken: !0,
        installedViaApiKey: !0,
        registeredWebhooks: !0,
      },
    },
    py = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              rr.findOneRunner)(this, "shopifyProduct", t, Dt, "shopifyProduct", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "shopifyProduct",
            modelApiIdentifier: "shopifyProduct",
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, rr.findOneRunner)(
                this,
                "shopifyProduct",
                t,
                Dt,
                "shopifyProduct",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "shopifyProduct",
            modelApiIdentifier: "shopifyProduct",
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              rr.findManyRunner)(this, "shopifyProducts", Dt, "shopifyProduct", t);
            }),
          {
            type: "findMany",
            operationName: "shopifyProducts",
            modelApiIdentifier: "shopifyProduct",
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              rr.findManyRunner)(this, "shopifyProducts", Dt, "shopifyProduct", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "shopifyProducts",
            modelApiIdentifier: "shopifyProduct",
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, rr.findManyRunner)(
                this,
                "shopifyProducts",
                Dt,
                "shopifyProduct",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "shopifyProducts",
            modelApiIdentifier: "shopifyProduct",
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              rr.actionRunner)(this, "deleteShopifyProduct", null, "shopifyProduct", "shopifyProduct", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteShopifyProduct",
            namespace: null,
            modelApiIdentifier: "shopifyProduct",
            modelSelectionField: "shopifyProduct",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              rr.actionRunner)(this, "bulkDeleteShopifyProducts", null, "shopifyProduct", "shopifyProducts", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteShopifyProducts",
            namespace: null,
            modelApiIdentifier: "shopifyProduct",
            modelSelectionField: "shopifyProducts",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              rr.actionRunner)(this, "updateShopifyProduct", Dt, "shopifyProduct", "shopifyProduct", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifyProduct: { value: r.shopifyProduct, required: !1, type: "UpdateShopifyProductInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateShopifyProduct",
            namespace: null,
            modelApiIdentifier: "shopifyProduct",
            modelSelectionField: "shopifyProduct",
            isBulk: !1,
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifyProduct: {
                required: !1,
                type: "UpdateShopifyProductInput",
              },
            },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              rr.actionRunner)(this, "createShopifyProduct", Dt, "shopifyProduct", "shopifyProduct", !1, { shopifyProduct: { value: t.shopifyProduct, required: !1, type: "CreateShopifyProductInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createShopifyProduct",
            namespace: null,
            modelApiIdentifier: "shopifyProduct",
            modelSelectionField: "shopifyProduct",
            isBulk: !1,
            defaultSelection: Dt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              shopifyProduct: {
                required: !1,
                type: "CreateShopifyProductInput",
              },
            },
          }
        );
      }
    };
  var nr = st(Ue()),
    Rt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      height: !0,
      position: !0,
      shopifyCreatedAt: !0,
      source: !0,
      shopifyUpdatedAt: !0,
      product: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        body: !0,
        handle: !0,
        shopifyCreatedAt: !0,
        productType: !0,
        publishedAt: !0,
        publishedScope: !0,
        status: !0,
        tags: !0,
        templateSuffix: !0,
        shopifyUpdatedAt: !0,
        title: !0,
        vendor: !0,
        shop: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          address1: !0,
          address2: !0,
          checkoutApiSupported: !0,
          city: !0,
          cookieConsentLevel: !0,
          country: !0,
          countryCode: !0,
          countryName: !0,
          countyTaxes: !0,
          currency: !0,
          customerEmail: !0,
          domain: !0,
          eligibleForCardReaderGiveaway: !0,
          eligibleForPayments: !0,
          email: !0,
          enabledPresentmentCurrencies: !0,
          finances: !0,
          forceSsl: !0,
          googleAppsDomain: !0,
          googleAppsLoginEnabled: !0,
          hasDiscounts: !0,
          hasGiftCards: !0,
          hasStorefront: !0,
          ianaTimezone: !0,
          latitude: !0,
          longitude: !0,
          moneyFormat: !0,
          moneyInEmailsFormat: !0,
          moneyWithCurrencyFormat: !0,
          moneyWithCurrencyInEmailsFormat: !0,
          multiLocationEnabled: !0,
          myshopifyDomain: !0,
          name: !0,
          passwordEnabled: !0,
          phone: !0,
          planDisplayName: !0,
          planName: !0,
          preLaunchEnabled: !0,
          primaryLocale: !0,
          province: !0,
          provinceCode: !0,
          shopifyCreatedAt: !0,
          requiresExtraPaymentsAgreement: !0,
          setupRequired: !0,
          shopOwner: !0,
          source: !0,
          taxShipping: !0,
          taxesIncluded: !0,
          shopifyUpdatedAt: !0,
          timezone: !0,
          weightUnit: !0,
          zipCode: !0,
          grantedScopes: !0,
          accessToken: !0,
          installedViaApiKey: !0,
          registeredWebhooks: !0,
        },
      },
      variants: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            barcode: !0,
            compareAtPrice: !0,
            fulfillmentService: !0,
            grams: !0,
            inventoryManagement: !0,
            inventoryPolicy: !0,
            productImage: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              height: !0,
              position: !0,
              shopifyCreatedAt: !0,
              source: !0,
              shopifyUpdatedAt: !0,
              width: !0,
            },
            inventoryQuantity: !0,
            inventoryQuantityAdjustment: !0,
            oldInventoryQuantity: !0,
            option1: !0,
            option2: !0,
            option3: !0,
            position: !0,
            presentmentPrices: !0,
            price: !0,
            product: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              handle: !0,
              shopifyCreatedAt: !0,
              productType: !0,
              publishedAt: !0,
              publishedScope: !0,
              status: !0,
              tags: !0,
              templateSuffix: !0,
              shopifyUpdatedAt: !0,
              title: !0,
              vendor: !0,
            },
            shopifyCreatedAt: !0,
            requiresShipping: !0,
            sku: !0,
            shopifyUpdatedAt: !0,
            taxCode: !0,
            taxable: !0,
            title: !0,
            weight: !0,
            weightUnit: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
          },
        },
      },
      width: !0,
      shop: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        address1: !0,
        address2: !0,
        checkoutApiSupported: !0,
        city: !0,
        cookieConsentLevel: !0,
        country: !0,
        countryCode: !0,
        countryName: !0,
        countyTaxes: !0,
        currency: !0,
        customerEmail: !0,
        domain: !0,
        eligibleForCardReaderGiveaway: !0,
        eligibleForPayments: !0,
        email: !0,
        enabledPresentmentCurrencies: !0,
        finances: !0,
        forceSsl: !0,
        googleAppsDomain: !0,
        googleAppsLoginEnabled: !0,
        hasDiscounts: !0,
        hasGiftCards: !0,
        hasStorefront: !0,
        ianaTimezone: !0,
        latitude: !0,
        longitude: !0,
        moneyFormat: !0,
        moneyInEmailsFormat: !0,
        moneyWithCurrencyFormat: !0,
        moneyWithCurrencyInEmailsFormat: !0,
        multiLocationEnabled: !0,
        myshopifyDomain: !0,
        name: !0,
        passwordEnabled: !0,
        phone: !0,
        planDisplayName: !0,
        planName: !0,
        preLaunchEnabled: !0,
        primaryLocale: !0,
        province: !0,
        provinceCode: !0,
        shopifyCreatedAt: !0,
        requiresExtraPaymentsAgreement: !0,
        setupRequired: !0,
        shopOwner: !0,
        source: !0,
        taxShipping: !0,
        taxesIncluded: !0,
        shopifyUpdatedAt: !0,
        timezone: !0,
        weightUnit: !0,
        zipCode: !0,
        grantedScopes: !0,
        accessToken: !0,
        installedViaApiKey: !0,
        registeredWebhooks: !0,
      },
    },
    dy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              nr.findOneRunner)(this, "shopifyProductImage", t, Rt, "shopifyProductImage", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "shopifyProductImage",
            modelApiIdentifier: "shopifyProductImage",
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, nr.findOneRunner)(
                this,
                "shopifyProductImage",
                t,
                Rt,
                "shopifyProductImage",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "shopifyProductImage",
            modelApiIdentifier: "shopifyProductImage",
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              nr.findManyRunner)(this, "shopifyProductImages", Rt, "shopifyProductImage", t);
            }),
          {
            type: "findMany",
            operationName: "shopifyProductImages",
            modelApiIdentifier: "shopifyProductImage",
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              nr.findManyRunner)(this, "shopifyProductImages", Rt, "shopifyProductImage", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "shopifyProductImages",
            modelApiIdentifier: "shopifyProductImage",
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, nr.findManyRunner)(
                this,
                "shopifyProductImages",
                Rt,
                "shopifyProductImage",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "shopifyProductImages",
            modelApiIdentifier: "shopifyProductImage",
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              nr.actionRunner)(this, "createShopifyProductImage", Rt, "shopifyProductImage", "shopifyProductImage", !1, { shopifyProductImage: { value: t.shopifyProductImage, required: !1, type: "CreateShopifyProductImageInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createShopifyProductImage",
            namespace: null,
            modelApiIdentifier: "shopifyProductImage",
            modelSelectionField: "shopifyProductImage",
            isBulk: !1,
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              shopifyProductImage: {
                required: !1,
                type: "CreateShopifyProductImageInput",
              },
            },
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              nr.actionRunner)(this, "deleteShopifyProductImage", null, "shopifyProductImage", "shopifyProductImage", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteShopifyProductImage",
            namespace: null,
            modelApiIdentifier: "shopifyProductImage",
            modelSelectionField: "shopifyProductImage",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              nr.actionRunner)(this, "bulkDeleteShopifyProductImages", null, "shopifyProductImage", "shopifyProductImages", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteShopifyProductImages",
            namespace: null,
            modelApiIdentifier: "shopifyProductImage",
            modelSelectionField: "shopifyProductImages",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              nr.actionRunner)(this, "updateShopifyProductImage", Rt, "shopifyProductImage", "shopifyProductImage", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifyProductImage: { value: r.shopifyProductImage, required: !1, type: "UpdateShopifyProductImageInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateShopifyProductImage",
            namespace: null,
            modelApiIdentifier: "shopifyProductImage",
            modelSelectionField: "shopifyProductImage",
            isBulk: !1,
            defaultSelection: Rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifyProductImage: {
                required: !1,
                type: "UpdateShopifyProductImageInput",
              },
            },
          }
        );
      }
    };
  var ir = st(Ue()),
    Lt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      barcode: !0,
      compareAtPrice: !0,
      fulfillmentService: !0,
      grams: !0,
      inventoryManagement: !0,
      inventoryPolicy: !0,
      productImage: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        height: !0,
        position: !0,
        shopifyCreatedAt: !0,
        source: !0,
        shopifyUpdatedAt: !0,
        product: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          body: !0,
          handle: !0,
          shopifyCreatedAt: !0,
          productType: !0,
          publishedAt: !0,
          publishedScope: !0,
          status: !0,
          tags: !0,
          templateSuffix: !0,
          shopifyUpdatedAt: !0,
          title: !0,
          vendor: !0,
        },
        width: !0,
        shop: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          address1: !0,
          address2: !0,
          checkoutApiSupported: !0,
          city: !0,
          cookieConsentLevel: !0,
          country: !0,
          countryCode: !0,
          countryName: !0,
          countyTaxes: !0,
          currency: !0,
          customerEmail: !0,
          domain: !0,
          eligibleForCardReaderGiveaway: !0,
          eligibleForPayments: !0,
          email: !0,
          enabledPresentmentCurrencies: !0,
          finances: !0,
          forceSsl: !0,
          googleAppsDomain: !0,
          googleAppsLoginEnabled: !0,
          hasDiscounts: !0,
          hasGiftCards: !0,
          hasStorefront: !0,
          ianaTimezone: !0,
          latitude: !0,
          longitude: !0,
          moneyFormat: !0,
          moneyInEmailsFormat: !0,
          moneyWithCurrencyFormat: !0,
          moneyWithCurrencyInEmailsFormat: !0,
          multiLocationEnabled: !0,
          myshopifyDomain: !0,
          name: !0,
          passwordEnabled: !0,
          phone: !0,
          planDisplayName: !0,
          planName: !0,
          preLaunchEnabled: !0,
          primaryLocale: !0,
          province: !0,
          provinceCode: !0,
          shopifyCreatedAt: !0,
          requiresExtraPaymentsAgreement: !0,
          setupRequired: !0,
          shopOwner: !0,
          source: !0,
          taxShipping: !0,
          taxesIncluded: !0,
          shopifyUpdatedAt: !0,
          timezone: !0,
          weightUnit: !0,
          zipCode: !0,
          grantedScopes: !0,
          accessToken: !0,
          installedViaApiKey: !0,
          registeredWebhooks: !0,
        },
      },
      inventoryQuantity: !0,
      inventoryQuantityAdjustment: !0,
      oldInventoryQuantity: !0,
      option1: !0,
      option2: !0,
      option3: !0,
      position: !0,
      presentmentPrices: !0,
      price: !0,
      product: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        body: !0,
        handle: !0,
        shopifyCreatedAt: !0,
        productType: !0,
        publishedAt: !0,
        publishedScope: !0,
        status: !0,
        tags: !0,
        templateSuffix: !0,
        shopifyUpdatedAt: !0,
        title: !0,
        vendor: !0,
        shop: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          address1: !0,
          address2: !0,
          checkoutApiSupported: !0,
          city: !0,
          cookieConsentLevel: !0,
          country: !0,
          countryCode: !0,
          countryName: !0,
          countyTaxes: !0,
          currency: !0,
          customerEmail: !0,
          domain: !0,
          eligibleForCardReaderGiveaway: !0,
          eligibleForPayments: !0,
          email: !0,
          enabledPresentmentCurrencies: !0,
          finances: !0,
          forceSsl: !0,
          googleAppsDomain: !0,
          googleAppsLoginEnabled: !0,
          hasDiscounts: !0,
          hasGiftCards: !0,
          hasStorefront: !0,
          ianaTimezone: !0,
          latitude: !0,
          longitude: !0,
          moneyFormat: !0,
          moneyInEmailsFormat: !0,
          moneyWithCurrencyFormat: !0,
          moneyWithCurrencyInEmailsFormat: !0,
          multiLocationEnabled: !0,
          myshopifyDomain: !0,
          name: !0,
          passwordEnabled: !0,
          phone: !0,
          planDisplayName: !0,
          planName: !0,
          preLaunchEnabled: !0,
          primaryLocale: !0,
          province: !0,
          provinceCode: !0,
          shopifyCreatedAt: !0,
          requiresExtraPaymentsAgreement: !0,
          setupRequired: !0,
          shopOwner: !0,
          source: !0,
          taxShipping: !0,
          taxesIncluded: !0,
          shopifyUpdatedAt: !0,
          timezone: !0,
          weightUnit: !0,
          zipCode: !0,
          grantedScopes: !0,
          accessToken: !0,
          installedViaApiKey: !0,
          registeredWebhooks: !0,
        },
      },
      shopifyCreatedAt: !0,
      requiresShipping: !0,
      sku: !0,
      shopifyUpdatedAt: !0,
      taxCode: !0,
      taxable: !0,
      title: !0,
      weight: !0,
      weightUnit: !0,
      shop: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        address1: !0,
        address2: !0,
        checkoutApiSupported: !0,
        city: !0,
        cookieConsentLevel: !0,
        country: !0,
        countryCode: !0,
        countryName: !0,
        countyTaxes: !0,
        currency: !0,
        customerEmail: !0,
        domain: !0,
        eligibleForCardReaderGiveaway: !0,
        eligibleForPayments: !0,
        email: !0,
        enabledPresentmentCurrencies: !0,
        finances: !0,
        forceSsl: !0,
        googleAppsDomain: !0,
        googleAppsLoginEnabled: !0,
        hasDiscounts: !0,
        hasGiftCards: !0,
        hasStorefront: !0,
        ianaTimezone: !0,
        latitude: !0,
        longitude: !0,
        moneyFormat: !0,
        moneyInEmailsFormat: !0,
        moneyWithCurrencyFormat: !0,
        moneyWithCurrencyInEmailsFormat: !0,
        multiLocationEnabled: !0,
        myshopifyDomain: !0,
        name: !0,
        passwordEnabled: !0,
        phone: !0,
        planDisplayName: !0,
        planName: !0,
        preLaunchEnabled: !0,
        primaryLocale: !0,
        province: !0,
        provinceCode: !0,
        shopifyCreatedAt: !0,
        requiresExtraPaymentsAgreement: !0,
        setupRequired: !0,
        shopOwner: !0,
        source: !0,
        taxShipping: !0,
        taxesIncluded: !0,
        shopifyUpdatedAt: !0,
        timezone: !0,
        weightUnit: !0,
        zipCode: !0,
        grantedScopes: !0,
        accessToken: !0,
        installedViaApiKey: !0,
        registeredWebhooks: !0,
      },
      results: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            body: !0,
            imageUrl: !0,
            productSuggestion: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              barcode: !0,
              compareAtPrice: !0,
              fulfillmentService: !0,
              grams: !0,
              inventoryManagement: !0,
              inventoryPolicy: !0,
              inventoryQuantity: !0,
              inventoryQuantityAdjustment: !0,
              oldInventoryQuantity: !0,
              option1: !0,
              option2: !0,
              option3: !0,
              position: !0,
              presentmentPrices: !0,
              price: !0,
              shopifyCreatedAt: !0,
              requiresShipping: !0,
              sku: !0,
              shopifyUpdatedAt: !0,
              taxCode: !0,
              taxable: !0,
              title: !0,
              weight: !0,
              weightUnit: !0,
            },
            quiz: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
            },
            answer: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              text: !0,
              sequence: !0,
            },
          },
        },
      },
    },
    fy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ir.findOneRunner)(this, "shopifyProductVariant", t, Lt, "shopifyProductVariant", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "shopifyProductVariant",
            modelApiIdentifier: "shopifyProductVariant",
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, ir.findOneRunner)(
                this,
                "shopifyProductVariant",
                t,
                Lt,
                "shopifyProductVariant",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "shopifyProductVariant",
            modelApiIdentifier: "shopifyProductVariant",
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              ir.findManyRunner)(this, "shopifyProductVariants", Lt, "shopifyProductVariant", t);
            }),
          {
            type: "findMany",
            operationName: "shopifyProductVariants",
            modelApiIdentifier: "shopifyProductVariant",
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              ir.findManyRunner)(this, "shopifyProductVariants", Lt, "shopifyProductVariant", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "shopifyProductVariants",
            modelApiIdentifier: "shopifyProductVariant",
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, ir.findManyRunner)(
                this,
                "shopifyProductVariants",
                Lt,
                "shopifyProductVariant",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "shopifyProductVariants",
            modelApiIdentifier: "shopifyProductVariant",
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              ir.actionRunner)(this, "updateShopifyProductVariant", Lt, "shopifyProductVariant", "shopifyProductVariant", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifyProductVariant: { value: r.shopifyProductVariant, required: !1, type: "UpdateShopifyProductVariantInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateShopifyProductVariant",
            namespace: null,
            modelApiIdentifier: "shopifyProductVariant",
            modelSelectionField: "shopifyProductVariant",
            isBulk: !1,
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifyProductVariant: {
                required: !1,
                type: "UpdateShopifyProductVariantInput",
              },
            },
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ir.actionRunner)(this, "deleteShopifyProductVariant", null, "shopifyProductVariant", "shopifyProductVariant", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteShopifyProductVariant",
            namespace: null,
            modelApiIdentifier: "shopifyProductVariant",
            modelSelectionField: "shopifyProductVariant",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ir.actionRunner)(this, "bulkDeleteShopifyProductVariants", null, "shopifyProductVariant", "shopifyProductVariants", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteShopifyProductVariants",
            namespace: null,
            modelApiIdentifier: "shopifyProductVariant",
            modelSelectionField: "shopifyProductVariants",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              ir.actionRunner)(this, "createShopifyProductVariant", Lt, "shopifyProductVariant", "shopifyProductVariant", !1, { shopifyProductVariant: { value: t.shopifyProductVariant, required: !1, type: "CreateShopifyProductVariantInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createShopifyProductVariant",
            namespace: null,
            modelApiIdentifier: "shopifyProductVariant",
            modelSelectionField: "shopifyProductVariant",
            isBulk: !1,
            defaultSelection: Lt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              shopifyProductVariant: {
                required: !1,
                type: "CreateShopifyProductVariantInput",
              },
            },
          }
        );
      }
    };
  var Ft = st(Ue()),
    tt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      address1: !0,
      address2: !0,
      checkoutApiSupported: !0,
      city: !0,
      cookieConsentLevel: !0,
      country: !0,
      countryCode: !0,
      countryName: !0,
      countyTaxes: !0,
      currency: !0,
      customerEmail: !0,
      domain: !0,
      eligibleForCardReaderGiveaway: !0,
      eligibleForPayments: !0,
      email: !0,
      enabledPresentmentCurrencies: !0,
      finances: !0,
      forceSsl: !0,
      googleAppsDomain: !0,
      googleAppsLoginEnabled: !0,
      hasDiscounts: !0,
      hasGiftCards: !0,
      hasStorefront: !0,
      ianaTimezone: !0,
      latitude: !0,
      longitude: !0,
      moneyFormat: !0,
      moneyInEmailsFormat: !0,
      moneyWithCurrencyFormat: !0,
      moneyWithCurrencyInEmailsFormat: !0,
      multiLocationEnabled: !0,
      myshopifyDomain: !0,
      name: !0,
      passwordEnabled: !0,
      phone: !0,
      planDisplayName: !0,
      planName: !0,
      preLaunchEnabled: !0,
      primaryLocale: !0,
      province: !0,
      provinceCode: !0,
      shopifyCreatedAt: !0,
      requiresExtraPaymentsAgreement: !0,
      setupRequired: !0,
      shopOwner: !0,
      source: !0,
      taxShipping: !0,
      taxesIncluded: !0,
      shopifyUpdatedAt: !0,
      products: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            body: !0,
            handle: !0,
            shopifyCreatedAt: !0,
            productType: !0,
            publishedAt: !0,
            publishedScope: !0,
            status: !0,
            tags: !0,
            templateSuffix: !0,
            shopifyUpdatedAt: !0,
            title: !0,
            vendor: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
          },
        },
      },
      productImages: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            height: !0,
            position: !0,
            shopifyCreatedAt: !0,
            source: !0,
            shopifyUpdatedAt: !0,
            product: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              handle: !0,
              shopifyCreatedAt: !0,
              productType: !0,
              publishedAt: !0,
              publishedScope: !0,
              status: !0,
              tags: !0,
              templateSuffix: !0,
              shopifyUpdatedAt: !0,
              title: !0,
              vendor: !0,
            },
            width: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
          },
        },
      },
      timezone: !0,
      weightUnit: !0,
      zipCode: !0,
      productVariants: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            barcode: !0,
            compareAtPrice: !0,
            fulfillmentService: !0,
            grams: !0,
            inventoryManagement: !0,
            inventoryPolicy: !0,
            productImage: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              height: !0,
              position: !0,
              shopifyCreatedAt: !0,
              source: !0,
              shopifyUpdatedAt: !0,
              width: !0,
            },
            inventoryQuantity: !0,
            inventoryQuantityAdjustment: !0,
            oldInventoryQuantity: !0,
            option1: !0,
            option2: !0,
            option3: !0,
            position: !0,
            presentmentPrices: !0,
            price: !0,
            product: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              handle: !0,
              shopifyCreatedAt: !0,
              productType: !0,
              publishedAt: !0,
              publishedScope: !0,
              status: !0,
              tags: !0,
              templateSuffix: !0,
              shopifyUpdatedAt: !0,
              title: !0,
              vendor: !0,
            },
            shopifyCreatedAt: !0,
            requiresShipping: !0,
            sku: !0,
            shopifyUpdatedAt: !0,
            taxCode: !0,
            taxable: !0,
            title: !0,
            weight: !0,
            weightUnit: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
          },
        },
      },
      grantedScopes: !0,
      syncs: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            shop: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              address1: !0,
              address2: !0,
              checkoutApiSupported: !0,
              city: !0,
              cookieConsentLevel: !0,
              country: !0,
              countryCode: !0,
              countryName: !0,
              countyTaxes: !0,
              currency: !0,
              customerEmail: !0,
              domain: !0,
              eligibleForCardReaderGiveaway: !0,
              eligibleForPayments: !0,
              email: !0,
              enabledPresentmentCurrencies: !0,
              finances: !0,
              forceSsl: !0,
              googleAppsDomain: !0,
              googleAppsLoginEnabled: !0,
              hasDiscounts: !0,
              hasGiftCards: !0,
              hasStorefront: !0,
              ianaTimezone: !0,
              latitude: !0,
              longitude: !0,
              moneyFormat: !0,
              moneyInEmailsFormat: !0,
              moneyWithCurrencyFormat: !0,
              moneyWithCurrencyInEmailsFormat: !0,
              multiLocationEnabled: !0,
              myshopifyDomain: !0,
              name: !0,
              passwordEnabled: !0,
              phone: !0,
              planDisplayName: !0,
              planName: !0,
              preLaunchEnabled: !0,
              primaryLocale: !0,
              province: !0,
              provinceCode: !0,
              shopifyCreatedAt: !0,
              requiresExtraPaymentsAgreement: !0,
              setupRequired: !0,
              shopOwner: !0,
              source: !0,
              taxShipping: !0,
              taxesIncluded: !0,
              shopifyUpdatedAt: !0,
              timezone: !0,
              weightUnit: !0,
              zipCode: !0,
              grantedScopes: !0,
              accessToken: !0,
              installedViaApiKey: !0,
              registeredWebhooks: !0,
            },
            errorMessage: !0,
            syncSince: !0,
            domain: !0,
            errorDetails: !0,
            models: !0,
          },
        },
      },
      accessToken: !0,
      installedViaApiKey: !0,
      registeredWebhooks: !0,
    },
    yy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ft.findOneRunner)(this, "shopifyShop", t, tt, "shopifyShop", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "shopifyShop",
            modelApiIdentifier: "shopifyShop",
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, Ft.findOneRunner)(
                this,
                "shopifyShop",
                t,
                tt,
                "shopifyShop",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "shopifyShop",
            modelApiIdentifier: "shopifyShop",
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Ft.findManyRunner)(this, "shopifyShops", tt, "shopifyShop", t);
            }),
          {
            type: "findMany",
            operationName: "shopifyShops",
            modelApiIdentifier: "shopifyShop",
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              Ft.findManyRunner)(this, "shopifyShops", tt, "shopifyShop", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "shopifyShops",
            modelApiIdentifier: "shopifyShop",
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, Ft.findManyRunner)(
                this,
                "shopifyShops",
                tt,
                "shopifyShop",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "shopifyShops",
            modelApiIdentifier: "shopifyShop",
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ft.actionRunner)(this, "deleteShopifyShop", null, "shopifyShop", "shopifyShop", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteShopifyShop",
            namespace: null,
            modelApiIdentifier: "shopifyShop",
            modelSelectionField: "shopifyShop",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ft.actionRunner)(this, "bulkDeleteShopifyShops", null, "shopifyShop", "shopifyShops", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteShopifyShops",
            namespace: null,
            modelApiIdentifier: "shopifyShop",
            modelSelectionField: "shopifyShops",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ft.actionRunner)(this, "createShopifyShop", tt, "shopifyShop", "shopifyShop", !1, { shopifyShop: { value: t.shopifyShop, required: !1, type: "CreateShopifyShopInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createShopifyShop",
            namespace: null,
            modelApiIdentifier: "shopifyShop",
            modelSelectionField: "shopifyShop",
            isBulk: !1,
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              shopifyShop: { required: !1, type: "CreateShopifyShopInput" },
            },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Ft.actionRunner)(this, "updateShopifyShop", tt, "shopifyShop", "shopifyShop", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifyShop: { value: r.shopifyShop, required: !1, type: "UpdateShopifyShopInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateShopifyShop",
            namespace: null,
            modelApiIdentifier: "shopifyShop",
            modelSelectionField: "shopifyShop",
            isBulk: !1,
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifyShop: { required: !1, type: "UpdateShopifyShopInput" },
            },
          }
        );
        this.reinstall = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Ft.actionRunner)(this, "reinstallShopifyShop", tt, "shopifyShop", "shopifyShop", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifyShop: { value: r.shopifyShop, required: !1, type: "ReinstallShopifyShopInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "reinstallShopifyShop",
            namespace: null,
            modelApiIdentifier: "shopifyShop",
            modelSelectionField: "shopifyShop",
            isBulk: !1,
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifyShop: { required: !1, type: "ReinstallShopifyShopInput" },
            },
          }
        );
        this.uninstall = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Ft.actionRunner)(this, "uninstallShopifyShop", tt, "shopifyShop", "shopifyShop", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifyShop: { value: r.shopifyShop, required: !1, type: "UninstallShopifyShopInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "uninstallShopifyShop",
            namespace: null,
            modelApiIdentifier: "shopifyShop",
            modelSelectionField: "shopifyShop",
            isBulk: !1,
            defaultSelection: tt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifyShop: { required: !1, type: "UninstallShopifyShopInput" },
            },
          }
        );
      }
    };
  var Vt = st(Ue()),
    rt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      shop: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        address1: !0,
        address2: !0,
        checkoutApiSupported: !0,
        city: !0,
        cookieConsentLevel: !0,
        country: !0,
        countryCode: !0,
        countryName: !0,
        countyTaxes: !0,
        currency: !0,
        customerEmail: !0,
        domain: !0,
        eligibleForCardReaderGiveaway: !0,
        eligibleForPayments: !0,
        email: !0,
        enabledPresentmentCurrencies: !0,
        finances: !0,
        forceSsl: !0,
        googleAppsDomain: !0,
        googleAppsLoginEnabled: !0,
        hasDiscounts: !0,
        hasGiftCards: !0,
        hasStorefront: !0,
        ianaTimezone: !0,
        latitude: !0,
        longitude: !0,
        moneyFormat: !0,
        moneyInEmailsFormat: !0,
        moneyWithCurrencyFormat: !0,
        moneyWithCurrencyInEmailsFormat: !0,
        multiLocationEnabled: !0,
        myshopifyDomain: !0,
        name: !0,
        passwordEnabled: !0,
        phone: !0,
        planDisplayName: !0,
        planName: !0,
        preLaunchEnabled: !0,
        primaryLocale: !0,
        province: !0,
        provinceCode: !0,
        shopifyCreatedAt: !0,
        requiresExtraPaymentsAgreement: !0,
        setupRequired: !0,
        shopOwner: !0,
        source: !0,
        taxShipping: !0,
        taxesIncluded: !0,
        shopifyUpdatedAt: !0,
        timezone: !0,
        weightUnit: !0,
        zipCode: !0,
        grantedScopes: !0,
        accessToken: !0,
        installedViaApiKey: !0,
        registeredWebhooks: !0,
      },
      errorMessage: !0,
      syncSince: !0,
      domain: !0,
      errorDetails: !0,
      models: !0,
    },
    hy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Vt.findOneRunner)(this, "shopifySync", t, rt, "shopifySync", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "shopifySync",
            modelApiIdentifier: "shopifySync",
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, Vt.findOneRunner)(
                this,
                "shopifySync",
                t,
                rt,
                "shopifySync",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "shopifySync",
            modelApiIdentifier: "shopifySync",
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Vt.findManyRunner)(this, "shopifySyncs", rt, "shopifySync", t);
            }),
          {
            type: "findMany",
            operationName: "shopifySyncs",
            modelApiIdentifier: "shopifySync",
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              Vt.findManyRunner)(this, "shopifySyncs", rt, "shopifySync", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "shopifySyncs",
            modelApiIdentifier: "shopifySync",
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, Vt.findManyRunner)(
                this,
                "shopifySyncs",
                rt,
                "shopifySync",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "shopifySyncs",
            modelApiIdentifier: "shopifySync",
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Vt.findOneByFieldRunner)(this, "shopifySyncs", "id", t, rt, "shopifySync", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "shopifySyncs",
            modelApiIdentifier: "shopifySync",
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.run = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Vt.actionRunner)(this, "runShopifySync", rt, "shopifySync", "shopifySync", !1, { shopifySync: { value: t.shopifySync, required: !1, type: "RunShopifySyncInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "runShopifySync",
            namespace: null,
            modelApiIdentifier: "shopifySync",
            modelSelectionField: "shopifySync",
            isBulk: !1,
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              shopifySync: { required: !1, type: "RunShopifySyncInput" },
            },
          }
        );
        this.error = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Vt.actionRunner)(this, "errorShopifySync", rt, "shopifySync", "shopifySync", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifySync: { value: r.shopifySync, required: !1, type: "ErrorShopifySyncInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "errorShopifySync",
            namespace: null,
            modelApiIdentifier: "shopifySync",
            modelSelectionField: "shopifySync",
            isBulk: !1,
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifySync: { required: !1, type: "ErrorShopifySyncInput" },
            },
          }
        );
        this.complete = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Vt.actionRunner)(this, "completeShopifySync", rt, "shopifySync", "shopifySync", !1, { id: { value: t, required: !0, type: "GadgetID" }, shopifySync: { value: r.shopifySync, required: !1, type: "CompleteShopifySyncInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "completeShopifySync",
            namespace: null,
            modelApiIdentifier: "shopifySync",
            modelSelectionField: "shopifySync",
            isBulk: !1,
            defaultSelection: rt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              shopifySync: { required: !1, type: "CompleteShopifySyncInput" },
            },
          }
        );
      }
    };
  var Et = st(Ue()),
    nt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      title: !0,
      body: !0,
      questions: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            title: !0,
            body: !0,
            sequence: !0,
            required: !0,
            imageUrl: !0,
            quiz: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
            },
          },
        },
      },
      results: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            body: !0,
            imageUrl: !0,
            productSuggestion: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              barcode: !0,
              compareAtPrice: !0,
              fulfillmentService: !0,
              grams: !0,
              inventoryManagement: !0,
              inventoryPolicy: !0,
              inventoryQuantity: !0,
              inventoryQuantityAdjustment: !0,
              oldInventoryQuantity: !0,
              option1: !0,
              option2: !0,
              option3: !0,
              position: !0,
              presentmentPrices: !0,
              price: !0,
              shopifyCreatedAt: !0,
              requiresShipping: !0,
              sku: !0,
              shopifyUpdatedAt: !0,
              taxCode: !0,
              taxable: !0,
              title: !0,
              weight: !0,
              weightUnit: !0,
            },
            quiz: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
            },
            answer: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              text: !0,
              sequence: !0,
            },
          },
        },
      },
      responses: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            email: !0,
            conversionState: !0,
            result: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              imageUrl: !0,
            },
            quiz: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
            },
          },
        },
      },
    },
    my = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Et.findOneRunner)(this, "quiz", t, nt, "quiz", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "quiz",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, Et.findOneRunner)(
                this,
                "quiz",
                t,
                nt,
                "quiz",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "quiz",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Et.findManyRunner)(this, "quizzes", nt, "quiz", t);
            }),
          {
            type: "findMany",
            operationName: "quizzes",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              Et.findManyRunner)(this, "quizzes", nt, "quiz", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "quizzes",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, Et.findManyRunner)(
                this,
                "quizzes",
                nt,
                "quiz",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "quizzes",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Et.findOneByFieldRunner)(this, "quizzes", "id", t, nt, "quiz", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "quizzes",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findByTitle = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Et.findOneByFieldRunner)(this, "quizzes", "title", t, nt, "quiz", r);
            }),
          {
            type: "findOne",
            findByVariableName: "title",
            operationName: "quizzes",
            modelApiIdentifier: "quiz",
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Et.actionRunner)(this, "deleteQuiz", null, "quiz", "quiz", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteQuiz",
            namespace: null,
            modelApiIdentifier: "quiz",
            modelSelectionField: "quiz",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Et.actionRunner)(this, "bulkDeleteQuizzes", null, "quiz", "quizzes", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteQuizzes",
            namespace: null,
            modelApiIdentifier: "quiz",
            modelSelectionField: "quizzes",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Et.actionRunner)(this, "updateQuiz", nt, "quiz", "quiz", !1, { id: { value: t, required: !0, type: "GadgetID" }, quiz: { value: r.quiz, required: !1, type: "UpdateQuizInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateQuiz",
            namespace: null,
            modelApiIdentifier: "quiz",
            modelSelectionField: "quiz",
            isBulk: !1,
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              quiz: { required: !1, type: "UpdateQuizInput" },
            },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Et.actionRunner)(this, "createQuiz", nt, "quiz", "quiz", !1, { quiz: { value: t.quiz, required: !1, type: "CreateQuizInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createQuiz",
            namespace: null,
            modelApiIdentifier: "quiz",
            modelSelectionField: "quiz",
            isBulk: !1,
            defaultSelection: nt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { quiz: { required: !1, type: "CreateQuizInput" } },
          }
        );
      }
    };
  var qt = st(Ue()),
    gt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      title: !0,
      body: !0,
      sequence: !0,
      required: !0,
      imageUrl: !0,
      quiz: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        title: !0,
        body: !0,
      },
      answers: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            text: !0,
            sequence: !0,
            question: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
              sequence: !0,
              required: !0,
              imageUrl: !0,
            },
            result: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              imageUrl: !0,
            },
            response: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              email: !0,
              conversionState: !0,
            },
          },
        },
      },
    },
    gy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              qt.findOneRunner)(this, "question", t, gt, "question", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "question",
            modelApiIdentifier: "question",
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, qt.findOneRunner)(
                this,
                "question",
                t,
                gt,
                "question",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "question",
            modelApiIdentifier: "question",
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              qt.findManyRunner)(this, "questions", gt, "question", t);
            }),
          {
            type: "findMany",
            operationName: "questions",
            modelApiIdentifier: "question",
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              qt.findManyRunner)(this, "questions", gt, "question", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "questions",
            modelApiIdentifier: "question",
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, qt.findManyRunner)(
                this,
                "questions",
                gt,
                "question",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "questions",
            modelApiIdentifier: "question",
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              qt.findOneByFieldRunner)(this, "questions", "id", t, gt, "question", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "questions",
            modelApiIdentifier: "question",
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              qt.actionRunner)(this, "deleteQuestion", null, "question", "question", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteQuestion",
            namespace: null,
            modelApiIdentifier: "question",
            modelSelectionField: "question",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              qt.actionRunner)(this, "bulkDeleteQuestions", null, "question", "questions", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteQuestions",
            namespace: null,
            modelApiIdentifier: "question",
            modelSelectionField: "questions",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              qt.actionRunner)(this, "updateQuestion", gt, "question", "question", !1, { id: { value: t, required: !0, type: "GadgetID" }, question: { value: r.question, required: !1, type: "UpdateQuestionInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateQuestion",
            namespace: null,
            modelApiIdentifier: "question",
            modelSelectionField: "question",
            isBulk: !1,
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              question: { required: !1, type: "UpdateQuestionInput" },
            },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              qt.actionRunner)(this, "createQuestion", gt, "question", "question", !1, { question: { value: t.question, required: !1, type: "CreateQuestionInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createQuestion",
            namespace: null,
            modelApiIdentifier: "question",
            modelSelectionField: "question",
            isBulk: !1,
            defaultSelection: gt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              question: { required: !1, type: "CreateQuestionInput" },
            },
          }
        );
      }
    };
  var Mt = st(Ue()),
    vt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      text: !0,
      sequence: !0,
      question: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        title: !0,
        body: !0,
        sequence: !0,
        required: !0,
        imageUrl: !0,
        quiz: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          title: !0,
          body: !0,
        },
      },
      result: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        body: !0,
        imageUrl: !0,
        productSuggestion: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          barcode: !0,
          compareAtPrice: !0,
          fulfillmentService: !0,
          grams: !0,
          inventoryManagement: !0,
          inventoryPolicy: !0,
          inventoryQuantity: !0,
          inventoryQuantityAdjustment: !0,
          oldInventoryQuantity: !0,
          option1: !0,
          option2: !0,
          option3: !0,
          position: !0,
          presentmentPrices: !0,
          price: !0,
          shopifyCreatedAt: !0,
          requiresShipping: !0,
          sku: !0,
          shopifyUpdatedAt: !0,
          taxCode: !0,
          taxable: !0,
          title: !0,
          weight: !0,
          weightUnit: !0,
        },
        quiz: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          title: !0,
          body: !0,
        },
        answer: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          text: !0,
          sequence: !0,
        },
      },
      response: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        email: !0,
        conversionState: !0,
        result: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          body: !0,
          imageUrl: !0,
        },
        quiz: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          title: !0,
          body: !0,
        },
      },
    },
    vy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Mt.findOneRunner)(this, "answer", t, vt, "answer", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "answer",
            modelApiIdentifier: "answer",
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, Mt.findOneRunner)(
                this,
                "answer",
                t,
                vt,
                "answer",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "answer",
            modelApiIdentifier: "answer",
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Mt.findManyRunner)(this, "answers", vt, "answer", t);
            }),
          {
            type: "findMany",
            operationName: "answers",
            modelApiIdentifier: "answer",
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              Mt.findManyRunner)(this, "answers", vt, "answer", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "answers",
            modelApiIdentifier: "answer",
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, Mt.findManyRunner)(
                this,
                "answers",
                vt,
                "answer",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "answers",
            modelApiIdentifier: "answer",
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Mt.findOneByFieldRunner)(this, "answers", "id", t, vt, "answer", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "answers",
            modelApiIdentifier: "answer",
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Mt.actionRunner)(this, "updateAnswer", vt, "answer", "answer", !1, { id: { value: t, required: !0, type: "GadgetID" }, answer: { value: r.answer, required: !1, type: "UpdateAnswerInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateAnswer",
            namespace: null,
            modelApiIdentifier: "answer",
            modelSelectionField: "answer",
            isBulk: !1,
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              answer: { required: !1, type: "UpdateAnswerInput" },
            },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Mt.actionRunner)(this, "createAnswer", vt, "answer", "answer", !1, { answer: { value: t.answer, required: !1, type: "CreateAnswerInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createAnswer",
            namespace: null,
            modelApiIdentifier: "answer",
            modelSelectionField: "answer",
            isBulk: !1,
            defaultSelection: vt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { answer: { required: !1, type: "CreateAnswerInput" } },
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Mt.actionRunner)(this, "deleteAnswer", null, "answer", "answer", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteAnswer",
            namespace: null,
            modelApiIdentifier: "answer",
            modelSelectionField: "answer",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Mt.actionRunner)(this, "bulkDeleteAnswers", null, "answer", "answers", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteAnswers",
            namespace: null,
            modelApiIdentifier: "answer",
            modelSelectionField: "answers",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
      }
    };
  var xt = st(Ue()),
    bt = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      body: !0,
      imageUrl: !0,
      productSuggestion: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        barcode: !0,
        compareAtPrice: !0,
        fulfillmentService: !0,
        grams: !0,
        inventoryManagement: !0,
        inventoryPolicy: !0,
        productImage: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          height: !0,
          position: !0,
          shopifyCreatedAt: !0,
          source: !0,
          shopifyUpdatedAt: !0,
          width: !0,
        },
        inventoryQuantity: !0,
        inventoryQuantityAdjustment: !0,
        oldInventoryQuantity: !0,
        option1: !0,
        option2: !0,
        option3: !0,
        position: !0,
        presentmentPrices: !0,
        price: !0,
        product: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          body: !0,
          handle: !0,
          shopifyCreatedAt: !0,
          productType: !0,
          publishedAt: !0,
          publishedScope: !0,
          status: !0,
          tags: !0,
          templateSuffix: !0,
          shopifyUpdatedAt: !0,
          title: !0,
          vendor: !0,
        },
        shopifyCreatedAt: !0,
        requiresShipping: !0,
        sku: !0,
        shopifyUpdatedAt: !0,
        taxCode: !0,
        taxable: !0,
        title: !0,
        weight: !0,
        weightUnit: !0,
        shop: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          address1: !0,
          address2: !0,
          checkoutApiSupported: !0,
          city: !0,
          cookieConsentLevel: !0,
          country: !0,
          countryCode: !0,
          countryName: !0,
          countyTaxes: !0,
          currency: !0,
          customerEmail: !0,
          domain: !0,
          eligibleForCardReaderGiveaway: !0,
          eligibleForPayments: !0,
          email: !0,
          enabledPresentmentCurrencies: !0,
          finances: !0,
          forceSsl: !0,
          googleAppsDomain: !0,
          googleAppsLoginEnabled: !0,
          hasDiscounts: !0,
          hasGiftCards: !0,
          hasStorefront: !0,
          ianaTimezone: !0,
          latitude: !0,
          longitude: !0,
          moneyFormat: !0,
          moneyInEmailsFormat: !0,
          moneyWithCurrencyFormat: !0,
          moneyWithCurrencyInEmailsFormat: !0,
          multiLocationEnabled: !0,
          myshopifyDomain: !0,
          name: !0,
          passwordEnabled: !0,
          phone: !0,
          planDisplayName: !0,
          planName: !0,
          preLaunchEnabled: !0,
          primaryLocale: !0,
          province: !0,
          provinceCode: !0,
          shopifyCreatedAt: !0,
          requiresExtraPaymentsAgreement: !0,
          setupRequired: !0,
          shopOwner: !0,
          source: !0,
          taxShipping: !0,
          taxesIncluded: !0,
          shopifyUpdatedAt: !0,
          timezone: !0,
          weightUnit: !0,
          zipCode: !0,
          grantedScopes: !0,
          accessToken: !0,
          installedViaApiKey: !0,
          registeredWebhooks: !0,
        },
      },
      responses: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            email: !0,
            conversionState: !0,
            result: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              imageUrl: !0,
            },
            quiz: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
            },
          },
        },
      },
      answers: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            text: !0,
            sequence: !0,
            question: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
              sequence: !0,
              required: !0,
              imageUrl: !0,
            },
            result: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              imageUrl: !0,
            },
            response: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              email: !0,
              conversionState: !0,
            },
          },
        },
      },
      quiz: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        title: !0,
        body: !0,
      },
      answer: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        text: !0,
        sequence: !0,
        question: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          title: !0,
          body: !0,
          sequence: !0,
          required: !0,
          imageUrl: !0,
        },
        result: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          body: !0,
          imageUrl: !0,
        },
        response: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          email: !0,
          conversionState: !0,
        },
      },
    },
    by = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              xt.findOneRunner)(this, "result", t, bt, "result", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "result",
            modelApiIdentifier: "result",
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, xt.findOneRunner)(
                this,
                "result",
                t,
                bt,
                "result",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "result",
            modelApiIdentifier: "result",
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              xt.findManyRunner)(this, "results", bt, "result", t);
            }),
          {
            type: "findMany",
            operationName: "results",
            modelApiIdentifier: "result",
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              xt.findManyRunner)(this, "results", bt, "result", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "results",
            modelApiIdentifier: "result",
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, xt.findManyRunner)(
                this,
                "results",
                bt,
                "result",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "results",
            modelApiIdentifier: "result",
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              xt.findOneByFieldRunner)(this, "results", "id", t, bt, "result", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "results",
            modelApiIdentifier: "result",
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              xt.actionRunner)(this, "deleteResult", null, "result", "result", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteResult",
            namespace: null,
            modelApiIdentifier: "result",
            modelSelectionField: "result",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              xt.actionRunner)(this, "bulkDeleteResults", null, "result", "results", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteResults",
            namespace: null,
            modelApiIdentifier: "result",
            modelSelectionField: "results",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              xt.actionRunner)(this, "createResult", bt, "result", "result", !1, { result: { value: t.result, required: !1, type: "CreateResultInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createResult",
            namespace: null,
            modelApiIdentifier: "result",
            modelSelectionField: "result",
            isBulk: !1,
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { result: { required: !1, type: "CreateResultInput" } },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              xt.actionRunner)(this, "updateResult", bt, "result", "result", !1, { id: { value: t, required: !0, type: "GadgetID" }, result: { value: r.result, required: !1, type: "UpdateResultInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateResult",
            namespace: null,
            modelApiIdentifier: "result",
            modelSelectionField: "result",
            isBulk: !1,
            defaultSelection: bt,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              result: { required: !1, type: "UpdateResultInput" },
            },
          }
        );
      }
    };
  var Ct = st(Ue()),
    Ot = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      email: !0,
      conversionState: !0,
      result: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        body: !0,
        imageUrl: !0,
        productSuggestion: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          barcode: !0,
          compareAtPrice: !0,
          fulfillmentService: !0,
          grams: !0,
          inventoryManagement: !0,
          inventoryPolicy: !0,
          inventoryQuantity: !0,
          inventoryQuantityAdjustment: !0,
          oldInventoryQuantity: !0,
          option1: !0,
          option2: !0,
          option3: !0,
          position: !0,
          presentmentPrices: !0,
          price: !0,
          shopifyCreatedAt: !0,
          requiresShipping: !0,
          sku: !0,
          shopifyUpdatedAt: !0,
          taxCode: !0,
          taxable: !0,
          title: !0,
          weight: !0,
          weightUnit: !0,
        },
        quiz: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          title: !0,
          body: !0,
        },
        answer: {
          id: !0,
          state: !0,
          createdAt: !0,
          updatedAt: !0,
          text: !0,
          sequence: !0,
        },
      },
      quiz: {
        id: !0,
        state: !0,
        createdAt: !0,
        updatedAt: !0,
        title: !0,
        body: !0,
      },
      answers: {
        edges: {
          node: {
            id: !0,
            state: !0,
            createdAt: !0,
            updatedAt: !0,
            text: !0,
            sequence: !0,
            question: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              title: !0,
              body: !0,
              sequence: !0,
              required: !0,
              imageUrl: !0,
            },
            result: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              body: !0,
              imageUrl: !0,
            },
            response: {
              id: !0,
              state: !0,
              createdAt: !0,
              updatedAt: !0,
              email: !0,
              conversionState: !0,
            },
          },
        },
      },
    },
    Oy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ct.findOneRunner)(this, "response", t, Ot, "response", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "response",
            modelApiIdentifier: "response",
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, Ct.findOneRunner)(
                this,
                "response",
                t,
                Ot,
                "response",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "response",
            modelApiIdentifier: "response",
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Ct.findManyRunner)(this, "responses", Ot, "response", t);
            }),
          {
            type: "findMany",
            operationName: "responses",
            modelApiIdentifier: "response",
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              Ct.findManyRunner)(this, "responses", Ot, "response", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "responses",
            modelApiIdentifier: "response",
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, Ct.findManyRunner)(
                this,
                "responses",
                Ot,
                "response",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "responses",
            modelApiIdentifier: "response",
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ct.findOneByFieldRunner)(this, "responses", "id", t, Ot, "response", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "responses",
            modelApiIdentifier: "response",
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.create = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ct.actionRunner)(this, "createResponse", Ot, "response", "response", !1, { response: { value: t.response, required: !1, type: "CreateResponseInput" } }, r, null);
            }),
          {
            type: "action",
            operationName: "createResponse",
            namespace: null,
            modelApiIdentifier: "response",
            modelSelectionField: "response",
            isBulk: !1,
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              response: { required: !1, type: "CreateResponseInput" },
            },
          }
        );
        this.update = Object.assign(
          (t, r, n) =>
            y(this, null, function* () {
              return yield (0,
              Ct.actionRunner)(this, "updateResponse", Ot, "response", "response", !1, { id: { value: t, required: !0, type: "GadgetID" }, response: { value: r.response, required: !1, type: "UpdateResponseInput" } }, n, null);
            }),
          {
            type: "action",
            operationName: "updateResponse",
            namespace: null,
            modelApiIdentifier: "response",
            modelSelectionField: "response",
            isBulk: !1,
            defaultSelection: Ot,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              id: { required: !0, type: "GadgetID" },
              response: { required: !1, type: "UpdateResponseInput" },
            },
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ct.actionRunner)(this, "deleteResponse", null, "response", "response", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteResponse",
            namespace: null,
            modelApiIdentifier: "response",
            modelSelectionField: "response",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Ct.actionRunner)(this, "bulkDeleteResponses", null, "response", "responses", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteResponses",
            namespace: null,
            modelApiIdentifier: "response",
            modelSelectionField: "responses",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
      }
    };
  var lt = st(Ue()),
    Ge = { id: !0, __typename: !0, createdAt: !0, updatedAt: !0 },
    Sy = class {
      constructor(t) {
        this.connection = t;
        this.findOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.findOneRunner)(this, "modelA", t, Ge, "modelA", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "modelA",
            modelApiIdentifier: "modelA",
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindOne = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              let n = yield (0, lt.findOneRunner)(
                this,
                "modelA",
                t,
                Ge,
                "modelA",
                r,
                !1
              );
              return n.isEmpty() ? null : n;
            }),
          {
            type: "maybeFindOne",
            findByVariableName: "id",
            operationName: "modelA",
            modelApiIdentifier: "modelA",
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findMany = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              lt.findManyRunner)(this, "modelAs", Ge, "modelA", t);
            }),
          {
            type: "findMany",
            operationName: "modelAs",
            modelApiIdentifier: "modelA",
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              return (yield (0,
              lt.findManyRunner)(this, "modelAs", Ge, "modelA", N(O({}, t), { first: 1, last: void 0, before: void 0, after: void 0 }), !0))[0];
            }),
          {
            type: "findFirst",
            operationName: "modelAs",
            modelApiIdentifier: "modelA",
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.maybeFindFirst = Object.assign(
          (t) =>
            y(this, null, function* () {
              var n;
              let r = yield (0, lt.findManyRunner)(
                this,
                "modelAs",
                Ge,
                "modelA",
                N(O({}, t), {
                  first: 1,
                  last: void 0,
                  before: void 0,
                  after: void 0,
                }),
                !1
              );
              return (n = r == null ? void 0 : r[0]) != null ? n : null;
            }),
          {
            type: "maybeFindFirst",
            operationName: "modelAs",
            modelApiIdentifier: "modelA",
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.findById = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.findOneByFieldRunner)(this, "modelAs", "id", t, Ge, "modelA", r);
            }),
          {
            type: "findOne",
            findByVariableName: "id",
            operationName: "modelAs",
            modelApiIdentifier: "modelA",
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.create = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "createModelA", Ge, "modelA", "modelA", !1, {}, t, null);
            }),
          {
            type: "action",
            operationName: "createModelA",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelA",
            isBulk: !1,
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: {},
            variables: {},
          }
        );
        this.update = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "updateModelA", Ge, "modelA", "modelA", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "updateModelA",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelA",
            isBulk: !1,
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkUpdate = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "bulkUpdateModelAs", Ge, "modelA", "modelAs", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkUpdateModelAs",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelAs",
            isBulk: !0,
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.delete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "deleteModelA", null, "modelA", "modelA", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "deleteModelA",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelA",
            isBulk: !1,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkDelete = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "bulkDeleteModelAs", null, "modelA", "modelAs", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkDeleteModelAs",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelAs",
            isBulk: !0,
            defaultSelection: null,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
        this.actionA = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "actionAModelA", Ge, "modelA", "modelA", !1, { id: { value: t, required: !0, type: "GadgetID" } }, r, null);
            }),
          {
            type: "action",
            operationName: "actionAModelA",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelA",
            isBulk: !1,
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { id: { required: !0, type: "GadgetID" } },
          }
        );
        this.bulkActionA = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              lt.actionRunner)(this, "bulkActionAModelAs", Ge, "modelA", "modelAs", !0, { ids: { value: t, required: !0, type: "[GadgetID!]" } }, r, null);
            }),
          {
            type: "action",
            operationName: "bulkActionAModelAs",
            namespace: null,
            modelApiIdentifier: "modelA",
            modelSelectionField: "modelAs",
            isBulk: !0,
            defaultSelection: Ge,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: { ids: { required: !0, type: "[GadgetID!]" } },
          }
        );
      }
    };
  var Oa = st(Ue()),
    Bi = {
      id: !0,
      __typename: !0,
      state: !0,
      createdAt: !0,
      updatedAt: !0,
      roles: { key: !0, name: !0 },
      shopifySID: !0,
    },
    Ty = class {
      constructor(t) {
        this.connection = t;
        this.get = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Oa.findOneRunner)(this, "currentSession", void 0, Bi, "session", t);
            }),
          {
            type: "get",
            operationName: "currentSession",
            modelApiIdentifier: "session",
            defaultSelection: Bi,
            selectionType: {},
            optionsType: {},
            schemaType: null,
          }
        );
        this.logInViaEmail = Object.assign(
          (t, r) =>
            y(this, null, function* () {
              return yield (0,
              Oa.actionRunner)(this, "logInViaEmail", Bi, "session", "session", !1, { email: { value: t.email, required: !1, type: "String" }, password: { value: t.password, required: !1, type: "String" } }, r, "currentSession");
            }),
          {
            type: "action",
            operationName: "logInViaEmail",
            namespace: "currentSession",
            modelApiIdentifier: "session",
            modelSelectionField: "session",
            isBulk: !1,
            defaultSelection: Bi,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: void 0,
            variables: {
              email: { required: !1, type: "String" },
              password: { required: !1, type: "String" },
            },
          }
        );
        this.logOut = Object.assign(
          (t) =>
            y(this, null, function* () {
              return yield (0,
              Oa.actionRunner)(this, "logOut", Bi, "session", "session", !1, {}, t, "currentSession");
            }),
          {
            type: "action",
            operationName: "logOut",
            namespace: "currentSession",
            modelApiIdentifier: "session",
            modelSelectionField: "session",
            isBulk: !1,
            defaultSelection: Bi,
            selectionType: {},
            optionsType: {},
            schemaType: null,
            variablesType: {},
            variables: {},
          }
        );
      }
    };
  var VT = st(Ue()),
    _y = class {
      constructor(t) {
        this.apiRoot = "https://curlsfusion-hair-quiz.gadget.app/";
        this.applicationId = "5624";
        this.globalShopifySync = Object.assign(
          () =>
            y(this, null, function* () {
              return yield (0,
              VT.globalActionRunner)(this.connection, "globalShopifySync", {}, null);
            }),
          {
            type: "globalAction",
            operationName: "globalShopifySync",
            namespace: null,
            variablesType: {},
            variables: {},
          }
        );
        this.transaction = (t) =>
          y(this, null, function* () {
            return yield this.connection.transaction(t);
          });
        this.getDirectUploadToken = () =>
          y(this, null, function* () {
            return (yield this.query(
              "query GetDirectUploadToken { gadgetMeta { directUploadToken { url, token } } }"
            )).gadgetMeta.directUploadToken;
          });
        var r;
        (this.connection = new St.GadgetConnection(
          O(
            {
              endpoint: this.apiRoot + "api/graphql",
              applicationId: this.applicationId,
              authenticationMode:
                (r = t == null ? void 0 : t.authenticationMode) != null
                  ? r
                  : typeof window == "undefined"
                  ? { anonymous: !0 }
                  : { browserSession: !0 },
            },
            t
          )
        )),
          (this.user = new ly(this.connection)),
          (this.session = new cy(this.connection)),
          (this.shopifyProduct = new py(this.connection)),
          (this.shopifyProductImage = new dy(this.connection)),
          (this.shopifyProductVariant = new fy(this.connection)),
          (this.shopifyShop = new yy(this.connection)),
          (this.shopifySync = new hy(this.connection)),
          (this.quiz = new my(this.connection)),
          (this.question = new gy(this.connection)),
          (this.answer = new vy(this.connection)),
          (this.result = new by(this.connection)),
          (this.response = new Oy(this.connection)),
          (this.modelA = new Sy(this.connection)),
          (this.currentSession = new Ty(this.connection)),
          (this.internal = {
            user: new St.InternalModelManager("user", this.connection),
            session: new St.InternalModelManager("session", this.connection),
            shopifyProduct: new St.InternalModelManager(
              "shopifyProduct",
              this.connection
            ),
            shopifyProductImage: new St.InternalModelManager(
              "shopifyProductImage",
              this.connection
            ),
            shopifyProductVariant: new St.InternalModelManager(
              "shopifyProductVariant",
              this.connection
            ),
            shopifyShop: new St.InternalModelManager(
              "shopifyShop",
              this.connection
            ),
            shopifySync: new St.InternalModelManager(
              "shopifySync",
              this.connection
            ),
            quiz: new St.InternalModelManager("quiz", this.connection),
            question: new St.InternalModelManager("question", this.connection),
            answer: new St.InternalModelManager("answer", this.connection),
            result: new St.InternalModelManager("result", this.connection),
            response: new St.InternalModelManager("response", this.connection),
            modelA: new St.InternalModelManager("modelA", this.connection),
          });
      }
      query(t, r) {
        return y(this, null, function* () {
          let { data: n, error: i } = yield this.connection.currentClient
            .query(t, r)
            .toPromise();
          if (i) throw i;
          return n;
        });
      }
      mutate(t, r) {
        return y(this, null, function* () {
          let { data: n, error: i } = yield this.connection.currentClient
            .mutation(t, r)
            .toPromise();
          if (i) throw i;
          return n;
        });
      }
      toString() {
        return `GadgetAPIClient<${this.apiRoot}>`;
      }
      toJSON() {
        return this.toString();
      }
    };
  var gC = window.Gadget;
  window.Gadget = _y;
  window.Gadget.previousValue = gC;
})();
//# sourceMappingURL=web.min.js.map
